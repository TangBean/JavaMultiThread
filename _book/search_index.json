{"index":{"version":"0.5.12","fields":[{"name":"title","boost":10},{"name":"keywords","boost":15},{"name":"body","boost":1}],"ref":"url","documentStore":{"store":{"./":["1.","introduct","javamultithread","javamultithread1.","java多线程编程"],"Ch1-Java多线程技能/":["1.","java多线程技能"],"Ch1-Java多线程技能/Java多线程概述.html":["\"","\");","\"a\";","\"aa\";","\"bb\");","(int","(interruptedexcept","(this)","(true)","(强烈建议不使用，要作废了，还不安全)","(比较温和，不会强行终止一个正在运行的线程)","+","...","//","0","0;","1","1.","1.1","1.1.","1.2.","1.2.1.","1.2.2.","1.3.","1.4.","1.4.1.","1.4.2.","1.4.3.","1.4.4.","1.5.","1.5.1.","1.5.2.","1.5.3.","1.6.","1.6.1.","1.6.2.","1.7.","1.7.1.","1.7.2.","1.8.","10;","1;","1~10，如果不在这个范围会抛出","2","3","3，note","4","5;","7","=","@overrid","aa","args)","b","begin","begin\");","begin,","catch","catch\");","class","countoper","countoperate()","countoperate();","countoperate.java","countoperatemain","countoperatemain.java","cpu","currentthread()","currentthread()1.4.2.","e)","e.printstacktrace();","end","end\");","end\"就会被卡住。这是为什么呢？因为：程序被停在了","end\"，然后卡住，如果加了","ended,","ending,","ex","extend","fals","false。","false，是","false，第二次调用就为","final","getid()","getid()1.5.","getpassword()","getusername()","i++","i=104430","i=104431","i=104432","illegalargumentexcept","implement","int","interrupt()","interruptedexcept","isalive()","isalive()1.4.3.","java","java.lang.threaddeath","java多线程概述","java多线程概述1.1.","long","main","main(string[]","max_priorti","min_priorti","mythread","mythread();","mythread.java","mythread.start();","mythreadmain","mythreadmain.java","name);","new","newline();","newpriorty)，可以设置为","norm_priorti","note","object","object.getpassword());","object.printstring(\"b\",","output","output：","password","password)","password;","print(x);","println","println(int","printstring(str","printsuspendthread","printsuspendthread();","printsuspendthread.java","printsuspendthread.start();","printsuspendthread.suspend();","printsuspendthreadmain","printsuspendthreadmain.java","privat","public","resume()：恢复线程","return","run","run()","runnabl","setpassword(str","setusername(str","sleep","sleep(毫秒数)","sleep(毫秒数)1.4.4.","sleep中停止","start()","static","stop()","stop暴力停止线程的弊端","stop暴力停止线程的弊端1.6.","string","super.run();","suspend","suspend()","suspend()：暂停线程","synchron","synchronizedobject","synchronizedobject();","synchronizedobject.java","synchronizedobjectmain","synchronizedobjectmain.java","synchronized关键字","synchronized关键字1.4.","system.out.println(\"","system.out.println(\"countoper","system.out.println(\"main","system.out.println(\"mythread\");","system.out.println(\"run","system.out.println(\"this.getname()=\"","system.out.println(\"this.isalive()=\"","system.out.println(\"thread.currentthread().getname()=\"","system.out.println(\"thread.currentthread().isalive()=\"","system.out.println(i);","system.out.println(object.getusername()","t1","t1.isalive());","t1.isalive()=\"","t1.isalive()=fals","t1.isalive()=tru","t1.setname(\"at1\");","t1.start();","tag","tag，如果打上了","tag，我们有以下两种方法可以进行检测：","tag，我们要在线程中不时检查它是不是已经被打上","targer)构造函数的缘故，而且","target","target);","target,","target;","target，这样我们就不用写","this.getname());","this.getname()=thread","this.interrupted()：测试当前线程是否已经是中断状态，执行后将状态标志清除为","this.isalive());","this.isalive()=fals","this.isinterrupted()：测试当前线程是否已经是中断状态，执行后不状态清除状态标志，不是","this.password","this.usernam","thread","thread()","thread();","thread(countoperate);","thread(runn","thread(runnable);","thread(str","thread.currentthread()","thread.currentthread().getname());","thread.currentthread().getname()=at1","thread.currentthread().getname()=main","thread.currentthread().isalive());","thread.currentthread().isalive()=tru","thread.interrupt();","thread.sleep(1000);","thread.sleep(100000);","thread.sleep(2000);","thread.sleep(500);","thread.sleep(5000);","thread.start();","thread.stop();","thread中的4个方法","thread中的4个方法1.4.1.","thread，然后用","throw","tri","true","usernam","username)","username,","username;","void","x)","yield方法","yield方法1.8.","{","}","};","三个","中一起给出。","中有以下","中预设的优先级等级：","之后线程并不会停止，因为","也在作废方法的范围中。使用不当会导致如下两个问题：","也就是说","了(就是在","了)，它就会一直卡在那，还不放开锁，导致其他线程无法访问公共同步对象。","了。","介绍了优先级，有一个感觉类似于达到降低自己的优先级的方法：yield()。","优先级具有随机性：优先级高只是抢","优先级的特性","优先级的特性1.7.2.","会导致怎样的异常呢？我们来看下面这个例子：","会抛出","传入一个已经创建好的线程对象，这是因为","使用","修饰，然后在这个方法里面调用thread.currentthread.suspend();即可，不过有一些比较隐蔽的同步块，也可能会导致独占公共同步对象，使得程序卡住。例子如下：","停止线程","停止线程1.5.1.","关键字可以用来修饰任意对象和方法，作用就是给它们加上锁，这样当多个线程要使用这个对象或调用这个方法时，要以排队的方式进行，也就是在同一时刻只能有一个线程拿到这把锁，其他线程在尝试拿到这把锁。","判断当前线程是否处在活动状态。","判断线程是否为停止状态","判断线程是否为停止状态1.5.2.","包裹着另一个线程对象","取得线程的唯一标识。","受制于","只是给","只是给线程打上了一个终止的","可以看出，我们不仅可以创建一个全新的","后会将状态标志设为","后，我们用","启动线程：","启动还是要依靠thread类的","和","在了","在用一些其他办法终止线程，所以我们要能判断一个线程是否是停止状态，即检查线程是否被","在设置完","块中","块中进行一些回滚操作的，而用","块，并清楚停止状态值使之为","如果一个线程在同步块中","如果不加","如果在","它的作用是放弃当前的","守护线程","守护线程1.","安全停止线程的方法","安全停止线程的方法1.5.3.","定义：一种特殊的线程，当进程中不存在非守护线程了，守护线程自动销毁。","实现runnable接口(常用)","实现runnable接口(常用)1.3.","实现多线程的基本方法","实现多线程的基本方法1.2.1.","实现：","对象","对象的","对象，也可给","就是说这个方法如果调用两次，第一次为","异常。","异常法","异常，不过该异常不需要显式捕捉。","强制终止了线程，导致了用户名和密码的不一致，这种事务性问题是需要在","影响是一样的。","得到的是","得到的根本就是不同的两个线程，thread.currentthread()","得到线程优先级：getpriorty()","想要安全的停止一个线程，用","我们可以创建一个","打上","执行时间，不过刚放弃就立刻又抢到了","换成","接口的，所以我们甚至可以将一个","数据不同步","数据不同步1.7.","数据不同步的原因和","文件。","方法中断线程","方法了，直接调用","方法交给其他线程调用。","方法导致数据不同步的原因即可，把那的","方法就好，感觉上像是实现了线程本身与","方法强制退出","方法执行完之后自动退出","方法执行的内容的分离。","方法拿不到锁，因此无法执行。","方法的同步块中，它会一直拿着锁不释放，main","方法的影响很像，直接看","方法而已，countoper","方法里面，println","时间片也是又可能的。","时间片时抢到的概率高而已，并不一定就执行的比优先级低的快。","是同步的，它内部有一个同步锁，当","是最好的方法，不过调用了","是死的，countoper","是活的，而","普通的例子很好举，只要在一个方法前加上","暂停线程","暂停线程1.6.1.","有","有一个thread(runn","有可能会导致数据不同步。","根本就没有","概念","概念1.2.","然后进入","状态下停止线程，会","独占公共同步对象","独占公共同步对象1.6.2.","用","用起来还是十分危险的，所以","的","的。","的不同！！！","的单继承机制，并不是十分灵活。","的源码如下：","的结果，尤其是","示例：","示例：典型的守护线程是垃圾回收线程，当进程中没有非守护线程了，垃圾回收线程就没有存在的必要了，会自动销毁。","种构造函数，比较常用的有以下几种：","种终止正在运行的线程的方法：","类中有一个：","类也是实现了","线程中的","线程优先级有继承的特性：子线程和父线程具有相同的优先级。","线程对象，thi","线程对象，thread","线程已经停止，准备退出","线程提供了","线程的优先级","线程的优先级1.7.1.","线程被","线程：在进程中独立运行的子任务，被调用的时机是随机的。","终止一个线程是一个复杂的问题，java","终止线程并不能给我们这样的机会，所以","继承thread类","继承thread类1.2.2.","让“正在执行的线程”即","设置方法：thread.setdaemon(true);","设置线程优先级：setpriorty(int","调用","资源，将它让给其他任务去占用","过。","返回代码段正在被哪个线程调用的信息。","返回的线程，休眠指定的毫秒数。","这两个方法，尤其","这两个问题的详细说明如下：","这是因为","这种不同源自于","这里有一个关于thread.currentthread().getname()和this.getname()结果的不同的问题，详细的例子和下面的","进入mythread.java的catch块","进程：受操作系统管理的基本运行单元，可以理解成运行在内存中的","那行，程序会输出：\"main","那行，程序根本无法输出\"main","重点在于观察"],"Ch2-对象及变量的并发访问/":["2.","对象及变量的并发访问"],"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":["\"","\":","\"aa\");","\"bb\");","\"c\";","\"cc\";","\"thread","\"thread1\");","\"thread2\");","\"非线程安全\"是我们要考虑的一个问题，\"非线程安全\"可能会导致数据的脏读，使得程序运行产生错误的结果。","\"非线程安全\"问题一般存在于\"实例变量\"中，因为实例变量是有可能被多个线程所共享的，而方法内部的私有变量对于每个线程都是有一个副本的，因此不存在\"非线程安全\"问题，也就是说只有共享资源的读写问题才需要我们通过\"同步化\"去解决线程安全问题。","(a","(class)","(interruptedexcept","(list)","(list.getsize()","(lock1)","(lock2)","(service.class)","(this)","(username.equals(\"a\"))","(username.equals(\"b\"))","(x)","(锁对象)修饰在代码块前面","(非","(非this对象)","(非this对象)的三个结论","(非this对象)的三个结论1.5.","+","...","//","0\":","0，此时","1","1\":","1.","1.1.","1.1.1.","1.1.2.","1.2.","1.2.1.","1.2.2.","1.3.","1.4.","1.5.","1.6.","1.7.","1.7.1.","1.7.2.","13428","14852","16868","2.1.","2664","=","===================================================",">lock1",">lock1\");",">lock2",">lock2\");","@overrid","[id值]，查看结果","\\\\","a\");","above:","add","add(str","addservicemethod(myonelist","args)","arraylist<>();","b","b\");","begin.","begin.\");","c:\\users\\bean\\ideaprojects\\learnspring>jp","c:\\users\\bean\\ideaprojects\\learnspring>jstack","catch","ch2.deadlock.deadlock.run(deadlock.java:23)","ch2.deadlock.deadlock.run(deadlock.java:36)","class","data)","deadlock","deadlock();","deadlock.","deadlock.java","deadlock.setusername(\"a\");","deadlock.setusername(\"b\");","e)","e.printstacktrace();","end.","end.\");","extend","found","getsize()","getvalu","getvalue()","id","implement","inform","int","interruptedexcept","java","java.lang.object)","java.lang.thread.run(thread.java:748)","jdk","jp","jstack","jvm","l","launcher","list","list)","list,","list.add(data);","list.getsize());","list.size();","list;","listsize=2","lock","lock1","lock2","lock2)","main","main(string[]","main.java","method","method\"","method1()","method2()","method3()","myonelist","myonelist();","myonelist.java","myservic","myservice();","myservice.java","mythread1","mythread1(list);","mythread1(myonelist","mythread1.java","mythread2","mythread2(list);","mythread2(myonelist","mythread2.java","new","note1","object","object();","object()，同时要注意：只要对象不变，既使该对象的属性改变了，结果还是同步的，比如我们使用一个us","password","password)","password);","password;","password=\"","password=aa","password=bb","password=cc","privat","public","publicvar","publicvar();","publicvar)","publicvar.getvalue();","publicvar.java","publicvar.setvalue(\"a\",","publicvar.setvalue(\"b\",","publicvar;","return","run","run()","run.java","runnabl","servic","service();","service.addservicemethod(list,","service.java","service.method1();","service.method2();","service.method3();","service1","service1()","service2","service2()","service2();","service2，这样","setusername(str","setvalu","setvalue(str","sleep时，thb改变了username的值，出现了数据不同步的问题","stack","static","string","super();","super.run();","synchron","synchronized使用方式","synchronized使用方式1.3.","synchronized修饰在方法前面，此时锁对象为当前对象本身，也就是thi","synchronized关键字","synchronized关键字1.2.1.","synchronized同步","synchronized同步1.1.","synchronized同步方法","synchronized的特性","synchronized的特性1.2.2.","synchronized：同步，加个前缀","system.out.println(\"listsize=\"","system.out.println(\"service1\");","system.out.println(\"service2\");","system.out.println(\"thread:","system.out.println(\"username=\"","system.out.println(thread.currentthread().getname()","system.out.println(usernam","th1","th1.start();","th1：lock1","th2","th2)，两个锁(lock1,","th2.start();","th2：lock2","tha","tha.setname(\"thread","tha.start();","thb","thb.setname(\"thread","thb.start();","this.list","this.password","this.password);","this.publicvar","this.usernam","this。","this？","thread","thread()","thread(deadlock);","thread.currentthread().getname()","thread.sleep(100);","thread.sleep(10000);","thread.sleep(2000);","thread.sleep(3000);","thread.sleep(5000);","thread.sleep(6000);","thread1","thread1.setname(\"thread1\");","thread1.start();","thread2","thread2.setname(\"thread2\");","thread2.start();","thread3","thread3.setname(\"thread3\");","thread3.start();","thread:","threada","threada(publicvar","threada(publicvar);","threada.java","threadb","threadb(publicvar","threadb(publicvar);","threadb.java","throw","tri","usernam","username)","username);","username,","username;","username=\"","username=a","username=b","user作为锁，即使我们改变了user.username的值，结果仍是同步的。","void","wait","x","x)进行同步时，x","{","{...}","{}同步代码块时呈同步效果","}","};","不加","不存在，实例化该字符串并放入池中","不过要注意！！！使用synchron","中具有","为了提高性能减小内存开销，在实例化字符串常量的时候进行了如下优化：","为什么需要锁不是","为字符串开辟一个字符串常量池","为：","也可以指定锁对象为其他自定义的对象，注意：如果要进行同步的多个代码块，那么这些需要进行同步的多个同步代码块的锁必须是同一个对象，即synchron","也可以进入","也就是说，对于共享数据，其读写必须是同步的，多个线程可以同时读取，但是只要有一个线程在执行写入操作，其他线程就不能再进行任何读写操作了，必须等待执行写入操作的线程执行完才行。(在这里我们先不考虑效率问题，只保证结果正确)","也就是说：synchron","也是需要锁的，如果线程无法再次获得锁，那么它将永远无法执行","产生数据不同步问题","产生死锁","产生死锁1.7.1.","产生死锁的本质：两个线程在需要对方掌握的资源同时又不肯放开自己手中的资源，由此陷入的胶着状态","产生死锁的程序：","代码块中，就会导致","代码块是异步的。","代码块的作用是一样的。","代码如下：","作为锁，只要我们对两个","作为锁，而用其他对象，比如new","使用jps命令得到","修改文件","修饰的部分的","假设","先搭建环境如下：","先说结论：synchron","关键字加到","关键字，synchron","出错原因：myservice.java","则是给对象上锁。","创建字符串常量时，首先检查字符串常量池是否存在该字符串","取值时的线程安全问题(脏读)","取值时的线程安全问题(脏读)1.2.","可以指定锁对象为当前对象本身，即synchron","可以通过","可以通过如下代码证明：","同步代码块使用用相同的字符串做锁，这两个","同步代码块就是同步的，这会比较容易带来问题，所以我们一般都不使用","同步代码块放在非同步方法中执行产生的脏读问题","同步代码块放在非同步方法中执行产生的脏读问题1.4.","同步代码块，只要证明这两部分是同步的，就可以说明","同步方法时呈同步效果","和","因为这样可以提高程序的运行效率，如果在一个类中有很多个","在","在tha","声明的方法或者代码块一定同步的，也就是是排队运行的。","处，当","处，调用了","多个线程执行synchron","如何产生死锁","如何产生死锁1.7.2.","如何检测死锁","如何检测死锁1.","如果不可锁重入的话，会造成死锁，造成死锁的原因如下：","字符串常量池实现的基础：","字符串是不可变的，可以不用担心数据冲突进行共享","存在该字符串，返回引用实例","对象","对象中","对象中synchron","对象的同步方法呢？","对象，那么有以下三个结论：","就永远不会结束，它也永远不会放开锁，程序的运行陷入死循环，导致死锁。","已经可以调用","常量池缓存的功能，这里我们先简单的介绍以下字符串常量池：","当一个线程执行出现异常时，其所持有的锁会自动释放","当其他线程执行","当存在父子类继承关系时，子类是可以通过\"可重入锁\"调用父类的同步方法的","得到运行结果如下：","必须是同一个对象，就是说基本上应该是成员变量而非局部变量，*锁不同的","我们主要采取的解决问题方式就是：借助","我们知道","执行到时延时，list","把if用synchronized代码块包起来，因为这里只有一个list对象，用其做锁很合适","拥有锁重入的功能，即当一个线程得到一个对象锁后，此时这个线程也是可以调用该对象其他被","按照如下顺序希求锁，两个线程在得到一个锁后都有相同时间的时延","操作。","文件","文件为：","方法上是给","方法了，因此","方法使用的锁是","方法和","方法并没有结束，说明线程不会放开锁，可以执行","方法改成同步的：","方法，此时","方法，这时虽然能实现同步，但是由于线程阻塞的原因，运行效率大大降低，如果我们根据同步需求将其分成需要进行同步几部分，每一部分用一个锁，这样就不会有这么多的方法的运行都需要抢夺一个锁，大大提高运行效率。","方法：只要写一段代码，里面有一个同步方法，另一个方法中有一个","是一个非","是同步的，和","是异步的。","普通同步方法","有两个线程(th1,","有两种使用方式：","有线程安全问题的代码：","死锁的产生方法：","注意：如果其他线程调用","用string做锁的坑","用string做锁的坑1.7.","用当前类的class类作为锁的同步代码块","由于这个特性，如果我们用","的方法时，还是异步调用。","的自带工具jps和jstack来检测死锁。步骤如下：","的长度仍为","类上锁，而加到非","线程安全包括原子性和可见性两个方面。","线程的","结果：","而后程序运行停止，不再向下执行，陷入死锁，可以通过下一节的方法进行检测","观察运行结果可知，thread2","解决方法：修改","解决方法：把","赋值时的线程安全问题","赋值时的线程安全问题1.1.2.","运行如上代码，运行结果如下：","运行时，实例创建的全局字符串常量池中有一个表，总是为池中每个唯一的字符串对象维护一个引用,这就意味着它们一直引用着字符串常量池中的对象，所以，在常量池中的这些字符串不会被垃圾收集器回收","运行结果如下：","运行结果：","这里可以引申出一个问题：如何判断","进行了两次","静态同步synchronized方法与synchronized(class)代码块","静态同步synchronized方法与synchronized(class)代码块1.6.","静态同步方法","非线程安全问题是如何出现的","非线程安全问题是如何出现的1.1.1.","首先我们先来看看没有非线程安全的程序运行起来会导致的问题。","，就表示相反的意思了，asynchronized：异步。"],"Ch2-对象及变量的并发访问/02-volatile关键字.html":["(anystring)","(assign赋值)","(int","(load)","(runflag)","(use)","(因为它会将私有内存和公共内存中的数据做同步)。","*/","+","...","/*","//","0;","1","1.","1.1.","1.2.","1.3.","1.4.","1.5.","1，这个操作虽然只有一行，不过是一个典型的非原子操作，它的操作步骤分解如下：","2.2.","49997","49998","49999","50000","=",">","@overrid","addcountthread","addcountthread();","addcountthread.java","anystr","args)","atomicinteg","atomicinteger(0);","boolean","class","count","countthread","false;","i++的非原子性","i++的非原子性1.5.","i++，就是","implement","interruptedexcept","isrunflag()","java","main(string[]","new","privat","public","return","run","run()","run.java","runflag","runflag)","runflag;","runmethod()","runnabl","servic","service();","service)","service.java","service.runflag","service.runflag，而这个问题也正是由于公共堆栈和私有堆栈中的值不同步造成的。","service.runmethod();","service.stopmethod();","service;","setrunflag(boolean","static","stopmethod()","string","string();","super();","synchron","synchronized的可见性功能","synchronized的可见性功能1.4.","synchronized，但只能用来修饰变量，而","system.out.println(\"停止成功\");","system.out.println(\"已经发起停止命令\");","tha","this.runflag","this.servic","thread(tha).start();","thread.sleep(1000);","threada","threada(servic","threada(service);","threada.java","throw","true;","void","volatil","volatile关键字","volatile关键字1.1.","volatile关键字介绍","volatile关键字介绍1.2.","volatile和synchronized的对比","volatile和synchronized的对比1.3.","{","}","不会发生阻塞，而","不用volatile修饰","中的service.stopmethod();并没有修改正在运行的","也就是说，volatil","从内存中取出","代码)","代码如下：","会出现阻塞。","使用一个主内存来保存变量当前值，而每个线程则有其独立的工作内存。线程访问变量的时候会将变量的值拷贝到自己的工作内存中，这样，当线程对自己工作内存中的变量进行操作之后，就造成了工作内存中的变量拷贝的值与主内存中的变量值不同。","使用原子类进行i++操作","使用原子类进行i++操作1.","修改文件","修饰之后：(修改文件","修饰的变量，为了获得最佳速度，允许线程保存共享成员变量的私有拷贝，而且只当线程进入或者离开同步代码块时才与共享成员变量的原始值对比，也就是说，java","关键字","关键字可以解决变量在多个线程之间的可见性问题，它可以让多线程读取共享变量时可以获得该变量的最新值。","加","即可解决这个问题。","原子性：原子操作是不能分割的整体，没有其他线程能够中断或检查正在原子操作中的变量。","原子类可以在没有锁的情况下做到线程安全，不过原子类中的每个方法是一个原子操作，不过方法和方法之间并不是原子的。","原子类：atomic各种，例如：atomicinteger，atomicintegerarray，atomicboolean等。","只能保证数据的可见性，不能保证数据的原子性，而","可以保证数据的原子性，并可以间接保证数据的可见性","可以用来修饰方法和代码块。","可以达到与","在这种情况下，如果我们运行如下结构的的代码程序将永远不会停止：","在这里运行stopmethod()并没有修改正在运行的tha中的service.runflag的值！","多线程访问","对于没有","将","强大很多，它们之间有如下几点区别：","当我们把","想要了解","文件","是线程同步的轻量级实现，性能要好于","显然，synchron","用","的主要作用是使变量在多个线程间可见，它强制这个变量从公共内存中取得变量的值，而不是从线程的私有数据栈中取得变量的值。","的作用，我们要先来介绍一下","的值","的值写道内存中","的内存机制原理图如下：","的内存机制，java","的意思为：易变的，不稳定的。","的私有堆栈中的","相同的效果。","示例：","能加到50000，说明保证了count+1的原子性","要比","计算","输出：","这三步是典型的非原子操作，在多线程的环境中运行很容易出现问题。","这是因为我们通过"],"Ch3-线程间通信/":["3.","线程间通信"],"Ch3-线程间通信/01-等待通知机制.html":["!=","\"thread","(!ispreva)","(int","(interruptedexcept","(ioexcept","(ispreva)","(list.size()","(lock)","(readlen","(valueobject.list.size()","(等待)","(通知)","+","...","/","//","0","0)","0,","0;","0，则再次进入","0，则执行","1\"","1)","1.","1.1.","1.2.","1.2.1.","1.2.2.","1.2.3.","1.3.","1.4.","1.4.1.","1.4.2.","1.5.","1.6.","1.6.1.","1.6.2.","1.7.","1;","3.1.","5","5)","=","==",">","@overrid","add","add()","add(lock);","add(object","add)","add.add();","add.java","add;","args)","arraylist();","arraylist，我们要保证这个","b","backupa","backupa()","backupa(dbtool","backupa.java","backupb","backupb()","backupb(dbtool","backupb.java","begin","begin\");","block","boolean","buffer","byte[20];","byte[]","b交叉运行","catch","catch）。","ch3.change.subtract.subtrack(subtract.java:19)","ch3.change.threadsubtract.run(threadsubtract.java:13)","class","cpu","data","dataread","datareader.java","datareader.readmethod(in);","datawrit","datawriter.java","datawriter.writemethod(out);","dbtool","dbtools();","dbtools)","dbtools.backupa();","dbtools.backupb();","dbtools.java","dbtools;","e)","e.printstacktrace();","end","end\");","end,","except","false;","getbytes()","implement","in)","in.close();","in.read(buffer);","in;","index:","inperrupt方法遇到wait","inperrupt方法遇到wait1.4.","input","inputstream","int","interruptedexcept","io","ispreva","java","java.lang.indexoutofboundsexception:","java.lang.thread.run(thread.java:748)","java.util.arraylist.rangecheck(arraylist.java:653)","java.util.arraylist.remove(arraylist.java:492)","java的线程状态转换说明","java的线程状态转换说明1.2.3.","jvm","list","list,","list.add(new","list.size();","list.size()=0","list;","list，比如一个","lock","lock)","lock)).start();","lock.notifyall();","lock.wait();","lock;","main(string[]","mylist","mylist();","mylist.java","n","n/2","new","note1","notifi","notify()：随机唤醒等待队列中等待锁的一个线程，使该线程退出等待队列，进入可运行状态","notifyall();","notifyall()：使所有线程退出等待队列，进入可运行状态，执行的顺序由","notify，会导致被","notify，它才会被选中进入就绪队列，等待被","object","object());","object();","out)","out;","output","outputstream","outputstream.connect(inputstream);","pipedinputstream","pipedinputstream();","pipedoutputstream","pipedoutputstream();","privat","public","readlen","readlen);","readmethod(pipedinputstream","remov","remove\");","resum","return","run","run()","run.java","runnabl","runnable（可运行）状态，不过这个是一个准备运行的状态，当这个线程抢占到","running\");","running（运行）状态。","runtimeexception，不用","size()","size:","sleep","sleep()","someth","start()","static","string","string(buffer,","subtrack()","subtract","subtract(lock);","subtract(object","subtract)","subtract.java","subtract.subtrack();","subtract;","super();","suspend","suspend()（这个方法极易导致死锁，不建议使用）","sybchron","synchron","system.out.print(data);","system.out.println(\"a","system.out.println(\"b","system.out.println(\"list.size()=\"","system.out.println(\"read:\");","system.out.println(\"wait","system.out.println(\"wait()","system.out.println(\"write:\");","system.out.println();","this.add","this.dbtool","this.in","this.list","this.lock","this.out","this.subtract","thread","thread(new","thread.sleep(1000);","thread.sleep(2000);","thread.sleep(50);","threada","threada(list,","threada(mylist","threadadd","threadadd(add","threadadd(add)).start();","threadadd.java","threadb","threadb(list,","threadb(mylist","threadread","threadreader(inputstream)).start();","threadreader(pipedinputstream","threadreader.java","threadsubtract","threadsubtract(subtract","threadsubtract(subtract)).start();","threadsubtract.java","threadwrit","threadwriter(outputstream)).start();","threadwriter(pipedoutputstream","threadwriter.java","throw","time","time)：等待","tri","true;","valueobject","valueobject\");","valueobject.java","valueobject.list","valueobject.list.add(\"anystring\");","valueobject.list.remove(0);","valueobject.list.size());","void","volatil","wait","wait()","wait();","wait()等待的条件发生了变化","wait()等待的条件发生了变化1.5.","wait()：使调用该方法的线程释放锁，从运行状态中退出，进入等待队列，直到接到通知或者被中断","wait(long","wait/notify机制导致的程序逻辑混乱","wait/notify机制导致的程序逻辑混乱1.4.1.","wait，没人通知它可以不","while，这样当","write","writemethod(pipedoutputstream","{","{...}中的lock来调用的，比如：lock.wait()，lock.notify()等，所以这些方法必须在","}","一生产一消费","一生产多消费","不会放开锁。","与","个线程负责将数据备份到","个线程，其中","中只有一个元素，这时会涉及到上一节中讲到的","中通知了所有等待线程，两个","为什么说等待/通知机制可以节约系统资源呢，因为如果没有等待/通知机制，两个线程之间想要进行通信的话，只能用一个","为每个","了，然后程序就卡住了……，不过如果在调用","什么是交叉备份：就是创建","什么是等待/通知机制","什么是等待/通知机制1.2.","代码为：","代码如下：","以上的过程就是一个等待/通知机制，等待的线程在等待状态不会耗费系统资源，当需要它启动的时候其他的线程会通知它启动，这样也不会错过启动的时机。","以上这些方法都是","会放开锁，sleep","会遇到的问题：全部线程进入","但是","使用等待/通知机制的程序","使用等待/通知机制的程序1.3.","修改为","修改文件","修改这里：if","其操作的内容也有不同的选择，如：","决定","出现这个错误的主要原因是：在文件","创建一个线程之后，再调用它的","判断处，两个","到管道流，另一个线程再将数据","到这里才结束wait，说明notify执行后不会立刻释放锁，而是等到其线程退出synchronized代码块后才释放锁","前调用了","只有一个添加线程","可以将任一个对象作为锁，所以","后就会进入阻塞队列，等待又其他线程调用了","和","和遇到","回来，这样可以实现不同线程间的通信而无需借用临时文件值类的东西，感觉像一个寄存信箱。","处理就可以直接写入。","处的","多生产一消费","多生产多消费","大体有如下","如下代码会抛出异常，因为它试图在从一个长度为","如果在","字符流和字节流的操作差不多，就是","字符流：pipedwriter&pipedread","字符流：pipedwriter&pipedreader1.7.","字节流：pipedoutputstream&pipedinputstream","字节流：pipedoutputstream&pipedinputstream1.6.2.","实战：交叉备份","实战：交叉备份1.","实现机制是这样的：每个锁对象都又两个队列，一个是就绪队列，一个是阻塞队列。就绪队列中存储了将要获得锁的线程，阻塞队列中存储了被阻塞的线程。一个线程被唤醒后，才会进入就绪队列，等待","实现：","对于操作栈，也存在程序假死的问题，这里也可以通过修改notify()为notifyall()来解决问题。","已发出通知","循环，时刻监控另一个线程的动向，这样是十分耗费系统资源的。","恢复","挺像的，就是","操作值","操作栈","操作，如果为","操作，正确的做法是把","改成","教程进行，不会出什么差错。","数据库中，两个线程的备份操作必须交叉进行。","数据库中，另外","文件","方法差不多，都是会抛出inperruptedexception异常，感觉","方法已经返回，阻塞方法执行完毕","方法或代码块中调用。如果调用它们时没有持有适当锁，会抛出illegalmonitorstateexception异常（是个","方法经过指定休眠时间结束","方法结束后就进入了销毁阶段，线程任务执行完毕。","方法，在方法返回前","方法，它会进入","时，没有处于阻塞状态的线程，那么这个通知命令会被忽略，不会有什么影响。","有两个remove线程","机制可以实现一种比较节约","毫秒内是否有线程对其进行了唤醒，如果超过这个时间则自动唤醒","添加了10个元素","添加了1个元素","添加了2个元素","添加了3个元素","添加了4个元素","添加了5个元素","添加了6个元素","添加了7个元素","添加了8个元素","添加了9个元素","状态。修改如下：","状态可相互切换，线程进入","状态和","状态，即假死状态。","状态，在","状态，程序陷入假死状态。","状态，表示阻塞状态，线程进入","生产者/消费者模式实现","生产者/消费者模式实现1.6.","生产者/消费者模式是等待通知最经典的案例。有如下几种模式：","生产者和消费者操作的是一个","生产者和消费者操作的是一个变量，比如一个字符串。","的","的方式解决问题。","的时候不用将数据进行","的线程一直在","的线程是如何被其对应的","的线程调用了","的长度的","的长度，如果不为","示例：","种删除元素。","种情况：","程序调用了","等待","等待/通知机制涉及的主要方法","等待/通知机制涉及的主要方法1.2.2.","等待/通知机制的实现","等待/通知机制的实现1.2.1.","等待的条件发生了变化的问题，这时我们要采用将判断当前","等待通知机制","等待通知机制1.1.","管道流（pipestream）是一种很特殊的流，可以用于在不同的线程之间传递数据，一个线程将数据","类的方法，因为","线程在等待某个通知","线程在等待的通知发起了通知给它","线程成功地获得了锁","线程状态转换示意图如下：","线程的","线程试图获得一个锁，但该锁正被其他线程持有","线程调用的阻塞","线程都被唤醒向下执行，然而只添加了一个元素，两个线程却执行了两次","线程都进入了，并进入了","结束之后，它们会再判断一次","解决方法：把通知线程启动的notify()换成notifyall()，这样异类的线程一定会被启动。","调度。","调度；反之，一个线程被","调用","调用阻塞式","资源后，他就会变成","资源的线程间的通信机制。","运行结果：","这个时候生产出来就会被消费，set","这里发出了通知","这里用一个厨师和服务员之间在菜品传递台上传递菜品的例子来说明什么是等待/通知机制。","通知","通知到的呢？","通知过早","通知过早1.4.2.","通过管道进行线程间的通信","通过管道进行线程间的通信1.6.1.","通过这个变量进行标记，实现交替打印，要用volatile保证其可见性","都实现了wait()和notify()方法，因为这些方法是通过synchron","问题出现的原因：我们这里通过notify()来通知其他线程启动，每次只启动一个线程，不过我们没法控制启动的是同类线程还是异类线程，也就是说，我们有一定概率一直处于生产者唤醒生产者，消费者唤醒消费者的状态，这样所有线程将一直处在"],"Ch3-线程间通信/02-join方法.html":["(int","(int)","(interruptedexcept","(math.random()","(milli","*","0;","1.","1.1.","1.2.","1.3.","1.4.","10000);","3.2.","3783","=","@overrid","args)","base","catch","ch3.join.interrupt.threadb.run(threadb.java:9)","class","e)","e.printstacktrace();","extend","final","int","interruptedexcept","java.lang.interruptedexcept","java.lang.object.wait(n","java.lang.thread.join(thread.java:1252)","java.lang.thread.join(thread.java:1326)","join","join()","join()后面的代码提前运行的意外","join()后面的代码提前运行的意外1.","join()方法的功能","join()方法的功能1.2.","join(0)，所以我们只看","join(long","join(long)","join(long)和sleep(long)的区别","join(long)和sleep(long)的区别1.4.","join方法","join方法1.1.","join过程中线程被中断","join过程中线程被中断1.3.","long","main","main(string[]","method)","millis)","mythread","mythread();","mythread.java","mythread.join();","mythread.start();","mythread执行完了，我再执行一下","new","now","privat","public","run","run()","run.java","secondvalu","sleep(long)","static","super();","synchron","system.currenttimemillis();","system.out.println(\"mythread执行完了，我再执行一下\");","system.out.println(\"threadb被中断，抛了个异常被catch了\");","system.out.println(\"threadb运行结束了\");","system.out.println(secondvalue);","this.threadb","thread","thread.sleep(500);","thread.sleep(secondvalue);","threada","threada();","threada.java","threada.join();","threada.start();","threada，并等待","threada：一个执行任务的线程。","threadb","threadb();","threadb)","threadb.interrupt();","threadb.java","threadb.start();","threadb;","threadb被中断，抛了个异常被catch了","threadb：负责创建并启动","threadc","threadc(threadb","threadc(threadb);","threadc.java","threadc.start();","threadc：负责中断","throw","tri","void","wait","wait(long)","{","}","一定要等待够足够的毫秒数。","不会再计时了，而是往下执行，而","不会释放锁，原因是","中的","代码如下：","会继续执行。","会释放锁，sleep(long)","使用","又有什么区别呢？","和","块会捕捉到异常，threadb","如下代码的作用是：run","如果等待的方法提前结束，join(long)","我们通过如下程序来验证一下：","执行完毕后继续执行。","文件","方法中线程被中断的效果","方法中线程被中断的效果。因为","方法内部就是用","方法内部是用","方法实现的。","模块：","的内部实现原理就是","的内部实现原理：","的实现原理就好。","线程","线程的","线程的执行，在它执行完之后再执行一下再结束。","线程要等待","被异常停止后，threada和、","运行结果：","还有一个带参数的方法：join(long)，这个方法是等待传入的参数的毫秒数，如果计时过程中等待的方法执行完了，就接着往下执行，如果计时结束等待的方法还没有执行完，就不再继续等待，而是往下执行。","那么","预计结果：threadb"],"Ch3-线程间通信/03-ThreadLocal类.html":["!=","\"","\"我是新的默认初始值，有了我以后，第一次调用get()就不会返回null了\";","(e","(map","(t)e.value;","+","//","1.","1.1.","1.2.","1.3.","1.4.","3","3.3.","=","@overrid","@suppresswarnings(\"unchecked\")","childvalue(object","class","createmap(t,","date().gettime();","e","entri","entry(threadloc","extend","get()","get()：获取当前线程的值。","getmap(t);","inheritablethreadloc","inheritablethreadlocalext","inheritablethreadlocal类","inheritablethreadlocal类1.","initialvalue()","initialvalue();","k,","key","map","map.getentry(this);","map.set(this,","new","null)","null;","object","parentvalu","parentvalue)","privat","protect","public","remove()：移除当前线程的值。","result","result;","return","set()：设置当前线程的值。","setinitialvalue()","setinitialvalue();","static","super(k);","t","thread","thread.currentthread();","threadloc","threadlocal.threadlocalmap","threadlocal.threadlocalmap，然后根据要获得的这个","threadlocalext","threadlocalmap","threadlocalmap.entri","threadlocalmap：","threadlocal的作用","threadlocal的作用1.2.","threadlocal的原理","threadlocal的原理1.3.","threadlocal类","threadlocal类1.1.","threadlocal，我们需要写一个","v)","v;","valu","value);","value;","{","{...}","}","个比较重要的方法：","中存的值，不过如果在子线程取得值的同时，父线程修改了","中寻找值并返回。","中的","中的值，那么子线程只能取得旧值。","也就是说是用","会返回initial的结果","使用","内部有一个","变量，这样这个类中的每个对象都会共享这个变量，现在我们想要对这个共享进行划分，划分的原则是：同一个线程共享一个变量，不同的线程共享另一个变量。想要实现这样的功能要用到：threadloc","可以在子线程中取得父线程在","同时子线程还可以通过覆盖","在","存在每个线程中的，当一个线程它要获得","对象中存储的值时，它会调用这个","对象作为","对象去","对象的","想要实现带初始值的","我们可以在类中定义","我是在子线程后加的！\";","所以想要一个带初始值的","方法会去这个线程中取得","方法可以发现：当第一次使用","方法和","方法对父线程设置的值进行修改：","方法时，最终得到的值是","方法，get","方法，使其返回新的初始值即可。","方法，我们需要写一个","是这样的：","有如下","来自initialvalue()方法","的","的内部类","的子类，然后覆盖它的","的新类，通过观察","的返回值。","第一次使用时map为nul","类。","类内部有一个","类型的成员变量。","类的","解决第一次使用get()方法返回null问题","解决第一次使用get()方法返回null问题1.4.","返回为null，所以初始值为nul","这个"],"Ch4-Lock的使用/":["4.","lock的使用"],"Ch4-Lock的使用/01-ReentrantLock类.html":["!=","\"","\",","\"没获得锁\");","\"获得锁\");","&","(!hasvalue)","(except","(false)。","(hasvalue)","(int","(interruptedexcept","(lock.trylock())","(nextprint","(true)","(true)，还是非公平锁","+","...","//","0;","1)","1.","1.1.","1.1.1.","1.1.2.","1.2.","1.2.1.","1.2.2.","1.2.3.","1.3.","1.4.","1.4.1.","1.4.2.","1.4.3.","1.4.4.","1.4.5.","1.5","1.5.","1.加锁","1;","2)","2.","2.1.","2.2.","2.等待","2.通知","2;","3)","3.放锁","3;","4.1.","=",">","@overrid","acquireinterruptibly(abstractqueuedsynchronizer.java:1220)","args)","await","await()","await()方法的增强版","await()方法的增强版1.5.","await(long","await_a()","await_a,","await_b()","await_b,","awaituninterruptibly()","awaituninterruptibly()：","awaituninterruptibly()：不能被中断的","awaituntil(d","await中interrupt线程，抛异常！","a线程接到main线程发送通知再次启动","a获得锁","b","begin","begin\");","begin,","boolean","b没获得锁","c","catch","ch4.lockinterrupt.myservice.waitmethod(myservice.java:10)","ch4.lockinterrupt.run$1.run(run.java:9)","class","condit","condition)：查询是否有线程在等待与此锁有关的","condition)：返回等待与此锁有关的的给定","condition.await();","condition.signal();","condition.signalall();","conditiona","conditiona.await();","conditiona.signalall();","conditiona，conditionb，conditionc","conditionb","conditionb.await();","conditionb.signalall();","conditionc","conditionc.await();","conditionc.signalall();","condition中的方法","condition实现生产者/消费者模式","condition实现生产者/消费者模式1.3.","condition类实现等待/通知","condition类实现等待/通知1.2.1.","condition类的方法介绍","condition类的方法介绍1.2.2.","condition：","deadlin","deadline)：等待到","e)","e.printstacktrace();","end","end\");","end,","extend","fair)","false;","final","finally块中放锁","get()","getholdcount()：查询当前线程线程保持此锁定的个数，就是调用","getqueuelength()：返回正在争夺此锁的估计数。","getwaitqueuelength(condit","hasqueuedthread(thread","hasqueuedthreads()：查询是否有线程在等待获取此锁。","hasvalu","haswaiters(condit","has类","has类1.4.3.","int","interrupted()","interruptedexcept","isfair","isfair()：判断此锁是不是公平锁。","isheldbycurrentthread()：查询当前线程是否保持此锁。","islocked()：查询此锁是否由任意线程保持。","java.lang.interruptedexcept","java.lang.thread.run(thread.java:748)","java.util.concurrent.locks.abstractqueuedsynchronizer.","java.util.concurrent.locks.reentrantlock.lockinterruptibly(reentrantlock.java:335)","lock","lock()","lock()方法的各种增强版方法（重要）","lock()方法的各种增强版方法（重要）1.4.5.","lock.lock();","lock.lock()，这相当于只能在","lock.newcondition();","lock.readlock().lock();","lock.readlock().unlock();","lock.unlock();","lock.writelock().lock();","lock.writelock().unlock();","lockinterruptibly()","lockinterruptibly()，如果拿到这个锁的线程已经被打上了中断标记，就会直接抛出","lockinterruptibly()：","lockinterruptibly()：如果当前线程未被中断，获取锁定，如果当前线程已有中断标记，则抛出异常。","lock的方法们","lock的方法们1.4.1.","main","main(string[]","main线程发送a线程再次启动的通知","method()","methoda()","methodb()","myservic","myservice();","myservice.java","new","nextprint","note","note0","note1:","note2:","note3:","note4:","notea1","notea2","notea3","noteb1","noteb2","noteb3","notec1","notec2","notec3","notifuall()","notify()","privat","public","reentrantlock","reentrantlock();","reentrantlock()中","reentrantlock(boolean","reentrantlock类","reentrantlock类1.1.","reentrantlock类的使用简介","reentrantlock类的使用简介1.1.1.","reentrantreadwritelock","reentrantreadwritelock();","reentrantreadwritelock操作方法","reentrantreadwritelock操作方法1.","reentrantreadwritelock的操作特点","reentrantreadwritelock的操作特点2.2.","reentrantreadwritelock类","reentrantreadwritelock类2.1.","run","run()","run.java","runnabl","runnable()","servic","service)","service.await_a();","service.await_b();","service.get();","service.set();","service.signalall_a();","service.testmethod();","service.waitmethod();","service;","set","set()","signal","signal()","signalal","signalall()","signalall_a()","signalall_a,","signalall_b()","static","super();","synchron","system.currenttimemillis()","system.currenttimemillis());","system.out.println(\"begin","system.out.println(\"end","system.out.println(\"get\");","system.out.println(\"lock","system.out.println(\"main","system.out.println(\"method","system.out.println(\"set\");","system.out.println(\"signalall_a,","system.out.println(\"signalall_b,","system.out.println(\"threada\");","system.out.println(\"threadb\");","system.out.println(\"threadc\");","system.out.println(\"wait","system.out.println(thread.currentthread().getname()","testmethod()","this.servic","this.setname(\"threada\");","this.setname(\"threadb\");","thread","thread()","thread(runnable);","thread)：查询","thread.currentthread().getname()","thread.currentthread().getname());","thread.interrupt();","thread.sleep(3000);","thread.sleep(500);","thread.sleep(5000);","thread.start();","thread[5];","thread[]","threada","threada(myservic","threada(service).start();","threada.java","threada.setname(\"a\");","threada.start();","threadb","threadb(myservic","threadb(service).start();","threadb.interrupt();","threadb.java","threadb.setname(\"b\");","threadb.start();","threadc","threadname=\"","threadname=main","threadname=threada","threadname=threadb","thread：threada，threadb，threadc，使三个线程按照","throw","time","time)","time,","time=\"","time=1533963611003,","time=1533963611014,","time=1533963614014,","timeout,","timeunit","tri","true;","trylock()时，lock被a持有，b就无法获得锁了","trylock()：","trylock()：调用时如果锁并没有被其他线程保持，才获取该锁。","trylock(long","try块中加锁","unit)","unit)：在给定的时间中，锁也没有被其他线程保持，才获取该锁。就是说我想拿这个锁，这个锁现在也没人拿，不过我也不拿，我要等一会，如果等够了时间锁还没人拿，我在把锁拿走。","void","volatil","wait","wait()","wait(long","waitmethod()","{","{}","}","};","一个简单的使用示例","一个简单的使用示例1.1.2.","一对一交替打印：","中","中新增加的。我们知道可以使用","中的线程被中断了就立即会抛异常，然后线程就真的断了，用","中，从而实现有选择地进行线程通知，这样可以更灵活的调度线程。","互斥操作：写写，读写，写读","仍然好好运行着呢，接下来我们把","代码如下：","代码如下：线程调用这两个方法都是同步的。","作用","使用","使用condition实现线程的顺序执行","使用condition实现线程的顺序执行2.","例如：文件","假设有","公平锁与非公平锁","公平锁与非公平锁1.4.","公平锁：线程获取锁的顺序按照线程加锁的顺序分配，即先进先出(fifo)。","共享操作：读读","关键字实现线程间的互斥，使用","前唤醒它，就提前唤醒。","前必须先","只输出一行就永远卡住了，即使在await中，线程也不会被interrupt中断掉","可以发现","可以发现，b","可以发现，b仍然好好运行着呢","可以选择创建公平锁","和","型参数","处的condition.await();替换成condition.awaituninterruptibly();，得到如下结果：","处的lock.lock();替换成lock.lockinterruptibly();，可以得到如下运行结果：","处，是方法的关键)","多个condition实现部分线程通知","多个condition实现部分线程通知1.2.3.","如何创建公平锁与非公平锁：","实例，线程对象可以注册在指定的","实现交替打印","对应object中的方法","对象的一个最大的好处就是我们可以实现多路通知功能了，即我们可以创建多个","对象的方法。","异常。","异常，否则就算是打上了标记，不自己在程序中用","把","文件","方法一样，也就是说在调用","方法可以帮我们省去判断中断标记抛异常这些步骤。","方法或同步代码块中调用","方法，正常在","时，如果没有持有适当的锁，就会抛出","是用来指定","有关lock的属性类","有关lock的属性类1.4.4.","有带","条件。","来判断并抛异常，线程也是不会停的，只是有个标记而已，而","标准使用示例","标准使用示例1.2.","比较标准的使用方法是：","没有线程通知b线程结束，所以程序不会停止，而是一直处于运行状态，因为b线程还在await中","注意：使用","状态，使用","的单位","的时间，如果没人唤醒它就自己唤醒，如果有线程在","的构造器：","的次数。","的线程的估计数。","的顺序执行：(注意代码中的","示例：两个线程处于","等待","等待一定时间，timeunit","等待的线程是无视中断操作的，就是说不能通过中断然这个等待中的线程抛异常停止。","简单使用示例：","类也可以达到相同的效果，并且具有嗅探锁定，多路分支通知等扩展功能，使用起来也更为灵活。","类：可重入锁，jdk","线程是否在等待获取此锁。","获得写锁","获得读锁","被中断了。","计数类","计数类1.4.2.","运行结构：","运行结果：","这些对象都是lock","通知一个再启动，不通知另一个，看程序是否会结束，即看看线程能不能分类通知是否启动。","通知一个等待的线程执行","通知所有等待的线程执行","通过代码演示如下：","释放写锁","释放读锁","非公平锁：线程随机获得锁，是一种锁抢占机制，不过可能会造成某些线程一直拿不到锁。"],"Ch5-定时器Timer/":["5.","定时器timer"],"Ch5-定时器Timer/01-定时器Timer.html":["(见ch5.fixrate.scheduletest.java)*","+","//","1.","1.1.","1.2.","1.3.","1.4.","1.5.","1.6.","1.7.","10);","5.1.","=","@overrid","calendar","calendar.getinstance();","calendarref","calendarref.get(calendar.second)","calendarref.gettime();","calendarref.set(calendar.second,","cancel()","class","date","delay","delay)","delay,","delay设置任务开始执行的时间","delay设置任务开始执行的时间1.5.","extend","firsttim","firsttime)","firsttime,","firsttime设置任务开始执行的时间","firsttime设置任务开始执行的时间1.4.","long","mytask","mytask(num);","new","period)","public","queue","run()","rundat","rundate);","runnabl","schedul","scheduleatfixedrate()和schedule()的区别","scheduleatfixedrate()和schedule()的区别1.","system.out.println(\"执行任务\");","task","task,","timer","timer(true);","timer(true)。","timer.schedule(task,","timertask","void","{","}","一个标准的timer使用方法实例","一个标准的timer使用方法实例1.3.","不过","什么是追赶执行性：","会发现这个任务过期了，并立刻执行它，不过这会导致这个任务执行的时间和设定的不一样。","会被按照调用","区别：","即从当前时间开始，等待","取消任务执行","取消任务执行1.7.","可以用一个","周期执行：schedule(timertask","在","如果","定时器timer","定时器timer1.1.","对象启动它。","对象，通过","我们先实现一个","执行任务时发现给定的时间已经过期了，会立即执行相和歌任务。","接口的抽象类，我们要新建","方法中编写我们要计划执行的任务，然后新建","方法没有争抢到","方法：将任务队列中的全部任务清空。","方法：将自身从任务队列中清除。","无追赶执行性：schedule()","时执行任务。","时间，然后执行任务。","是一个实现了","普通执行：schedule(timertask","有如下两类执行任务的方式。","有时会因为","有追赶执行性：scheduleatfixedrate()","根据当前时间获取date类的方法：","注意事项","注意事项1.6.","特别耗时导致在它后面执行的任务过期了，那么到它后面的任务执行时，这个","用date","用long","的","的子类并在","的执行，这些","的顺序执行，如果中间有一个","类中的","类的","类的作用就是设置计划任务，不过它是不能单独使用的，它只负责按照要求启动任务，我们需要把要执行的任务提供给它，负责提供任务的就是","类的子类：","类，timertask","要创建成守护线程：timer","设置创建守护线程","设置多个","追赶执行性体现在任务给定的时间过期了的时候，有追赶执行性的任务会把从给定的时间到当前时间中漏执行的任务的全都补执行完成，再开始按周期执行，而无追赶执行性的任务只补执行一次的，就开始按周期执行。","锁而取消不成功。(见ch5.cancel.timercanceltest.java)","需要用到的类和一些方法技术","需要用到的类和一些方法技术1.2."],"Ch6-单例模式与多线程/":["6.","单例模式与多线程"],"Ch6-单例模式与多线程/01-单例模式与多线程.html":["(classnotfoundexcept","(filenotfoundexcept","(interruptedexcept","(ioexcept","(singleton","(singleton)","(singleton.class)","*","*/","/**","//","1.","1.1.","1.1.1.","1.1.2.","1.2.","1.3.","1.3.1.","1.3.2.","1.3.3.","1.3.4.","1.4.","312714112","6.1.","668386784","=","==","args)","catch","class","dcl","dcl双检查锁机制","dcl双检查锁机制1.3.2.","e)","e.printstacktrace();","enum","enumsingleton","enumsingleton();","enum数据类型","enum数据类型1.4.","fi","file(\"multithread/src/ch6/staticclass/singletonfile.txt\"));","fileinputstream","fileinputstream(","fileoutputstream","fileoutputstream(","fis.close();","fo","fos.close();","getinst","getinstance()","main(string[]","myenumsingleton","myenumsingleton()","myenumsingleton.singletonfactory.getinstance();","new","null)","object","objectinputstream","objectinputstream(fis);","objectoutputstream","objectoutputstream(fos);","objectstreamexcept","oi","ois.close();","ois.readobject();","oo","oos.close();","oos.writeobject(singleton);","privat","protect","public","readresolve()","return","saveandread","singleton","singleton()","singleton();","singleton.getinstance();","singleton;","singletonfactory;","singletonhandl","singletonhandle.singleton;","static","static代码块","static代码块1.3.4.","static内部类（不适用于序列化）","static内部类（不适用于序列化）1.3.3.","synchron","system.out.println(\"调用了readresolve方法\");","system.out.println(singleton.hashcode());","thread.sleep(1000);","thread.sleep(10000);","throw","tri","void","{","{...}","}","不过为了保证“职责单一原则”，我们要把这个enum用class包装一下","不过可能有多个线程都进入了上一个if块，作用这里要再加一层判断","不过当我们在一个程序中对单例对象进行了序列化和反序列化操（必须是一个程序中，如果一个程序进行序列化，另一个程序进行反序列化是肯定不一样的），序列化前后的单例对象并不是同一个对象一个。","之后在调用getinstance就直接返回singleton就可以了","之后通过一个","使用饿汉模式，倒是没有线程安全问题，不够要是我们从头到尾都用不到","内部类实现的单例对象，我们进行如下操作：","单例对象的时候有线程安全问题，当我们","单例模式与多线程","单例模式与多线程1.1.","单例模式的序列化和反序列化","单例模式的序列化和反序列化1.","单例模式：就是一个类，它只可以创建出来一个对象，它不允许我们自己创建对象，所以我们首先要把它的构造函数私有化：","单线程单例模式的实现","单线程单例模式的实现1.1.1.","在调用getinstance方法前先不创建对象","在静态代码块中实例化对象，感觉和饿汉模式没啥区别","多个进入if代码块的线程都会运行这一行，就产生了多个singleton对象","多线程单例模式的实现","多线程单例模式的实现1.3.1.","如果我们在这里加一个延时，那么线程一进入到if代码块时，","完了单例对象之后就不涉及线程安全问题了，这时候多个线程来取对象是不会发生问题的，可是这个时候","对于通过","序列化前后对象的hashcode不变","序列化前后对象的hashcode改变了","延迟加载：懒汉模式","延迟加载：懒汉模式1.2.","当jvm从内存中反序列化地组装一个新对象时，会自动调用这个方法返回我们的指定对象","得到运行结果如下：","想要解决多线程不能保证单例的问题，使用同步技术肯定时第一个想到的，可是如果先这样给整个","懒汉模式不能保证单例的主要原因在这里：","懒汉模式与线程安全问题","懒汉模式与线程安全问题1.3.","成员变量：","把单例对象放在静态内部类中","把真正的单例对象放在枚举类中","方法依旧是同步方法，同一时刻到来的线程仍需要排队执行，所以我们通过","方法来获取这个唯一的实例化对象。","方法都加上锁：","方法，我们创建的单例对象的资源就浪费掉了，所以为了节省资源我们还是想要使用懒汉模式的，不过在多线程的情况下，懒汉模式是不能保证单例的。","机制，只给一个很小的部分设计成同步的，来解决这个问题：","枚举中只有一个类型","然后添加一个存储这个对象本身的","直接在调用getinstance方法前就把这个对象创建出来","真正需要同步执行就是这句！","立即加载：饿汉模式","立即加载：饿汉模式1.1.2.","第一次调用getinstance时，singleton为空，这时new新对象","类中加入这样一个方法：","要想保证是一个对象，我们要在","调用了readresolve方法","运行结果：","这时singleton依旧为null，这个时候线程二也可以进入if代码块，","这样就会有多个线程进入if代码块","这样程序的运行效率会大打折扣，因为我们只有在","通过只有一个类型的枚举类实现单例"],"Ch7-拾遗增补/":["7.","拾遗增补"],"Ch7-拾遗增补/01-线程的状态.html":["//","1.","7.1.","blocked,","enum","new,","public","runnable,","state","terminated;","thread","thread#getstate()","timed_waiting,","waiting,","{","}","一个线程的状态可以通过","下面是线程状态在一些线程相关的方法调用后的状态示意图：","中（thread.state）：","无限期的等待另一个线程的操作，如调用了wait(),join()后","有限期的等待另一个线程的操作，如sleep(time),wait(time),join(time)后","来获得。","正在等待某个监视器锁","类中的一个内部枚举类","线程实例化后还未执行start()方法","线程的状态","线程的状态1.","线程的状态的表示方法放在","线程被销毁时的状态","线程进入运行状态，可能真的在执行，也可能在抢cpu的时间片"],"Ch7-拾遗增补/02-线程组.html":["\"newgroup\");","\"runnablea\");","\"runnableb\");","\"threada\");","\"threadb\");","(interruptedexcept","(见","*","*/","/**","//","1.","1.1.","1.2.","1.3.","7.2.","=","@overrid","args)","catch","ch7.enumerate.run.java)","ch7.interrupt.run.java)","ch7.threadgroup;","class","e)","e.printstacktrace();","false);","group","listgroupfals","listgrouptru","main(string[]","maingroup.enumerate(listgroupfalse,","maingroup.enumerate(listgrouptrue,","main的父线程组名称：system","new","newgroup的父线程组名称：main","packag","public","run","run()","runnabl","runnable()","runnablea","runnablea,","runnableb","runnableb,","static","system.out.print(\"main的父线程组名称：\");","system.out.print(\"newgroup的父线程组名称：\");","system.out.print(\"线程组中活动线程的数量：\");","system.out.print(\"线程组的名称：\");","system.out.println(group.getparent().getname());","system.out.println(thread.currentthread().getname());","system.out.println(thread.currentthread().getthreadgroup().activecount());","system.out.println(thread.currentthread().getthreadgroup().getname());","system.out.println(thread.currentthread().getthreadgroup().getparent().getname());","thread","thread(group,","thread(runnable,","thread.sleep(3000);","threada","threada.start();","threadb","threadb.start();","threadgroup","threadgroup#interrupt()","threadgroup(\"newgroup\");","threadgroup(thread.currentthread().getthreadgroup(),","threadgroup[]","threadgroup[maingroup.activegroupcount()];","tri","true);","void","{","}","};","下面通过一个实例来说明","中的方法：","准备工作","即使我们这么写：","因为实例化一个线程组时，如果不指定所属的线程组，就自动归到当前线程对象所属的线程组","将线程归属到线程组中，调用","批量停止组内线程","批量停止组内线程1.3.","操作线程组的常用方法","操作线程组的常用方法1.2.","效果和下一句也是一样的，","新建线程组newgroup并把它加入main线程组，新建线程并加入newgroup","方法，可将组内正在运行的线程批量停止。","注意：实例化一个线程组时，如果不指定所属的线程组，就自动归到当前线程对象所属的线程组。","演示线程组的各种操作方法","线程组","线程组1.1.","线程组中活动线程的数量：2","线程组中活动线程的数量：4","线程组的作用：批量管理线程或者线程组，线程组中既可以有线程对象也可以有线程组对象。","线程组的名称：main","获取线程组中活动线程的数量","获取线程组中线程组的数量","获取线程组的父线程组的名称","获取线组名称","要点方法：添加线程组或线程到线程组中","运行结果：","递归与非递归取得组内对象","递归与非递归取得组内对象1.","递归的获取组内对象：","非递归的获取组内对象（即只取一层的）："],"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":["\"","\"2000","(!newdatestring.equals(datestring))","(int","(parseexcept","(simpledateformat","+","//","01","01\",","02\",","03\",","04\",","05\",","06\",","07\",","08\",","09\",","0;","1.","10","10\"};","10个线程用的都是这个simpledateformat对象","7.3.","=","==","@overrid","args)","catch","ch7.simpledateformat.formaterror;","ch7.simpledateformat.resolveerror;","class","date","datepattern)","dateref","datestr","datestring)","datestring;","datetool","datetools.getsimpledateformat(\"yyyi","dd\").","dd\").parse(datestring);","dd\");","e)","e.printstacktrace();","extend","format(dateref).tostring();","getsimpledateformat(str","main(string[]","mm","mythread","mythread#run()","mythread(simpledateformat","mythread(str","mythread[10];","mythread[]","new","newdatestr","newdatestring);","null)","packag","privat","public","return","run","run()","simpledataformat类的非线程安全处理","simpledataformat类的非线程安全处理1.","simpledateformat","simpledateformat(\"yyyi","simpledateformat(datepattern);","simpledateformat,","simpledateformat.format(dateref).tostring();","simpledateformat.parse(datestring);","simpledateformat;","simpledateformat：","static","string","string[]","super();","system.out.println(\"threadname=\"","this.datestr","this.simpledateformat","thread","thread.currentthread().getname()","threadloc","threadlocal<>();","threadlocal，我们通过一个","tl","tl.get();","tl.set(simpledateformat);","tri","void","{","{\"2000","}","个线程用来转换日期，不过，这","个线程用的是一个","中通过","供给多个线程使用的话，极易出现日期转换错误的情况。","先把字符串日期转换成date","再把date日期转换成字符串","如下面这段代码，我们启动了","对象：","是线程不安全的，想要保证线程安全，我们必须给每一个线程准备一个","检查转换回来的字符串和原字符串是否相等，如果有转换错的就打印出来","然后在","类主要负责日期转换与格式化，但是它是非线程安全的，如果只用一个","类来解决这个问题：","类，这就用到了","获取","转换成了","转换错误，把","这个错误出现的主要是因为","通过datetools获取simpledateformat"],"Ch7-拾遗增补/04-线程中的异常处理.html":["\"","+","//","1.","1.1.","1.2.","7.4.","=","@overrid","args)","catch","ch7.simpledateformat.controller;","ch7.simpledateformat.stopgroup;","class","defaultuncaughtexceptionhandletest","e)","e);","e.printstacktrace();","errorthread","errorthread();","errorthread.setdefaultuncaughtexceptionhandler(new","extend","main(string[]","mythreadgroup","mythreadgroup(str","name)","new","null;","packag","public","run()","setdefaultuncaughtexceptionhandle()：对一个线程类的所有对象设置异常处理器。","setdefaultuncaughtexceptionhandle：","setuncaughtexceptionhandle()：给指定线程对象设置异常处理器。","setuncaughtexceptionhandle：","static","string","super(name);","super.uncaughtexception(t,","system.out.println(\"线程","system.out.println(username.hashcode());","t,","t.getname()","this.interrupt();","thread","thread.uncaughtexceptionhandler()","thread1","thread1.setuncaughtexceptionhandler(new","thread1.start();","thread2","thread2.start();","threadgroup","throwabl","uncaughtexception(thread","uncaughtexceptionhandletest","usernam","void","{","}","});","一个会抛出异常的线程类：","中的","出现了异常\");","因为是对一个线程类的所有对象设置异常处理器，所以是线程类在调用","因为是给指定线程对象设置异常处理器，所以是线程对象在调用","在重写的uncaughtexception方法中处理组内线程的中断操作，这样组内有一个线程跑出来异常，","处理线程中的异常","处理线程中的异常1.2.","处理线程组中的异常","处理线程组中的异常1.","应用：实现一个线程组中的一个线程出现了异常后组内线程全部停止","方法。","方法中不能有","方法：","方法：新写一个","注意：使用这种方法，组内的每个线程对象中的","测试","的子类，覆盖","线程中的异常处理","线程中的异常处理1.1.","该线程组会调用this.interrupt()，就中断了自己组内的所有线程","语句，如果有则不会执行"]},"length":21},"tokenStore":{"root":{"0":{"1":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.03676470588235294}},"\"":{"docs":{},",":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}},"2":{"docs":{},"\"":{"docs":{},",":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}},"3":{"docs":{},"\"":{"docs":{},",":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}},"4":{"docs":{},"\"":{"docs":{},",":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}},"5":{"docs":{},"\"":{"docs":{},",":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}},"6":{"docs":{},"\"":{"docs":{},",":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}},"7":{"docs":{},"\"":{"docs":{},",":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}},"8":{"docs":{},"\"":{"docs":{},",":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}},"9":{"docs":{},"\"":{"docs":{},",":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0035671819262782403},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.006134969325153374},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.007194244604316547},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0021629416005767843},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}},"\"":{"docs":{},":":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"，":{"docs":{},"此":{"docs":{},"时":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"则":{"docs":{},"再":{"docs":{},"次":{"docs":{},"进":{"docs":{},"入":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}},"执":{"docs":{},"行":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}},")":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}},",":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}}},"1":{"0":{"0":{"0":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}},"docs":{}},"docs":{}},"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.007352941176470588}},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}},")":{"docs":{},";":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}},"\"":{"docs":{},"}":{"docs":{},";":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"用":{"docs":{},"的":{"docs":{},"都":{"docs":{},"是":{"docs":{},"这":{"docs":{},"个":{"docs":{},"s":{"docs":{},"i":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"对":{"docs":{},"象":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"3":{"4":{"2":{"8":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}},"docs":{}},"docs":{}},"docs":{}},"4":{"8":{"5":{"2":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}},"docs":{}},"docs":{}},"docs":{}},"6":{"8":{"6":{"8":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}},"docs":{}},"docs":{}},"docs":{}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.005945303210463734},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}},".":{"1":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":5}},".":{"1":{"docs":{},".":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}},"2":{"docs":{},".":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948},"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}},"2":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"2":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"3":{"docs":{},".":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948},"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}},"3":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}},"2":{"docs":{},".":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}},"3":{"docs":{},".":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}},"4":{"docs":{},".":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948},"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}},"4":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"2":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"3":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"4":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"5":{"docs":{},".":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948},"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}},"5":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}},".":{"1":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"2":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"3":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948},"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}},"6":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"2":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}},"7":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"2":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}},"8":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"docs":{"./":{"ref":"./","tf":0.25},"Ch1-Java多线程技能/":{"ref":"Ch1-Java多线程技能/","tf":5},"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948},"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223},"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":0.02857142857142857},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}},"加":{"docs":{},"锁":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}}}},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}},"~":{"1":{"0":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"不":{"docs":{},"在":{"docs":{},"这":{"docs":{},"个":{"docs":{},"范":{"docs":{},"围":{"docs":{},"会":{"docs":{},"抛":{"docs":{},"出":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}},"docs":{}},"docs":{}},"\"":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}},":":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"，":{"docs":{},"这":{"docs":{},"个":{"docs":{},"操":{"docs":{},"作":{"docs":{},"虽":{"docs":{},"然":{"docs":{},"只":{"docs":{},"有":{"docs":{},"一":{"docs":{},"行":{"docs":{},"，":{"docs":{},"不":{"docs":{},"过":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"典":{"docs":{},"型":{"docs":{},"的":{"docs":{},"非":{"docs":{},"原":{"docs":{},"子":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"它":{"docs":{},"的":{"docs":{},"操":{"docs":{},"作":{"docs":{},"步":{"docs":{},"骤":{"docs":{},"分":{"docs":{},"解":{"docs":{},"如":{"docs":{},"下":{"docs":{},"：":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"2":{"6":{"6":{"4":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}},"docs":{}},"docs":{}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}},".":{"1":{"docs":{},".":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":5},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"2":{"docs":{},".":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":5},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{"Ch2-对象及变量的并发访问/":{"ref":"Ch2-对象及变量的并发访问/","tf":5},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}},"等":{"docs":{},"待":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"通":{"docs":{},"知":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"3":{"1":{"2":{"7":{"1":{"4":{"1":{"1":{"2":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.00683371298405467}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"7":{"8":{"3":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}},"docs":{}},"docs":{}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}},"，":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}},".":{"1":{"docs":{},".":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":5}}}},"2":{"docs":{},".":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":5}}}},"3":{"docs":{},".":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":5}}}},"docs":{"Ch3-线程间通信/":{"ref":"Ch3-线程间通信/","tf":5}},"放":{"docs":{},"锁":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}}}},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"4":{"9":{"9":{"9":{"7":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}},"8":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}},"9":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}},"docs":{}},"docs":{}},"docs":{}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}},".":{"1":{"docs":{},".":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":5}}}},"docs":{"Ch4-Lock的使用/":{"ref":"Ch4-Lock的使用/","tf":5}}}},"5":{"0":{"0":{"0":{"0":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}},"docs":{}},"docs":{}},"docs":{}},"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}},")":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}},".":{"1":{"docs":{},".":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":5}}}},"docs":{"Ch5-定时器Timer/":{"ref":"Ch5-定时器Timer/","tf":5}}}},"6":{"6":{"8":{"3":{"8":{"6":{"7":{"8":{"4":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":5}}}},"docs":{"Ch6-单例模式与多线程/":{"ref":"Ch6-单例模式与多线程/","tf":5}}}},"7":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}},".":{"1":{"docs":{},".":{"docs":{"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":5}}}},"2":{"docs":{},".":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":5}}}},"3":{"docs":{},".":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":5}}}},"4":{"docs":{},".":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":5}}}},"docs":{"Ch7-拾遗增补/":{"ref":"Ch7-拾遗增补/","tf":5}}}},"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0035671819262782403},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":10}}}}}}}},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"u":{"docs":{},"p":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.005945303210463734}}}},"e":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0047562425683709865},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0028790786948176585},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.007194244604316547},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.003604902667627974}}}}}}}},"(":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}},")":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}},".":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"(":{"docs":{},"b":{"docs":{},"u":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}}}}}}}}}}}}}}},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},":":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"u":{"docs":{},"p":{"docs":{},"t":{"docs":{},"方":{"docs":{},"法":{"docs":{},"遇":{"docs":{},"到":{"docs":{},"w":{"docs":{},"a":{"docs":{},"i":{"docs":{},"t":{"1":{"docs":{},".":{"4":{"docs":{},".":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"docs":{}}},"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}},"u":{"docs":{},"t":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.017094017094017096}},"a":{"docs":{},"l":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}},"类":{"1":{"docs":{},".":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}},"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.021367521367521368}},";":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}}}}}},"+":{"docs":{},"+":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}},"的":{"docs":{},"非":{"docs":{},"原":{"docs":{},"子":{"docs":{},"性":{"1":{"docs":{},".":{"5":{"docs":{},".":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}},"docs":{}}},"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}},"=":{"1":{"0":{"4":{"4":{"3":{"0":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}}},"1":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}}},"2":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"g":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.006134969325153374},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.007483629560336763}}}}}}}}}},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"1":{"docs":{},".":{"4":{"docs":{},".":{"3":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"docs":{}}},"docs":{}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}}}}}}}}},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{},"f":{"docs":{},"l":{"docs":{},"a":{"docs":{},"g":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.006134969325153374}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.002806361085126286}}}}}}},"f":{"docs":{},"a":{"docs":{},"i":{"docs":{},"r":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}},"(":{"docs":{},")":{"docs":{},"：":{"docs":{},"判":{"docs":{},"断":{"docs":{},"此":{"docs":{},"锁":{"docs":{},"是":{"docs":{},"不":{"docs":{},"是":{"docs":{},"公":{"docs":{},"平":{"docs":{},"锁":{"docs":{},"。":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"d":{"docs":{},"b":{"docs":{},"y":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},"：":{"docs":{},"查":{"docs":{},"询":{"docs":{},"当":{"docs":{},"前":{"docs":{},"线":{"docs":{},"程":{"docs":{},"是":{"docs":{},"否":{"docs":{},"保":{"docs":{},"持":{"docs":{},"此":{"docs":{},"锁":{"docs":{},"。":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},"：":{"docs":{},"查":{"docs":{},"询":{"docs":{},"此":{"docs":{},"锁":{"docs":{},"是":{"docs":{},"否":{"docs":{},"由":{"docs":{},"任":{"docs":{},"意":{"docs":{},"线":{"docs":{},"程":{"docs":{},"保":{"docs":{},"持":{"docs":{},"。":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}},"o":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}}},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}},"m":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"1":{"docs":{},".":{"docs":{"./":{"ref":"./","tf":0.25}}}},"docs":{"./":{"ref":"./","tf":0.25}}}}}}}}}}}}},"多":{"docs":{},"线":{"docs":{},"程":{"docs":{},"编":{"docs":{},"程":{"docs":{"./":{"ref":"./","tf":0.25}}}},"技":{"docs":{},"能":{"docs":{"Ch1-Java多线程技能/":{"ref":"Ch1-Java多线程技能/","tf":5}}}},"概":{"docs":{},"述":{"1":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"docs":{}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":5.001189060642092}}}}}}},".":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}},".":{"docs":{},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{},"(":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},":":{"7":{"4":{"8":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}},"j":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},":":{"1":{"2":{"5":{"2":{"docs":{},")":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}},"docs":{}},"docs":{}},"3":{"2":{"6":{"docs":{},")":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.003838771593090211}}},".":{"docs":{},"w":{"docs":{},"a":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"o":{"docs":{},"f":{"docs":{},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"u":{"docs":{},"p":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{},".":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},":":{"6":{"5":{"3":{"docs":{},")":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},":":{"4":{"9":{"2":{"docs":{},")":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},"d":{"docs":{},"s":{"docs":{},"y":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"u":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{},"y":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},":":{"3":{"3":{"5":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"状":{"docs":{},"态":{"docs":{},"转":{"docs":{},"换":{"docs":{},"说":{"docs":{},"明":{"1":{"docs":{},".":{"2":{"docs":{},".":{"3":{"docs":{},".":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"docs":{}}},"docs":{}}},"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}},"d":{"docs":{},"k":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"p":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}},"v":{"docs":{},"m":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.01079136690647482}},"(":{"0":{"docs":{},")":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"我":{"docs":{},"们":{"docs":{},"只":{"docs":{},"看":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}},"docs":{},")":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}},"后":{"docs":{},"面":{"docs":{},"的":{"docs":{},"代":{"docs":{},"码":{"docs":{},"提":{"docs":{},"前":{"docs":{},"运":{"docs":{},"行":{"docs":{},"的":{"docs":{},"意":{"docs":{},"外":{"1":{"docs":{},".":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}},"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}}}}},"方":{"docs":{},"法":{"docs":{},"的":{"docs":{},"功":{"docs":{},"能":{"1":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}},"docs":{}}},"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}},")":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.017985611510791366}},"和":{"docs":{},"s":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{},"(":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{},"的":{"docs":{},"区":{"docs":{},"别":{"1":{"docs":{},".":{"4":{"docs":{},".":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}},"docs":{}}},"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}}}}}}}}}}}}}},"方":{"docs":{},"法":{"1":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}},"docs":{}}},"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":5.003597122302159}}}},"过":{"docs":{},"程":{"docs":{},"中":{"docs":{},"线":{"docs":{},"程":{"docs":{},"被":{"docs":{},"中":{"docs":{},"断":{"1":{"docs":{},".":{"3":{"docs":{},".":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}},"docs":{}}},"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}}}}},"\"":{"2":{"0":{"0":{"0":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.03308823529411765}}},"docs":{}},"docs":{}},"docs":{}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.013435700575815739},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.029411764705882353},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.021052631578947368}},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0047562425683709865}}}},"a":{"docs":{},"\"":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"a":{"docs":{},"\"":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}},"b":{"docs":{},"b":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}},":":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}},"c":{"docs":{},"\"":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"c":{"docs":{},"\"":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"1":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}},"2":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}},"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}},"a":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}},"b":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}},"非":{"docs":{},"线":{"docs":{},"程":{"docs":{},"安":{"docs":{},"全":{"docs":{},"\"":{"docs":{},"是":{"docs":{},"我":{"docs":{},"们":{"docs":{},"要":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"的":{"docs":{},"一":{"docs":{},"个":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"\"":{"docs":{},"非":{"docs":{},"线":{"docs":{},"程":{"docs":{},"安":{"docs":{},"全":{"docs":{},"\"":{"docs":{},"可":{"docs":{},"能":{"docs":{},"会":{"docs":{},"导":{"docs":{},"致":{"docs":{},"数":{"docs":{},"据":{"docs":{},"的":{"docs":{},"脏":{"docs":{},"读":{"docs":{},"，":{"docs":{},"使":{"docs":{},"得":{"docs":{},"程":{"docs":{},"序":{"docs":{},"运":{"docs":{},"行":{"docs":{},"产":{"docs":{},"生":{"docs":{},"错":{"docs":{},"误":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{},"。":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"问":{"docs":{},"题":{"docs":{},"一":{"docs":{},"般":{"docs":{},"存":{"docs":{},"在":{"docs":{},"于":{"docs":{},"\"":{"docs":{},"实":{"docs":{},"例":{"docs":{},"变":{"docs":{},"量":{"docs":{},"\"":{"docs":{},"中":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"实":{"docs":{},"例":{"docs":{},"变":{"docs":{},"量":{"docs":{},"是":{"docs":{},"有":{"docs":{},"可":{"docs":{},"能":{"docs":{},"被":{"docs":{},"多":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"所":{"docs":{},"共":{"docs":{},"享":{"docs":{},"的":{"docs":{},"，":{"docs":{},"而":{"docs":{},"方":{"docs":{},"法":{"docs":{},"内":{"docs":{},"部":{"docs":{},"的":{"docs":{},"私":{"docs":{},"有":{"docs":{},"变":{"docs":{},"量":{"docs":{},"对":{"docs":{},"于":{"docs":{},"每":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"都":{"docs":{},"是":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"副":{"docs":{},"本":{"docs":{},"的":{"docs":{},"，":{"docs":{},"因":{"docs":{},"此":{"docs":{},"不":{"docs":{},"存":{"docs":{},"在":{"docs":{},"\"":{"docs":{},"非":{"docs":{},"线":{"docs":{},"程":{"docs":{},"安":{"docs":{},"全":{"docs":{},"\"":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"说":{"docs":{},"只":{"docs":{},"有":{"docs":{},"共":{"docs":{},"享":{"docs":{},"资":{"docs":{},"源":{"docs":{},"的":{"docs":{},"读":{"docs":{},"写":{"docs":{},"问":{"docs":{},"题":{"docs":{},"才":{"docs":{},"需":{"docs":{},"要":{"docs":{},"我":{"docs":{},"们":{"docs":{},"通":{"docs":{},"过":{"docs":{},"\"":{"docs":{},"同":{"docs":{},"步":{"docs":{},"化":{"docs":{},"\"":{"docs":{},"去":{"docs":{},"解":{"docs":{},"决":{"docs":{},"线":{"docs":{},"程":{"docs":{},"安":{"docs":{},"全":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"我":{"docs":{},"是":{"docs":{},"新":{"docs":{},"的":{"docs":{},"默":{"docs":{},"认":{"docs":{},"初":{"docs":{},"始":{"docs":{},"值":{"docs":{},"，":{"docs":{},"有":{"docs":{},"了":{"docs":{},"我":{"docs":{},"以":{"docs":{},"后":{"docs":{},"，":{"docs":{},"第":{"docs":{},"一":{"docs":{},"次":{"docs":{},"调":{"docs":{},"用":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},"就":{"docs":{},"不":{"docs":{},"会":{"docs":{},"返":{"docs":{},"回":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"了":{"docs":{},"\"":{"docs":{},";":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.007209805335255948}}},"没":{"docs":{},"获":{"docs":{},"得":{"docs":{},"锁":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}},"获":{"docs":{},"得":{"docs":{},"锁":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{},"n":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}},"b":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.006134969325153374},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.002806361085126286},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0021629416005767843},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"u":{"docs":{},"p":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0035671819262782403},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.003838771593090211},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.005612722170252572},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.01079136690647482},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.007930785868781542},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.004555808656036446},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}}}}},")":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}},"o":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.004555808656036446}}}}}}}}},"s":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"a":{"docs":{},")":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},")":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0028790786948176585}}}}}},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}},"，":{"docs":{},"还":{"docs":{},"是":{"docs":{},"非":{"docs":{},"公":{"docs":{},"平":{"docs":{},"锁":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}},")":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},";":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}},"强":{"docs":{},"烈":{"docs":{},"建":{"docs":{},"议":{"docs":{},"不":{"docs":{},"使":{"docs":{},"用":{"docs":{},"，":{"docs":{},"要":{"docs":{},"作":{"docs":{},"废":{"docs":{},"了":{"docs":{},"，":{"docs":{},"还":{"docs":{},"不":{"docs":{},"安":{"docs":{},"全":{"docs":{},")":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}},"比":{"docs":{},"较":{"docs":{},"温":{"docs":{},"和":{"docs":{},"，":{"docs":{},"不":{"docs":{},"会":{"docs":{},"强":{"docs":{},"行":{"docs":{},"终":{"docs":{},"止":{"docs":{},"一":{"docs":{},"个":{"docs":{},"正":{"docs":{},"在":{"docs":{},"运":{"docs":{},"行":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},")":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.003838771593090211}},"n":{"docs":{},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{},"赋":{"docs":{},"值":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"f":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}},"o":{"docs":{},"c":{"docs":{},"k":{"1":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}}},"2":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}}},"docs":{},")":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.005612722170252572}}},".":{"docs":{},"t":{"docs":{},"r":{"docs":{},"y":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}},"a":{"docs":{},"d":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},".":{"docs":{},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.009111617312072893}},")":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}},".":{"docs":{},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},")":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},".":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"\"":{"docs":{},")":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}}}}},"b":{"docs":{},"\"":{"docs":{},")":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}},")":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}},"x":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"锁":{"docs":{},"对":{"docs":{},"象":{"docs":{},")":{"docs":{},"修":{"docs":{},"饰":{"docs":{},"在":{"docs":{},"代":{"docs":{},"码":{"docs":{},"块":{"docs":{},"前":{"docs":{},"面":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}},"非":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},"对":{"docs":{},"象":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}},"的":{"docs":{},"三":{"docs":{},"个":{"docs":{},"结":{"docs":{},"论":{"1":{"docs":{},".":{"5":{"docs":{},".":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"docs":{}}},"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{},"f":{"docs":{},"l":{"docs":{},"a":{"docs":{},"g":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.006134969325153374}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}},"因":{"docs":{},"为":{"docs":{},"它":{"docs":{},"会":{"docs":{},"将":{"docs":{},"私":{"docs":{},"有":{"docs":{},"内":{"docs":{},"存":{"docs":{},"和":{"docs":{},"公":{"docs":{},"共":{"docs":{},"内":{"docs":{},"存":{"docs":{},"中":{"docs":{},"的":{"docs":{},"数":{"docs":{},"据":{"docs":{},"做":{"docs":{},"同":{"docs":{},"步":{"docs":{},")":{"docs":{},"。":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}}}}}}}}}}}}}}},"!":{"docs":{},"i":{"docs":{},"s":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"a":{"docs":{},")":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"(":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{},")":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.007352941176470588}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}}}}}}}}}}}}}}}}}}}}}}}},"等":{"docs":{},"待":{"docs":{},")":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}},"通":{"docs":{},"知":{"docs":{},")":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},".":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}}}},"p":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.008547008547008548}}}},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}},"e":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{},"。":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"f":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.004555808656036446}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0021629416005767843}}}}}}}}}}},"见":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.0125}},"c":{"docs":{},"h":{"5":{"docs":{},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},".":{"docs":{},"s":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},")":{"docs":{},"*":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.007352941176470588}}}}}}}}}}}}}},"+":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.015457788347205707},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.022072936660268713},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.023792357606344627},"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.03676470588235294},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.021052631578947368}}},".":{"docs":{},".":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.005046863734679163}}}}},"/":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}},"/":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.007134363852556481},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0067178502879078695},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.009202453987730062},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.007483629560336763},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.017094017094017096},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.02595529920692141},"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.03644646924829157},"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":0.17142857142857143},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.06875},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.01838235294117647},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.021052631578947368}}},"*":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.006134969325153374}},"*":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.004555808656036446},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}},"=":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.026159334126040427},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.028790786948176585},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.05214723926380368},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.03086997193638915},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.03597122302158273},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.038461538461538464},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.03749098774333093},"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.030864197530864196},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.03189066059225513},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.05625},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.051470588235294115},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.02631578947368421}},"=":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.009111617312072893},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{},"=":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"@":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.008323424494649227},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.008637236084452975},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.006134969325153374},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.007483629560336763},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.014388489208633094},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.01282051282051282},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.007209805335255948},"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.007352941176470588},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.021052631578947368}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"n":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"s":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"\"":{"docs":{},")":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"a":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}},"r":{"docs":{},"g":{"docs":{},"s":{"docs":{},")":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.005945303210463734},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.003838771593090211},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.006134969325153374},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0037418147801683817},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.007194244604316547},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.004325883201153569},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.010526315789473684}}}}},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"<":{"docs":{},">":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}}}},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"要":{"docs":{},"保":{"docs":{},"证":{"docs":{},"这":{"docs":{},"个":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}},"b":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},":":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}},"d":{"docs":{},"d":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.007483629560336763}},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}},")":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"(":{"docs":{},"m":{"docs":{},"y":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.006134969325153374}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}}}}}}}},")":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}}}}}},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}}}},"n":{"docs":{},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}},"e":{"docs":{},"r":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}},"docs":{}}}}}}}}}}}}}},"c":{"docs":{},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"u":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{},"y":{"docs":{},"(":{"docs":{},"a":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},"d":{"docs":{},"s":{"docs":{},"y":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},":":{"1":{"2":{"2":{"0":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"a":{"docs":{},"i":{"docs":{},"t":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}},"(":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.004325883201153569}},"方":{"docs":{},"法":{"docs":{},"的":{"docs":{},"增":{"docs":{},"强":{"docs":{},"版":{"1":{"docs":{},".":{"5":{"docs":{},".":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{}}},"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}},"_":{"docs":{},"a":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},",":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.002883922134102379}}}},"b":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},",":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0021629416005767843}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"u":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}},"：":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}},"不":{"docs":{},"能":{"docs":{},"被":{"docs":{},"中":{"docs":{},"断":{"docs":{},"的":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{},"(":{"docs":{},"d":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}},"中":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"u":{"docs":{},"p":{"docs":{},"t":{"docs":{},"线":{"docs":{},"程":{"docs":{},"，":{"docs":{},"抛":{"docs":{},"异":{"docs":{},"常":{"docs":{},"！":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}},"线":{"docs":{},"程":{"docs":{},"接":{"docs":{},"到":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"线":{"docs":{},"程":{"docs":{},"发":{"docs":{},"送":{"docs":{},"通":{"docs":{},"知":{"docs":{},"再":{"docs":{},"次":{"docs":{},"启":{"docs":{},"动":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}},"获":{"docs":{},"得":{"docs":{},"锁":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}},"b":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.002806361085126286},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.005046863734679163}},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.005767844268204758}},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}},",":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}},".":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0028790786948176585}},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0028790786948176585}}}}}}}}}},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.018404907975460124},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.003604902667627974}}}}}}}},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"u":{"docs":{},"p":{"docs":{},"a":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}},"(":{"docs":{},")":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}},"d":{"docs":{},"b":{"docs":{},"t":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}},"b":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}},"(":{"docs":{},")":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}},"d":{"docs":{},"b":{"docs":{},"t":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":0.02857142857142857}}}}}}}}},"u":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}},"y":{"docs":{},"t":{"docs":{},"e":{"docs":{},"[":{"2":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}},"docs":{}},"docs":{},"]":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}},"交":{"docs":{},"叉":{"docs":{},"运":{"docs":{},"行":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}},"没":{"docs":{},"获":{"docs":{},"得":{"docs":{},"锁":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}},"c":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.007134363852556481},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.003838771593090211},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.007483629560336763},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.014388489208633094},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.008651766402307137},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.015945330296127564},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.007352941176470588},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}}}}},"）":{"docs":{},"。":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"a":{"docs":{},"r":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"a":{"docs":{},"r":{"docs":{},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},")":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"a":{"docs":{},"r":{"docs":{},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},",":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.024691358024691357}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.014268727705112961},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.016314779270633396},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.018404907975460124},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.018709073900841908},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.02158273381294964},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.01282051282051282},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.012256669069935111},"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.015945330296127564},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.014705882352941176},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.021052631578947368}}}}}},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.008323424494649227}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.011535688536409516}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{},"：":{"docs":{},"查":{"docs":{},"询":{"docs":{},"是":{"docs":{},"否":{"docs":{},"有":{"docs":{},"线":{"docs":{},"程":{"docs":{},"在":{"docs":{},"等":{"docs":{},"待":{"docs":{},"与":{"docs":{},"此":{"docs":{},"锁":{"docs":{},"有":{"docs":{},"关":{"docs":{},"的":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}},"返":{"docs":{},"回":{"docs":{},"等":{"docs":{},"待":{"docs":{},"与":{"docs":{},"此":{"docs":{},"锁":{"docs":{},"有":{"docs":{},"关":{"docs":{},"的":{"docs":{},"的":{"docs":{},"给":{"docs":{},"定":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}},".":{"docs":{},"a":{"docs":{},"w":{"docs":{},"a":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.002883922134102379}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}}}}}}}}}}}}}},"a":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}},".":{"docs":{},"a":{"docs":{},"w":{"docs":{},"a":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}}}}}}}}}}}}}},"，":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"b":{"docs":{},"，":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"c":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}},".":{"docs":{},"a":{"docs":{},"w":{"docs":{},"a":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}}}}}}}}}}}}}}},"c":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}},".":{"docs":{},"a":{"docs":{},"w":{"docs":{},"a":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}},"中":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}},"实":{"docs":{},"现":{"docs":{},"生":{"docs":{},"产":{"docs":{},"者":{"docs":{},"/":{"docs":{},"消":{"docs":{},"费":{"docs":{},"者":{"docs":{},"模":{"docs":{},"式":{"1":{"docs":{},".":{"3":{"docs":{},".":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{}}},"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}},"类":{"docs":{},"实":{"docs":{},"现":{"docs":{},"等":{"docs":{},"待":{"docs":{},"/":{"docs":{},"通":{"docs":{},"知":{"1":{"docs":{},".":{"2":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{}}},"docs":{}}},"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"介":{"docs":{},"绍":{"1":{"docs":{},".":{"2":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{}}},"docs":{}}},"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}},"：":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}},"p":{"docs":{},"u":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0047562425683709865},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0037418147801683817}}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"1":{"docs":{},".":{"4":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"docs":{}}},"docs":{}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}},":":{"docs":{},"\\":{"docs":{},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"\\":{"docs":{},"b":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{},"\\":{"docs":{},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"s":{"docs":{},"\\":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"n":{"docs":{},"s":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},">":{"docs":{},"j":{"docs":{},"p":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"h":{"2":{"docs":{},".":{"docs":{},"d":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"d":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{},"(":{"docs":{},"d":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},":":{"2":{"3":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"docs":{}},"3":{"6":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"3":{"docs":{},".":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},".":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},".":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},":":{"1":{"9":{"docs":{},")":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},".":{"docs":{},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{},"(":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},":":{"1":{"3":{"docs":{},")":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"j":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"u":{"docs":{},"p":{"docs":{},"t":{"docs":{},".":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"b":{"docs":{},".":{"docs":{},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{},"(":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"b":{"docs":{},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},":":{"9":{"docs":{},")":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"4":{"docs":{},".":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"u":{"docs":{},"p":{"docs":{},"t":{"docs":{},".":{"docs":{},"m":{"docs":{},"y":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},".":{"docs":{},"w":{"docs":{},"a":{"docs":{},"i":{"docs":{},"t":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"(":{"docs":{},"m":{"docs":{},"y":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},":":{"1":{"0":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{},"$":{"1":{"docs":{},".":{"docs":{},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{},"(":{"docs":{},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},":":{"9":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}},"7":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},".":{"docs":{},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},")":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"u":{"docs":{},"p":{"docs":{},"t":{"docs":{},".":{"docs":{},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},")":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{},";":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},".":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{},";":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.007352941176470588}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"v":{"docs":{},"e":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{},";":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.007352941176470588}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{},";":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.015789473684210527}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{},";":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.008547008547008548}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"(":{"docs":{},"t":{"docs":{},",":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}}}},"e":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}},")":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0035671819262782403},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.003838771593090211},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.007483629560336763},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.01079136690647482},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.008651766402307137},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.015945330296127564},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.007352941176470588},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.02631578947368421}},";":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}},".":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.003838771593090211},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.007483629560336763},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.01079136690647482},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.007930785868781542},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.015945330296127564},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.007352941176470588},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"d":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0047562425683709865},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.004325883201153569}},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.005945303210463734},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}}},"就":{"docs":{},"会":{"docs":{},"被":{"docs":{},"卡":{"docs":{},"住":{"docs":{},"。":{"docs":{},"这":{"docs":{},"是":{"docs":{},"为":{"docs":{},"什":{"docs":{},"么":{"docs":{},"呢":{"docs":{},"？":{"docs":{},"因":{"docs":{},"为":{"docs":{},"：":{"docs":{},"程":{"docs":{},"序":{"docs":{},"被":{"docs":{},"停":{"docs":{},"在":{"docs":{},"了":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"卡":{"docs":{},"住":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"加":{"docs":{},"了":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}}}}}},".":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0028790786948176585}},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0028790786948176585}}}}}},",":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0037418147801683817},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}},"y":{"docs":{},"(":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}}}}},"u":{"docs":{},"m":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223},"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":0.02857142857142857}},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.009111617312072893}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}},"数":{"docs":{},"据":{"docs":{},"类":{"docs":{},"型":{"1":{"docs":{},".":{"4":{"docs":{},".":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}},"docs":{}}},"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}},"x":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.005945303210463734},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0047984644913627635},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.014388489208633094},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.01282051282051282},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.002883922134102379},"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.007352941176470588},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.010526315789473684}}}}}},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.02631578947368421}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.021052631578947368}}}}},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"a":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}},"e":{"docs":{},"。":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}},"，":{"docs":{},"是":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}},"第":{"docs":{},"二":{"docs":{},"次":{"docs":{},"调":{"docs":{},"用":{"docs":{},"就":{"docs":{},"为":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}},";":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.006134969325153374},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}},"i":{"docs":{},"r":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}},"i":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0035671819262782403},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.010814708002883922}},"l":{"docs":{},"y":{"docs":{},"块":{"docs":{},"中":{"docs":{},"放":{"docs":{},"锁":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}},"e":{"docs":{},")":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}},",":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}},"设":{"docs":{},"置":{"docs":{},"任":{"docs":{},"务":{"docs":{},"开":{"docs":{},"始":{"docs":{},"执":{"docs":{},"行":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"1":{"docs":{},".":{"4":{"docs":{},".":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}},"docs":{}}},"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"m":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"/":{"docs":{},"s":{"docs":{},"r":{"docs":{},"c":{"docs":{},"/":{"docs":{},"c":{"docs":{},"h":{"6":{"docs":{},"/":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},"/":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{},"t":{"docs":{},"x":{"docs":{},"t":{"docs":{},"\"":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.004555808656036446}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}},"(":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}},"(":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}},"o":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},")":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"1":{"docs":{},".":{"5":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"docs":{}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.00683371298405467}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.022779043280182234}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}}}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0028790786948176585}},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0028790786948176585}}}}}}}}},"b":{"docs":{},"y":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}},"(":{"docs":{},")":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.01282051282051282},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}},"：":{"docs":{},"获":{"docs":{},"取":{"docs":{},"当":{"docs":{},"前":{"docs":{},"线":{"docs":{},"程":{"docs":{},"的":{"docs":{},"值":{"docs":{},"。":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"(":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.008547008547008548}}}}}}}}},"h":{"docs":{},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},"：":{"docs":{},"查":{"docs":{},"询":{"docs":{},"当":{"docs":{},"前":{"docs":{},"线":{"docs":{},"程":{"docs":{},"线":{"docs":{},"程":{"docs":{},"保":{"docs":{},"持":{"docs":{},"此":{"docs":{},"锁":{"docs":{},"定":{"docs":{},"的":{"docs":{},"个":{"docs":{},"数":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"调":{"docs":{},"用":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},"：":{"docs":{},"返":{"docs":{},"回":{"docs":{},"正":{"docs":{},"在":{"docs":{},"争":{"docs":{},"夺":{"docs":{},"此":{"docs":{},"锁":{"docs":{},"的":{"docs":{},"估":{"docs":{},"计":{"docs":{},"数":{"docs":{},"。":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"a":{"docs":{},"i":{"docs":{},"t":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.0125}}}}}}},"l":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.007194244604316547},"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.024691358024691357}}}},"c":{"docs":{},"k":{"1":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}},"2":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}},")":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.003838771593090211},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.018745493871665464}},")":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.004677268475210477}},")":{"docs":{},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}}}}}}}}}}}},".":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"i":{"docs":{},"f":{"docs":{},"y":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}},"e":{"docs":{},"w":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.005767844268204758}}}}}}}}}}}}}}}}},"w":{"docs":{},"a":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.002806361085126286}}}}}}}},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},".":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.012256669069935111}}},"，":{"docs":{},"这":{"docs":{},"相":{"docs":{},"当":{"docs":{},"于":{"docs":{},"只":{"docs":{},"能":{"docs":{},"在":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},".":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.010814708002883922}}}}}}}}}}}},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.009354536950420954}}},"的":{"docs":{},"使":{"docs":{},"用":{"docs":{"Ch4-Lock的使用/":{"ref":"Ch4-Lock的使用/","tf":5}}}},"方":{"docs":{},"法":{"docs":{},"们":{"1":{"docs":{},".":{"4":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{}}},"docs":{}}},"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}},"(":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}},"方":{"docs":{},"法":{"docs":{},"的":{"docs":{},"各":{"docs":{},"种":{"docs":{},"增":{"docs":{},"强":{"docs":{},"版":{"docs":{},"方":{"docs":{},"法":{"docs":{},"（":{"docs":{},"重":{"docs":{},"要":{"docs":{},"）":{"1":{"docs":{},".":{"4":{"docs":{},".":{"5":{"docs":{},".":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{}}},"docs":{}}},"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"u":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"拿":{"docs":{},"到":{"docs":{},"这":{"docs":{},"个":{"docs":{},"锁":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"已":{"docs":{},"经":{"docs":{},"被":{"docs":{},"打":{"docs":{},"上":{"docs":{},"了":{"docs":{},"中":{"docs":{},"断":{"docs":{},"标":{"docs":{},"记":{"docs":{},"，":{"docs":{},"就":{"docs":{},"会":{"docs":{},"直":{"docs":{},"接":{"docs":{},"抛":{"docs":{},"出":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"：":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}},"如":{"docs":{},"果":{"docs":{},"当":{"docs":{},"前":{"docs":{},"线":{"docs":{},"程":{"docs":{},"未":{"docs":{},"被":{"docs":{},"中":{"docs":{},"断":{"docs":{},"，":{"docs":{},"获":{"docs":{},"取":{"docs":{},"锁":{"docs":{},"定":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"当":{"docs":{},"前":{"docs":{},"线":{"docs":{},"程":{"docs":{},"已":{"docs":{},"有":{"docs":{},"中":{"docs":{},"断":{"docs":{},"标":{"docs":{},"记":{"docs":{},"，":{"docs":{},"则":{"docs":{},"抛":{"docs":{},"出":{"docs":{},"异":{"docs":{},"常":{"docs":{},"。":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0047984644913627635},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.007483629560336763}},")":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}},",":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}},"=":{"0":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}},"docs":{}}}}}}}}},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.003838771593090211},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0037418147801683817}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"=":{"2":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}},"docs":{}}}}}},"，":{"docs":{},"比":{"docs":{},"如":{"docs":{},"一":{"docs":{},"个":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.005945303210463734},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"[":{"docs":{},"]":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.005945303210463734},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.003838771593090211},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.006134969325153374},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0037418147801683817},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.007194244604316547},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.004325883201153569},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.010526315789473684}}}}}}}}}}},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}}}}}},"线":{"docs":{},"程":{"docs":{},"发":{"docs":{},"送":{"docs":{},"a":{"docs":{},"线":{"docs":{},"程":{"docs":{},"再":{"docs":{},"次":{"docs":{},"启":{"docs":{},"动":{"docs":{},"的":{"docs":{},"通":{"docs":{},"知":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},",":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},",":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"的":{"docs":{},"父":{"docs":{},"线":{"docs":{},"程":{"docs":{},"组":{"docs":{},"名":{"docs":{},"称":{"docs":{},"：":{"docs":{},"s":{"docs":{},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}}}}}}},"x":{"docs":{},"_":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}},"p":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.017094017094017096}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"y":{"docs":{},"(":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},",":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"_":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},")":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"1":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}},"m":{"docs":{},"y":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}},"2":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}},"m":{"docs":{},"y":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.009512485136741973},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.014388489208633094},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.011029411764705883}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0047562425683709865},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}},"s":{"docs":{},"i":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}}}}}}}}}}},"执":{"docs":{},"行":{"docs":{},"完":{"docs":{},"了":{"docs":{},"，":{"docs":{},"我":{"docs":{},"再":{"docs":{},"执":{"docs":{},"行":{"docs":{},"一":{"docs":{},"下":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}}}},"#":{"docs":{},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}},"[":{"1":{"0":{"docs":{},"]":{"docs":{},";":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}},"docs":{}},"docs":{},"]":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}}}}}}}}}}}}}},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.012345679012345678}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.003838771593090211}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"c":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.003838771593090211},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.011535688536409516}},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.003604902667627974}}}}},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.005767844268204758}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0037418147801683817}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0037418147801683817}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}},"(":{"docs":{},")":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"y":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"1":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}},"2":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}},"3":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}},"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.003838771593090211}},"\"":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}},")":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}},"(":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}}},"a":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}},"b":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}},"m":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.011029411764705883}}}},"n":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},")":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}}}}}}},"e":{"docs":{},"w":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.011890606420927468},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.01727447216890595},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.018404907975460124},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.01777362020579981},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.014388489208633094},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.024513338139870222},"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.018518518518518517},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.03644646924829157},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.05625},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.014705882352941176},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.021052631578947368}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"y":{"docs":{},")":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"设":{"docs":{},"置":{"docs":{},"为":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}},",":{"docs":{"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":0.02857142857142857}}},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{},"的":{"docs":{},"父":{"docs":{},"线":{"docs":{},"程":{"docs":{},"组":{"docs":{},"名":{"docs":{},"称":{"docs":{},"：":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.007352941176470588}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.007352941176470588}}}}}}}}}}}}}}},"x":{"docs":{},"t":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.002883922134102379}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"_":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}},"t":{"docs":{},"e":{"0":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}},"1":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0028790786948176585},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.002806361085126286}},":":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"2":{"docs":{},":":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"3":{"docs":{},":":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"4":{"docs":{},":":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.011890606420927468},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.003604902667627974}},"a":{"1":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}},"2":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}},"3":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}},"docs":{}},"b":{"1":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}},"2":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}},"3":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}},"docs":{}},"c":{"1":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}},"2":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}},"3":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}},"docs":{}}},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.002806361085126286}}},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}},"：":{"docs":{},"随":{"docs":{},"机":{"docs":{},"唤":{"docs":{},"醒":{"docs":{},"等":{"docs":{},"待":{"docs":{},"队":{"docs":{},"列":{"docs":{},"中":{"docs":{},"等":{"docs":{},"待":{"docs":{},"锁":{"docs":{},"的":{"docs":{},"一":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"，":{"docs":{},"使":{"docs":{},"该":{"docs":{},"线":{"docs":{},"程":{"docs":{},"退":{"docs":{},"出":{"docs":{},"等":{"docs":{},"待":{"docs":{},"队":{"docs":{},"列":{"docs":{},"，":{"docs":{},"进":{"docs":{},"入":{"docs":{},"可":{"docs":{},"运":{"docs":{},"行":{"docs":{},"状":{"docs":{},"态":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}},"：":{"docs":{},"使":{"docs":{},"所":{"docs":{},"有":{"docs":{},"线":{"docs":{},"程":{"docs":{},"退":{"docs":{},"出":{"docs":{},"等":{"docs":{},"待":{"docs":{},"队":{"docs":{},"列":{"docs":{},"，":{"docs":{},"进":{"docs":{},"入":{"docs":{},"可":{"docs":{},"运":{"docs":{},"行":{"docs":{},"状":{"docs":{},"态":{"docs":{},"，":{"docs":{},"执":{"docs":{},"行":{"docs":{},"的":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"由":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"会":{"docs":{},"导":{"docs":{},"致":{"docs":{},"被":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}},"它":{"docs":{},"才":{"docs":{},"会":{"docs":{},"被":{"docs":{},"选":{"docs":{},"中":{"docs":{},"进":{"docs":{},"入":{"docs":{},"就":{"docs":{},"绪":{"docs":{},"队":{"docs":{},"列":{"docs":{},"，":{"docs":{},"等":{"docs":{},"待":{"docs":{},"被":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}},"w":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}},"/":{"2":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}},"docs":{}},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.01282051282051282},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.009111617312072893},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}},";":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.008547008547008548},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}}}}},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.01028999064546305},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.008547008547008548},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"p":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"b":{"docs":{},"\"":{"docs":{},",":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}},"，":{"docs":{},"同":{"docs":{},"时":{"docs":{},"要":{"docs":{},"注":{"docs":{},"意":{"docs":{},"：":{"docs":{},"只":{"docs":{},"要":{"docs":{},"对":{"docs":{},"象":{"docs":{},"不":{"docs":{},"变":{"docs":{},"，":{"docs":{},"既":{"docs":{},"使":{"docs":{},"该":{"docs":{},"对":{"docs":{},"象":{"docs":{},"的":{"docs":{},"属":{"docs":{},"性":{"docs":{},"改":{"docs":{},"变":{"docs":{},"了":{"docs":{},"，":{"docs":{},"结":{"docs":{},"果":{"docs":{},"还":{"docs":{},"是":{"docs":{},"同":{"docs":{},"步":{"docs":{},"的":{"docs":{},"，":{"docs":{},"比":{"docs":{},"如":{"docs":{},"我":{"docs":{},"们":{"docs":{},"使":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"u":{"docs":{},"s":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}},"(":{"docs":{},"f":{"docs":{},"i":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}},"(":{"docs":{},"f":{"docs":{},"o":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"t":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}},"：":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0047562425683709865}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}}}},"i":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}},"o":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}},")":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0035671819262782403},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}},"=":{"docs":{},"\"":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}},"a":{"docs":{},"a":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}}},"b":{"docs":{},"b":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"c":{"docs":{},"c":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}},"e":{"docs":{},")":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.008547008547008548}}}}}}}}}}}},"c":{"docs":{},"k":{"docs":{},"a":{"docs":{},"g":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.014705882352941176},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.021052631578947368}}}}}}},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"x":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}},"l":{"docs":{},"n":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0047562425683709865}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0047562425683709865}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"t":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0047562425683709865},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.008637236084452975},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.018404907975460124},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.01403180542563143},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.017303532804614274},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.029612756264236904},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.014705882352941176}}}}}},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.017094017094017096},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.04518430439952437},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.04798464491362764},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.05828220858895705},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.04957904583723106},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.050359712230215826},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.01282051282051282},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.03893294881038212},"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.012345679012345678},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.0387243735763098},"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":0.02857142857142857},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.01875},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.03676470588235294},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.06842105263157895}},"v":{"docs":{},"a":{"docs":{},"r":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.005758157389635317}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}},")":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0028790786948176585}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}},"b":{"docs":{},"\"":{"docs":{},",":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.005758157389635317}}}}}}}}}}},"i":{"docs":{},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"o":{"docs":{},"d":{"docs":{},")":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.012345679012345678}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"：":{"docs":{},"恢":{"docs":{},"复":{"docs":{},"线":{"docs":{},"程":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}},"l":{"docs":{},"t":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}},";":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.006134969325153374},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.029914529914529916},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.02050113895216401},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}},"a":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},"i":{"docs":{},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0037418147801683817}},"e":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}}}},"(":{"docs":{},")":{"docs":{},"：":{"docs":{},"移":{"docs":{},"除":{"docs":{},"当":{"docs":{},"前":{"docs":{},"线":{"docs":{},"程":{"docs":{},"的":{"docs":{},"值":{"docs":{},"。":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.004325883201153569}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.007209805335255948}}},"中":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}},"类":{"1":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{}}},"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":5.000720980533526}},"的":{"docs":{},"使":{"docs":{},"用":{"docs":{},"简":{"docs":{},"介":{"1":{"docs":{},".":{"1":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{}}},"docs":{}}},"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}},"操":{"docs":{},"作":{"docs":{},"方":{"docs":{},"法":{"1":{"docs":{},".":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}},"的":{"docs":{},"操":{"docs":{},"作":{"docs":{},"特":{"docs":{},"点":{"2":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{}}},"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}},"类":{"2":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{}}},"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.007134363852556481},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.003838771593090211},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.006134969325153374},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.00841908325537886},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.007194244604316547},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.004325883201153569},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}},"(":{"docs":{},")":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.01070154577883472},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.008637236084452975},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.006134969325153374},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.00841908325537886},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.014388489208633094},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.007209805335255948},"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.012345679012345678},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.007352941176470588},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.010526315789473684}}}},"n":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.005945303210463734},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.006134969325153374},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.009354536950420954},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.002883922134102379},"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.0125}},"e":{"docs":{},"（":{"docs":{},"可":{"docs":{},"运":{"docs":{},"行":{"docs":{},"）":{"docs":{},"状":{"docs":{},"态":{"docs":{},"，":{"docs":{},"不":{"docs":{},"过":{"docs":{},"这":{"docs":{},"个":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"准":{"docs":{},"备":{"docs":{},"运":{"docs":{},"行":{"docs":{},"的":{"docs":{},"状":{"docs":{},"态":{"docs":{},"，":{"docs":{},"当":{"docs":{},"这":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"抢":{"docs":{},"占":{"docs":{},"到":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"(":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}},",":{"docs":{"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":0.02857142857142857}}},"a":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}},",":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}},"b":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}},",":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}}}},"（":{"docs":{},"运":{"docs":{},"行":{"docs":{},"）":{"docs":{},"状":{"docs":{},"态":{"docs":{},"。":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.009202453987730062},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.002806361085126286},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.007194244604316547},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.004325883201153569}}}}}}},"f":{"docs":{},"l":{"docs":{},"a":{"docs":{},"g":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.018404907975460124}},")":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.006134969325153374}}},";":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.012269938650306749}}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.006134969325153374}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"，":{"docs":{},"不":{"docs":{},"用":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}},"e":{"docs":{},")":{"docs":{},";":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.002883922134102379}},"p":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}},"n":{"docs":{},"c":{"docs":{},"a":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"：":{"docs":{},"给":{"docs":{},"指":{"docs":{},"定":{"docs":{},"线":{"docs":{},"程":{"docs":{},"对":{"docs":{},"象":{"docs":{},"设":{"docs":{},"置":{"docs":{},"异":{"docs":{},"常":{"docs":{},"处":{"docs":{},"理":{"docs":{},"器":{"docs":{},"。":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}}}}}}}}}}}}}}}}}},"：":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0047984644913627635}},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}}}}}}}}}},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{},"f":{"docs":{},"l":{"docs":{},"a":{"docs":{},"g":{"docs":{},"(":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.006134969325153374}}}}}}}}}}}}}}}}},"(":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}},"：":{"docs":{},"设":{"docs":{},"置":{"docs":{},"当":{"docs":{},"前":{"docs":{},"线":{"docs":{},"程":{"docs":{},"的":{"docs":{},"值":{"docs":{},"。":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.008547008547008548}},";":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"a":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"：":{"docs":{},"对":{"docs":{},"一":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"类":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"对":{"docs":{},"象":{"docs":{},"设":{"docs":{},"置":{"docs":{},"异":{"docs":{},"常":{"docs":{},"处":{"docs":{},"理":{"docs":{},"器":{"docs":{},"。":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}}}}}}}}}}}}}}}}}}}}}},"：":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"c":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.005758157389635317},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.015337423312883436},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.003604902667627974}},"e":{"1":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}},"(":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}},"2":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}},"(":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}},"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"a":{"docs":{},"i":{"docs":{},"t":{"docs":{},"_":{"docs":{},"a":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}},"b":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.009202453987730062}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"1":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}},"2":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}},"3":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}},"docs":{}}}}}}},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{},"f":{"docs":{},"l":{"docs":{},"a":{"docs":{},"g":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}},"，":{"docs":{},"而":{"docs":{},"这":{"docs":{},"个":{"docs":{},"问":{"docs":{},"题":{"docs":{},"也":{"docs":{},"正":{"docs":{},"是":{"docs":{},"由":{"docs":{},"于":{"docs":{},"公":{"docs":{},"共":{"docs":{},"堆":{"docs":{},"栈":{"docs":{},"和":{"docs":{},"私":{"docs":{},"有":{"docs":{},"堆":{"docs":{},"栈":{"docs":{},"中":{"docs":{},"的":{"docs":{},"值":{"docs":{},"不":{"docs":{},"同":{"docs":{},"步":{"docs":{},"造":{"docs":{},"成":{"docs":{},"的":{"docs":{},"。":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}}}},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"_":{"docs":{},"a":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}},"w":{"docs":{},"a":{"docs":{},"i":{"docs":{},"t":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}}}}}}}}}}}}}}},")":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.002883922134102379}}},";":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.006134969325153374},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.005767844268204758}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}},"(":{"docs":{},"毫":{"docs":{},"秒":{"docs":{},"数":{"docs":{},")":{"1":{"docs":{},".":{"4":{"docs":{},".":{"4":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"docs":{}}},"docs":{}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}},")":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.007194244604316547}}}}}}}},"中":{"docs":{},"停":{"docs":{},"止":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}},"时":{"docs":{},"，":{"docs":{},"t":{"docs":{},"h":{"docs":{},"b":{"docs":{},"改":{"docs":{},"变":{"docs":{},"了":{"docs":{},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"出":{"docs":{},"现":{"docs":{},"了":{"docs":{},"数":{"docs":{},"据":{"docs":{},"不":{"docs":{},"同":{"docs":{},"步":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.011890606420927468},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.008637236084452975},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.006134969325153374},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.006548175865294668},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.007194244604316547},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.01282051282051282},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.007930785868781542},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.04100227790432802},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.011029411764705883},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.010526315789473684}},"代":{"docs":{},"码":{"docs":{},"块":{"1":{"docs":{},".":{"3":{"docs":{},".":{"4":{"docs":{},".":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}},"docs":{}}},"docs":{}}},"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}},"内":{"docs":{},"部":{"docs":{},"类":{"docs":{},"（":{"docs":{},"不":{"docs":{},"适":{"docs":{},"用":{"docs":{},"于":{"docs":{},"序":{"docs":{},"列":{"docs":{},"化":{"docs":{},"）":{"1":{"docs":{},".":{"3":{"docs":{},".":{"3":{"docs":{},".":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}},"docs":{}}},"docs":{}}},"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}},"e":{"docs":{"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":0.05714285714285714}}}},"c":{"docs":{},"k":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.01070154577883472}}}},"暴":{"docs":{},"力":{"docs":{},"停":{"docs":{},"止":{"docs":{},"线":{"docs":{},"程":{"docs":{},"的":{"docs":{},"弊":{"docs":{},"端":{"1":{"docs":{},".":{"6":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"docs":{}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.006134969325153374}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.007134363852556481},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.009596928982725527},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.004677268475210477},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.01838235294117647},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}},"b":{"docs":{},"u":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}},"[":{"docs":{},"]":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}}},"u":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0047562425683709865},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0028790786948176585}}}}}}}},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"a":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"t":{"docs":{},",":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}}}}}}}}}}}}}}}}}}}}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0047984644913627635},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.00841908325537886},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.002883922134102379},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.007352941176470588}}}},"k":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}}}}}}}}}},"s":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0035671819262782403},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}},"(":{"docs":{},")":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0035671819262782403}},"：":{"docs":{},"暂":{"docs":{},"停":{"docs":{},"线":{"docs":{},"程":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}},"（":{"docs":{},"这":{"docs":{},"个":{"docs":{},"方":{"docs":{},"法":{"docs":{},"极":{"docs":{},"易":{"docs":{},"导":{"docs":{},"致":{"docs":{},"死":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"不":{"docs":{},"建":{"docs":{},"议":{"docs":{},"使":{"docs":{},"用":{"docs":{},"）":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}}}},"t":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.004677268475210477}},"(":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}}}}}}}},")":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.002806361085126286}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}}}}}}}}},"y":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.005945303210463734},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.03166986564299424},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.012269938650306749},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.007483629560336763},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.004555808656036446}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"d":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}},"关":{"docs":{},"键":{"docs":{},"字":{"1":{"docs":{},".":{"2":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"docs":{}}},"4":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"docs":{}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}},"使":{"docs":{},"用":{"docs":{},"方":{"docs":{},"式":{"1":{"docs":{},".":{"3":{"docs":{},".":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"docs":{}}},"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}},"修":{"docs":{},"饰":{"docs":{},"在":{"docs":{},"方":{"docs":{},"法":{"docs":{},"前":{"docs":{},"面":{"docs":{},"，":{"docs":{},"此":{"docs":{},"时":{"docs":{},"锁":{"docs":{},"对":{"docs":{},"象":{"docs":{},"为":{"docs":{},"当":{"docs":{},"前":{"docs":{},"对":{"docs":{},"象":{"docs":{},"本":{"docs":{},"身":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"同":{"docs":{},"步":{"1":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"docs":{}}},"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}},"方":{"docs":{},"法":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":5}}}}}},"的":{"docs":{},"特":{"docs":{},"性":{"1":{"docs":{},".":{"2":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"docs":{}}},"docs":{}}},"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"可":{"docs":{},"见":{"docs":{},"性":{"docs":{},"功":{"docs":{},"能":{"1":{"docs":{},".":{"4":{"docs":{},".":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}},"docs":{}}},"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}},"：":{"docs":{},"同":{"docs":{},"步":{"docs":{},"，":{"docs":{},"加":{"docs":{},"个":{"docs":{},"前":{"docs":{},"缀":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}},"，":{"docs":{},"但":{"docs":{},"只":{"docs":{},"能":{"docs":{},"用":{"docs":{},"来":{"docs":{},"修":{"docs":{},"饰":{"docs":{},"变":{"docs":{},"量":{"docs":{},"，":{"docs":{},"而":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},".":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},".":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"l":{"docs":{},"n":{"docs":{},"(":{"docs":{},"\"":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0047562425683709865}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.009512485136741973},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}}}}},"执":{"docs":{},"行":{"docs":{},"完":{"docs":{},"了":{"docs":{},"，":{"docs":{},"我":{"docs":{},"再":{"docs":{},"执":{"docs":{},"行":{"docs":{},"一":{"docs":{},"下":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.002883922134102379}}}}}}}},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},":":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"=":{"docs":{},"\"":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"=":{"docs":{},"\"":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},".":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"=":{"docs":{},"\"":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"=":{"docs":{},"\"":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}},"b":{"docs":{},"被":{"docs":{},"中":{"docs":{},"断":{"docs":{},"，":{"docs":{},"抛":{"docs":{},"了":{"docs":{},"个":{"docs":{},"异":{"docs":{},"常":{"docs":{},"被":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"了":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}}}}}}}}}}}},"运":{"docs":{},"行":{"docs":{},"结":{"docs":{},"束":{"docs":{},"了":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}},"a":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}},"c":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"=":{"docs":{},"\"":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.007352941176470588}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"=":{"docs":{},"\"":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"=":{"docs":{},"\"":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}}}}}}}}}}}}},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"1":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}},"2":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}},"docs":{}}}}}},"t":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"_":{"docs":{},"a":{"docs":{},",":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"b":{"docs":{},",":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"=":{"docs":{},"\"":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}}}}}}}}}}},"停":{"docs":{},"止":{"docs":{},"成":{"docs":{},"功":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.006134969325153374}}}}}}}}},"已":{"docs":{},"经":{"docs":{},"发":{"docs":{},"起":{"docs":{},"停":{"docs":{},"止":{"docs":{},"命":{"docs":{},"令":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}}},"a":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}},"b":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}}}}}},"w":{"docs":{},"a":{"docs":{},"i":{"docs":{},"t":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0037418147801683817},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}},"(":{"docs":{},")":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}}}}}},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},":":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}},"执":{"docs":{},"行":{"docs":{},"任":{"docs":{},"务":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}},"调":{"docs":{},"用":{"docs":{},"了":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"v":{"docs":{},"e":{"docs":{},"方":{"docs":{},"法":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}}}},"线":{"docs":{},"程":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.010526315789473684}}}}},"i":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},".":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.005758157389635317},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},".":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.0125}}}}}}}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}},"e":{"docs":{},".":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.004555808656036446}}}}}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}},"\"":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"的":{"docs":{},"父":{"docs":{},"线":{"docs":{},"程":{"docs":{},"组":{"docs":{},"名":{"docs":{},"称":{"docs":{},"：":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{},"的":{"docs":{},"父":{"docs":{},"线":{"docs":{},"程":{"docs":{},"组":{"docs":{},"名":{"docs":{},"称":{"docs":{},"：":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}},"线":{"docs":{},"程":{"docs":{},"组":{"docs":{},"中":{"docs":{},"活":{"docs":{},"动":{"docs":{},"线":{"docs":{},"程":{"docs":{},"的":{"docs":{},"数":{"docs":{},"量":{"docs":{},"：":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.0125}}}}}}}}}}}}}},"的":{"docs":{},"名":{"docs":{},"称":{"docs":{},"：":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.004325883201153569}},";":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.002883922134102379}}}}}}}}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"c":{"docs":{},"h":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},":":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}},"g":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.002883922134102379}},"(":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.002883922134102379}}}},"a":{"docs":{},"l":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}},"l":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"_":{"docs":{},"a":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},",":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"b":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.06605922551252848}},"(":{"docs":{},")":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.011389521640091117}},";":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.015945330296127564}}}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}},";":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.02050113895216401}}},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"y":{"docs":{},";":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"l":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}},"e":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{},";":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.004555808656036446}}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"类":{"docs":{},"的":{"docs":{},"非":{"docs":{},"线":{"docs":{},"程":{"docs":{},"安":{"docs":{},"全":{"docs":{},"处":{"docs":{},"理":{"1":{"docs":{},".":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}},"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":5.0036764705882355}}}}}}}}}}}}}}}}}},"e":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.04411764705882353}},"(":{"docs":{},"\"":{"docs":{},"y":{"docs":{},"y":{"docs":{},"y":{"docs":{},"i":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}}}}}}}}}},",":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}},".":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},")":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.011029411764705883}}},"：":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}}}}}}}}}}}},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0037418147801683817}}}}}}},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"l":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{},"e":{"docs":{},"d":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"和":{"docs":{},"s":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"的":{"docs":{},"区":{"docs":{},"别":{"1":{"docs":{},".":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}},"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}},"t":{"1":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0035671819262782403}}}},"=":{"docs":{},"\"":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0035671819262782403}}},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}}}}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"t":{"1":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}},"docs":{}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}},"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.038461538461538464}},"a":{"docs":{},"g":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"打":{"docs":{},"上":{"docs":{},"了":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}},"我":{"docs":{},"们":{"docs":{},"有":{"docs":{},"以":{"docs":{},"下":{"docs":{},"两":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"可":{"docs":{},"以":{"docs":{},"进":{"docs":{},"行":{"docs":{},"检":{"docs":{},"测":{"docs":{},"：":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}},"要":{"docs":{},"在":{"docs":{},"线":{"docs":{},"程":{"docs":{},"中":{"docs":{},"不":{"docs":{},"时":{"docs":{},"检":{"docs":{},"查":{"docs":{},"它":{"docs":{},"是":{"docs":{},"不":{"docs":{},"是":{"docs":{},"已":{"docs":{},"经":{"docs":{},"被":{"docs":{},"打":{"docs":{},"上":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{},"构":{"docs":{},"造":{"docs":{},"函":{"docs":{},"数":{"docs":{},"的":{"docs":{},"缘":{"docs":{},"故":{"docs":{},"，":{"docs":{},"而":{"docs":{},"且":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}},"t":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},",":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"我":{"docs":{},"们":{"docs":{},"就":{"docs":{},"不":{"docs":{},"用":{"docs":{},"写":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}},"s":{"docs":{},"k":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.012345679012345678}},",":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.024691358024691357}}}}}},"h":{"1":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}},"：":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"1":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}},"docs":{}}}}}}},"2":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}},")":{"docs":{},"，":{"docs":{},"两":{"docs":{},"个":{"docs":{},"锁":{"docs":{},"(":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"1":{"docs":{},",":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"docs":{}}}}}}}}}}},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}},"：":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"2":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}},"docs":{}}}}}}},"docs":{},"i":{"docs":{},"s":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}}}},"=":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"u":{"docs":{},"p":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},"：":{"docs":{},"测":{"docs":{},"试":{"docs":{},"当":{"docs":{},"前":{"docs":{},"线":{"docs":{},"程":{"docs":{},"是":{"docs":{},"否":{"docs":{},"已":{"docs":{},"经":{"docs":{},"是":{"docs":{},"中":{"docs":{},"断":{"docs":{},"状":{"docs":{},"态":{"docs":{},"，":{"docs":{},"执":{"docs":{},"行":{"docs":{},"后":{"docs":{},"将":{"docs":{},"状":{"docs":{},"态":{"docs":{},"标":{"docs":{},"志":{"docs":{},"清":{"docs":{},"除":{"docs":{},"为":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}}}}}}}}}}},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}}}},"=":{"docs":{},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"u":{"docs":{},"p":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},"：":{"docs":{},"测":{"docs":{},"试":{"docs":{},"当":{"docs":{},"前":{"docs":{},"线":{"docs":{},"程":{"docs":{},"是":{"docs":{},"否":{"docs":{},"已":{"docs":{},"经":{"docs":{},"是":{"docs":{},"中":{"docs":{},"断":{"docs":{},"状":{"docs":{},"态":{"docs":{},"，":{"docs":{},"执":{"docs":{},"行":{"docs":{},"后":{"docs":{},"不":{"docs":{},"状":{"docs":{},"态":{"docs":{},"清":{"docs":{},"除":{"docs":{},"状":{"docs":{},"态":{"docs":{},"标":{"docs":{},"志":{"docs":{},"，":{"docs":{},"不":{"docs":{},"是":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"v":{"docs":{},"a":{"docs":{},"r":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0028790786948176585}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.003838771593090211}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}}}},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.004677268475210477}}}}}},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{},"f":{"docs":{},"l":{"docs":{},"a":{"docs":{},"g":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.006134969325153374}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"c":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.002883922134102379}}}}}},"t":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}},"b":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"b":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}},"i":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}}}}}}}}}}}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}},"d":{"docs":{},"b":{"docs":{},"t":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}}}}}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.007352941176470588}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"b":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}},"。":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}},"？":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"1":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.005758157389635317},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.010526315789473684}},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"1":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}}}}},"docs":{}}}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"a":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.010526315789473684}}}}}}}}}}}},"2":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.005758157389635317},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.010526315789473684}},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"2":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}}}}},"docs":{}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.010526315789473684}}}}}}}}}}}},"3":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.003838771593090211}},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"3":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}},"docs":{}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.029726516052318668},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.014395393474088292},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.014388489208633094},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.01282051282051282},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.010093727469358327},"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":0.02857142857142857},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.025},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.007352941176470588},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}},"(":{"docs":{},")":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0028790786948176585},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.002883922134102379}},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{},"n":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.002883922134102379}}}},",":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.0125}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}},"d":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"a":{"docs":{},")":{"docs":{},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.006548175865294668}}}}},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{},",":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.0125}}}}}}}}},".":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.002883922134102379},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.007352941176470588}},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.005046863734679163}}}},"=":{"docs":{},"a":{"docs":{},"t":{"1":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}},"docs":{}}},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}}}},"=":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}}}}}}}}}}}}}}}},";":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.008547008547008548}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"u":{"docs":{},"p":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}},"s":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{},"(":{"1":{"0":{"0":{"0":{"0":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}},"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}},"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}},"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}},"docs":{}},"docs":{}},"2":{"0":{"0":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}},"docs":{}},"docs":{}},"docs":{}},"3":{"0":{"0":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}},"docs":{}},"docs":{}},"docs":{}},"5":{"0":{"0":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}}}},"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}},"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}},"docs":{}},"6":{"0":{"0":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0047562425683709865},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"a":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.010526315789473684}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"中":{"docs":{},"的":{"4":{"docs":{},"个":{"docs":{},"方":{"docs":{},"法":{"1":{"docs":{},".":{"4":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"docs":{}}},"docs":{}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}},"docs":{}}},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"用":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}},":":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.003838771593090211}}},"a":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.006134969325153374},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.014388489208633094},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.004325883201153569},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.0125}},"(":{"docs":{},"p":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"v":{"docs":{},"a":{"docs":{},"r":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"c":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}},"e":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}},"m":{"docs":{},"y":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"c":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}}}}}}}}},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}}}},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}},"e":{"docs":{},"t":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}}}}}}}}}}}}}}},"d":{"docs":{},"d":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}},"(":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}},")":{"docs":{},")":{"docs":{},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}},"，":{"docs":{},"并":{"docs":{},"等":{"docs":{},"待":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}},"：":{"docs":{},"一":{"docs":{},"个":{"docs":{},"执":{"docs":{},"行":{"docs":{},"任":{"docs":{},"务":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"。":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}}}}},"b":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0028790786948176585},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.017985611510791366},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.004325883201153569},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.0125}},"(":{"docs":{},"p":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"v":{"docs":{},"a":{"docs":{},"r":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}},"m":{"docs":{},"y":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"c":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}}}}}}}}},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},")":{"docs":{},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}}}}}}}}}}}}}}}}}}},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"u":{"docs":{},"p":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}},"e":{"docs":{},"t":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"b":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}}}}}}}}}}}}}}},")":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}},";":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.007194244604316547}}},"被":{"docs":{},"中":{"docs":{},"断":{"docs":{},"，":{"docs":{},"抛":{"docs":{},"了":{"docs":{},"个":{"docs":{},"异":{"docs":{},"常":{"docs":{},"被":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"了":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}}}}}}}}},"：":{"docs":{},"负":{"docs":{},"责":{"docs":{},"创":{"docs":{},"建":{"docs":{},"并":{"docs":{},"启":{"docs":{},"动":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},")":{"docs":{},")":{"docs":{},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"i":{"docs":{},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0037418147801683817}},"(":{"docs":{},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}},")":{"docs":{},")":{"docs":{},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}}}}}}}}}}}}}}}}}}}}},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},")":{"docs":{},")":{"docs":{},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"i":{"docs":{},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}},"c":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.01079136690647482},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}},"(":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"b":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}}},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}},"：":{"docs":{},"负":{"docs":{},"责":{"docs":{},"中":{"docs":{},"断":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.0641025641025641},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}},"a":{"docs":{},"l":{"docs":{},".":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.008547008547008548}},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"根":{"docs":{},"据":{"docs":{},"要":{"docs":{},"获":{"docs":{},"得":{"docs":{},"的":{"docs":{},"这":{"docs":{},"个":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.01282051282051282}},".":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}},"：":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}},"的":{"docs":{},"作":{"docs":{},"用":{"1":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}},"docs":{}}},"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}},"原":{"docs":{},"理":{"1":{"docs":{},".":{"3":{"docs":{},".":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}},"docs":{}}},"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}},"类":{"1":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}},"docs":{}}},"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":5.004273504273504}}},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"需":{"docs":{},"要":{"docs":{},"写":{"docs":{},"一":{"docs":{},"个":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}},"通":{"docs":{},"过":{"docs":{},"一":{"docs":{},"个":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}}},"<":{"docs":{},">":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}}}}}},")":{"docs":{},"：":{"docs":{},"查":{"docs":{},"询":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}},"[":{"5":{"docs":{},"]":{"docs":{},";":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0021629416005767843}}}}},"docs":{},"]":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0021629416005767843}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"=":{"docs":{},"\"":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.007209805335255948}}},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}},"b":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}},"：":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},"，":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"b":{"docs":{},"，":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"c":{"docs":{},"，":{"docs":{},"使":{"docs":{},"三":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"按":{"docs":{},"照":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"#":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":0.02857142857142857}}}}}}}}}}}}},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.01875},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.015789473684210527}},"#":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"u":{"docs":{},"p":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}}},"(":{"docs":{},"\"":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},".":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"[":{"docs":{},"]":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.0125}}},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{},".":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},"]":{"docs":{},";":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.0125}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"w":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0035671819262782403},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0028790786948176585},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.007194244604316547},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0021629416005767843},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.02631578947368421}}}}}}}},"a":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.006134969325153374}},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}},"b":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.005945303210463734},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.005758157389635317},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.009354536950420954},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.01079136690647482},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.011535688536409516},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.009111617312072893},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.007352941176470588}}},"u":{"docs":{},"e":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}},";":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.012269938650306749},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}},"y":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},"时":{"docs":{},"，":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"被":{"docs":{},"a":{"docs":{},"持":{"docs":{},"有":{"docs":{},"，":{"docs":{},"b":{"docs":{},"就":{"docs":{},"无":{"docs":{},"法":{"docs":{},"获":{"docs":{},"得":{"docs":{},"锁":{"docs":{},"了":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}},"：":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}},"调":{"docs":{},"用":{"docs":{},"时":{"docs":{},"如":{"docs":{},"果":{"docs":{},"锁":{"docs":{},"并":{"docs":{},"没":{"docs":{},"有":{"docs":{},"被":{"docs":{},"其":{"docs":{},"他":{"docs":{},"线":{"docs":{},"程":{"docs":{},"保":{"docs":{},"持":{"docs":{},"，":{"docs":{},"才":{"docs":{},"获":{"docs":{},"取":{"docs":{},"该":{"docs":{},"锁":{"docs":{},"。":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}},"块":{"docs":{},"中":{"docs":{},"加":{"docs":{},"锁":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}},"：":{"docs":{},"等":{"docs":{},"待":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}},",":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}},"=":{"1":{"5":{"3":{"3":{"9":{"6":{"3":{"6":{"1":{"1":{"0":{"0":{"3":{"docs":{},",":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{}},"1":{"4":{"docs":{},",":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{}},"docs":{}},"docs":{}},"4":{"0":{"1":{"4":{"docs":{},",":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{},"\"":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.007209805335255948}}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},",":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}}}}},"r":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.08641975308641975}},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}},"。":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}},".":{"docs":{},"s":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{},",":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.043209876543209874}}}}}}},"d":{"docs":{},"_":{"docs":{},"w":{"docs":{},"a":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":0.02857142857142857}}}}}}}}}}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}},"r":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},";":{"docs":{"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":0.02857142857142857}}}}}}}}}}}},"l":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"s":{"docs":{},"i":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.02631578947368421}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.010526315789473684}}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}},"e":{"docs":{},")":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}}},",":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0035671819262782403},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.003838771593090211}}},"=":{"docs":{},"\"":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}},"a":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0028790786948176585}}},"b":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0028790786948176585}}}}}}}},"作":{"docs":{},"为":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"即":{"docs":{},"使":{"docs":{},"我":{"docs":{},"们":{"docs":{},"改":{"docs":{},"变":{"docs":{},"了":{"docs":{},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"结":{"docs":{},"果":{"docs":{},"仍":{"docs":{},"是":{"docs":{},"同":{"docs":{},"步":{"docs":{},"的":{"docs":{},"。":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}},"：":{"docs":{},"在":{"docs":{},"给":{"docs":{},"定":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"中":{"docs":{},"，":{"docs":{},"锁":{"docs":{},"也":{"docs":{},"没":{"docs":{},"有":{"docs":{},"被":{"docs":{},"其":{"docs":{},"他":{"docs":{},"线":{"docs":{},"程":{"docs":{},"保":{"docs":{},"持":{"docs":{},"，":{"docs":{},"才":{"docs":{},"获":{"docs":{},"取":{"docs":{},"该":{"docs":{},"锁":{"docs":{},"。":{"docs":{},"就":{"docs":{},"是":{"docs":{},"说":{"docs":{},"我":{"docs":{},"想":{"docs":{},"拿":{"docs":{},"这":{"docs":{},"个":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"这":{"docs":{},"个":{"docs":{},"锁":{"docs":{},"现":{"docs":{},"在":{"docs":{},"也":{"docs":{},"没":{"docs":{},"人":{"docs":{},"拿":{"docs":{},"，":{"docs":{},"不":{"docs":{},"过":{"docs":{},"我":{"docs":{},"也":{"docs":{},"不":{"docs":{},"拿":{"docs":{},"，":{"docs":{},"我":{"docs":{},"要":{"docs":{},"等":{"docs":{},"一":{"docs":{},"会":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"等":{"docs":{},"够":{"docs":{},"了":{"docs":{},"时":{"docs":{},"间":{"docs":{},"锁":{"docs":{},"还":{"docs":{},"没":{"docs":{},"人":{"docs":{},"拿":{"docs":{},"，":{"docs":{},"我":{"docs":{},"在":{"docs":{},"把":{"docs":{},"锁":{"docs":{},"拿":{"docs":{},"走":{"docs":{},"。":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"a":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.02631578947368421}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.019024970273483946},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.025911708253358926},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.03067484662576687},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.018709073900841908},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.025179856115107913},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.022350396539293438},"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.0125},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.011029411764705883},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.042105263157894736}}}},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.03374233128834356},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}},"e":{"docs":{},"关":{"docs":{},"键":{"docs":{},"字":{"1":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}},"docs":{}}},"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":5.0030674846625764}},"介":{"docs":{},"绍":{"1":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}},"docs":{}}},"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}},"和":{"docs":{},"s":{"docs":{},"y":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"d":{"docs":{},"的":{"docs":{},"对":{"docs":{},"比":{"1":{"docs":{},".":{"3":{"docs":{},".":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}},"docs":{}}},"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.008547008547008548}},"e":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.002806361085126286}},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}}}},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"n":{"docs":{},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}}}},"docs":{}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.008547008547008548}}}},";":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}},")":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}},";":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}},"x":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.003838771593090211}},")":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}},"进":{"docs":{},"行":{"docs":{},"同":{"docs":{},"步":{"docs":{},"时":{"docs":{},"，":{"docs":{},"x":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}},"y":{"docs":{},"i":{"docs":{},"e":{"docs":{},"l":{"docs":{},"d":{"docs":{},"方":{"docs":{},"法":{"1":{"docs":{},".":{"8":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"docs":{}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}},"{":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.04994054696789536},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0671785028790787},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.06748466257668712},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.07483629560336763},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.07194244604316546},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.04700854700854701},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.07930785868781542},"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.012345679012345678},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.09339407744874716},"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":0.02857142857142857},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.0375},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.0625},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.06842105263157895}},".":{"docs":{},".":{"docs":{},".":{"docs":{},"}":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0028790786948176585},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}},"中":{"docs":{},"的":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"来":{"docs":{},"调":{"docs":{},"用":{"docs":{},"的":{"docs":{},"，":{"docs":{},"比":{"docs":{},"如":{"docs":{},"：":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"w":{"docs":{},"a":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},"，":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"i":{"docs":{},"f":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},"等":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"这":{"docs":{},"些":{"docs":{},"方":{"docs":{},"法":{"docs":{},"必":{"docs":{},"须":{"docs":{},"在":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"}":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}},"同":{"docs":{},"步":{"docs":{},"代":{"docs":{},"码":{"docs":{},"块":{"docs":{},"时":{"docs":{},"呈":{"docs":{},"同":{"docs":{},"步":{"docs":{},"效":{"docs":{},"果":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}}}}}}}}}}}}},"\"":{"2":{"0":{"0":{"0":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"}":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.041617122473246136},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.05662188099808062},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.05521472392638037},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.06641721234798878},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.06115107913669065},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.04700854700854701},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.07065609228550829},"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.012345679012345678},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.09339407744874716},"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":0.02857142857142857},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.03125},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.05514705882352941},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.05789473684210526}},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0028790786948176585},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.004325883201153569},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.010526315789473684}}}}},"三":{"docs":{},"个":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"中":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}},"一":{"docs":{},"起":{"docs":{},"给":{"docs":{},"出":{"docs":{},"。":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}},"有":{"docs":{},"以":{"docs":{},"下":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}},"预":{"docs":{},"设":{"docs":{},"的":{"docs":{},"优":{"docs":{},"先":{"docs":{},"级":{"docs":{},"等":{"docs":{},"级":{"docs":{},"：":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}},"具":{"docs":{},"有":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"的":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274},"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{},"并":{"docs":{},"没":{"docs":{},"有":{"docs":{},"修":{"docs":{},"改":{"docs":{},"正":{"docs":{},"在":{"docs":{},"运":{"docs":{},"行":{"docs":{},"的":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"值":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"子":{"docs":{},"线":{"docs":{},"程":{"docs":{},"只":{"docs":{},"能":{"docs":{},"取":{"docs":{},"得":{"docs":{},"旧":{"docs":{},"值":{"docs":{},"。":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}}}}}},"线":{"docs":{},"程":{"docs":{},"被":{"docs":{},"中":{"docs":{},"断":{"docs":{},"了":{"docs":{},"就":{"docs":{},"立":{"docs":{},"即":{"docs":{},"会":{"docs":{},"抛":{"docs":{},"异":{"docs":{},"常":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"线":{"docs":{},"程":{"docs":{},"就":{"docs":{},"真":{"docs":{},"的":{"docs":{},"断":{"docs":{},"了":{"docs":{},"，":{"docs":{},"用":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}}}}},"方":{"docs":{},"法":{"docs":{},"：":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}},"只":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"这":{"docs":{},"时":{"docs":{},"会":{"docs":{},"涉":{"docs":{},"及":{"docs":{},"到":{"docs":{},"上":{"docs":{},"一":{"docs":{},"节":{"docs":{},"中":{"docs":{},"讲":{"docs":{},"到":{"docs":{},"的":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}},"通":{"docs":{},"知":{"docs":{},"了":{"docs":{},"所":{"docs":{},"有":{"docs":{},"等":{"docs":{},"待":{"docs":{},"线":{"docs":{},"程":{"docs":{},"，":{"docs":{},"两":{"docs":{},"个":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}},"过":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}},"存":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"不":{"docs":{},"过":{"docs":{},"如":{"docs":{},"果":{"docs":{},"在":{"docs":{},"子":{"docs":{},"线":{"docs":{},"程":{"docs":{},"取":{"docs":{},"得":{"docs":{},"值":{"docs":{},"的":{"docs":{},"同":{"docs":{},"时":{"docs":{},"，":{"docs":{},"父":{"docs":{},"线":{"docs":{},"程":{"docs":{},"修":{"docs":{},"改":{"docs":{},"了":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}}}}}}}}}}}}}}}}},"寻":{"docs":{},"找":{"docs":{},"值":{"docs":{},"并":{"docs":{},"返":{"docs":{},"回":{"docs":{},"。":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}},"新":{"docs":{},"增":{"docs":{},"加":{"docs":{},"的":{"docs":{},"。":{"docs":{},"我":{"docs":{},"们":{"docs":{},"知":{"docs":{},"道":{"docs":{},"可":{"docs":{},"以":{"docs":{},"使":{"docs":{},"用":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}},"，":{"docs":{},"从":{"docs":{},"而":{"docs":{},"实":{"docs":{},"现":{"docs":{},"有":{"docs":{},"选":{"docs":{},"择":{"docs":{},"地":{"docs":{},"进":{"docs":{},"行":{"docs":{},"线":{"docs":{},"程":{"docs":{},"通":{"docs":{},"知":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"可":{"docs":{},"以":{"docs":{},"更":{"docs":{},"灵":{"docs":{},"活":{"docs":{},"的":{"docs":{},"调":{"docs":{},"度":{"docs":{},"线":{"docs":{},"程":{"docs":{},"。":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"（":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"）":{"docs":{},"：":{"docs":{"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":0.02857142857142857}}}}}}}}}}}}}}}}}},"之":{"docs":{},"后":{"docs":{},"线":{"docs":{},"程":{"docs":{},"并":{"docs":{},"不":{"docs":{},"会":{"docs":{},"停":{"docs":{},"止":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}},"在":{"docs":{},"调":{"docs":{},"用":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"就":{"docs":{},"直":{"docs":{},"接":{"docs":{},"返":{"docs":{},"回":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"了":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"通":{"docs":{},"过":{"docs":{},"一":{"docs":{},"个":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}},"也":{"docs":{},"在":{"docs":{},"作":{"docs":{},"废":{"docs":{},"方":{"docs":{},"法":{"docs":{},"的":{"docs":{},"范":{"docs":{},"围":{"docs":{},"中":{"docs":{},"。":{"docs":{},"使":{"docs":{},"用":{"docs":{},"不":{"docs":{},"当":{"docs":{},"会":{"docs":{},"导":{"docs":{},"致":{"docs":{},"如":{"docs":{},"下":{"docs":{},"两":{"docs":{},"个":{"docs":{},"问":{"docs":{},"题":{"docs":{},"：":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}}}}}}}},"就":{"docs":{},"是":{"docs":{},"说":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}},"，":{"docs":{},"对":{"docs":{},"于":{"docs":{},"共":{"docs":{},"享":{"docs":{},"数":{"docs":{},"据":{"docs":{},"，":{"docs":{},"其":{"docs":{},"读":{"docs":{},"写":{"docs":{},"必":{"docs":{},"须":{"docs":{},"是":{"docs":{},"同":{"docs":{},"步":{"docs":{},"的":{"docs":{},"，":{"docs":{},"多":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"可":{"docs":{},"以":{"docs":{},"同":{"docs":{},"时":{"docs":{},"读":{"docs":{},"取":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"只":{"docs":{},"要":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"在":{"docs":{},"执":{"docs":{},"行":{"docs":{},"写":{"docs":{},"入":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"其":{"docs":{},"他":{"docs":{},"线":{"docs":{},"程":{"docs":{},"就":{"docs":{},"不":{"docs":{},"能":{"docs":{},"再":{"docs":{},"进":{"docs":{},"行":{"docs":{},"任":{"docs":{},"何":{"docs":{},"读":{"docs":{},"写":{"docs":{},"操":{"docs":{},"作":{"docs":{},"了":{"docs":{},"，":{"docs":{},"必":{"docs":{},"须":{"docs":{},"等":{"docs":{},"待":{"docs":{},"执":{"docs":{},"行":{"docs":{},"写":{"docs":{},"入":{"docs":{},"操":{"docs":{},"作":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"执":{"docs":{},"行":{"docs":{},"完":{"docs":{},"才":{"docs":{},"行":{"docs":{},"。":{"docs":{},"(":{"docs":{},"在":{"docs":{},"这":{"docs":{},"里":{"docs":{},"我":{"docs":{},"们":{"docs":{},"先":{"docs":{},"不":{"docs":{},"考":{"docs":{},"虑":{"docs":{},"效":{"docs":{},"率":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"只":{"docs":{},"保":{"docs":{},"证":{"docs":{},"结":{"docs":{},"果":{"docs":{},"正":{"docs":{},"确":{"docs":{},")":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"o":{"docs":{},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}},"：":{"docs":{},"s":{"docs":{},"y":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}},"是":{"docs":{},"用":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}},"可":{"docs":{},"以":{"docs":{},"指":{"docs":{},"定":{"docs":{},"锁":{"docs":{},"对":{"docs":{},"象":{"docs":{},"为":{"docs":{},"其":{"docs":{},"他":{"docs":{},"自":{"docs":{},"定":{"docs":{},"义":{"docs":{},"的":{"docs":{},"对":{"docs":{},"象":{"docs":{},"，":{"docs":{},"注":{"docs":{},"意":{"docs":{},"：":{"docs":{},"如":{"docs":{},"果":{"docs":{},"要":{"docs":{},"进":{"docs":{},"行":{"docs":{},"同":{"docs":{},"步":{"docs":{},"的":{"docs":{},"多":{"docs":{},"个":{"docs":{},"代":{"docs":{},"码":{"docs":{},"块":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"这":{"docs":{},"些":{"docs":{},"需":{"docs":{},"要":{"docs":{},"进":{"docs":{},"行":{"docs":{},"同":{"docs":{},"步":{"docs":{},"的":{"docs":{},"多":{"docs":{},"个":{"docs":{},"同":{"docs":{},"步":{"docs":{},"代":{"docs":{},"码":{"docs":{},"块":{"docs":{},"的":{"docs":{},"锁":{"docs":{},"必":{"docs":{},"须":{"docs":{},"是":{"docs":{},"同":{"docs":{},"一":{"docs":{},"个":{"docs":{},"对":{"docs":{},"象":{"docs":{},"，":{"docs":{},"即":{"docs":{},"s":{"docs":{},"y":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"进":{"docs":{},"入":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}},"是":{"docs":{},"需":{"docs":{},"要":{"docs":{},"锁":{"docs":{},"的":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"线":{"docs":{},"程":{"docs":{},"无":{"docs":{},"法":{"docs":{},"再":{"docs":{},"次":{"docs":{},"获":{"docs":{},"得":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"它":{"docs":{},"将":{"docs":{},"永":{"docs":{},"远":{"docs":{},"无":{"docs":{},"法":{"docs":{},"执":{"docs":{},"行":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"了":{"docs":{},"(":{"docs":{},"就":{"docs":{},"是":{"docs":{},"在":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}},")":{"docs":{},"，":{"docs":{},"它":{"docs":{},"就":{"docs":{},"会":{"docs":{},"一":{"docs":{},"直":{"docs":{},"卡":{"docs":{},"在":{"docs":{},"那":{"docs":{},"，":{"docs":{},"还":{"docs":{},"不":{"docs":{},"放":{"docs":{},"开":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"导":{"docs":{},"致":{"docs":{},"其":{"docs":{},"他":{"docs":{},"线":{"docs":{},"程":{"docs":{},"无":{"docs":{},"法":{"docs":{},"访":{"docs":{},"问":{"docs":{},"公":{"docs":{},"共":{"docs":{},"同":{"docs":{},"步":{"docs":{},"对":{"docs":{},"象":{"docs":{},"。":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"。":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"程":{"docs":{},"序":{"docs":{},"就":{"docs":{},"卡":{"docs":{},"住":{"docs":{},"了":{"docs":{},"…":{"docs":{},"…":{"docs":{},"，":{"docs":{},"不":{"docs":{},"过":{"docs":{},"如":{"docs":{},"果":{"docs":{},"在":{"docs":{},"调":{"docs":{},"用":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}},"介":{"docs":{},"绍":{"docs":{},"了":{"docs":{},"优":{"docs":{},"先":{"docs":{},"级":{"docs":{},"，":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"感":{"docs":{},"觉":{"docs":{},"类":{"docs":{},"似":{"docs":{},"于":{"docs":{},"达":{"docs":{},"到":{"docs":{},"降":{"docs":{},"低":{"docs":{},"自":{"docs":{},"己":{"docs":{},"的":{"docs":{},"优":{"docs":{},"先":{"docs":{},"级":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"：":{"docs":{},"y":{"docs":{},"i":{"docs":{},"e":{"docs":{},"l":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},"。":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"优":{"docs":{},"先":{"docs":{},"级":{"docs":{},"具":{"docs":{},"有":{"docs":{},"随":{"docs":{},"机":{"docs":{},"性":{"docs":{},"：":{"docs":{},"优":{"docs":{},"先":{"docs":{},"级":{"docs":{},"高":{"docs":{},"只":{"docs":{},"是":{"docs":{},"抢":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}},"的":{"docs":{},"特":{"docs":{},"性":{"1":{"docs":{},".":{"7":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"docs":{}}},"docs":{}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}},"会":{"docs":{},"导":{"docs":{},"致":{"docs":{},"怎":{"docs":{},"样":{"docs":{},"的":{"docs":{},"异":{"docs":{},"常":{"docs":{},"呢":{"docs":{},"？":{"docs":{},"我":{"docs":{},"们":{"docs":{},"来":{"docs":{},"看":{"docs":{},"下":{"docs":{},"面":{"docs":{},"这":{"docs":{},"个":{"docs":{},"例":{"docs":{},"子":{"docs":{},"：":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}}}},"抛":{"docs":{},"出":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"出":{"docs":{},"现":{"docs":{},"阻":{"docs":{},"塞":{"docs":{},"。":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}},"放":{"docs":{},"开":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"s":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}},"遇":{"docs":{},"到":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"：":{"docs":{},"全":{"docs":{},"部":{"docs":{},"线":{"docs":{},"程":{"docs":{},"进":{"docs":{},"入":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}},"继":{"docs":{},"续":{"docs":{},"执":{"docs":{},"行":{"docs":{},"。":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}},"释":{"docs":{},"放":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"s":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{},"(":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}}}}}}}},"返":{"docs":{},"回":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"的":{"docs":{},"结":{"docs":{},"果":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}}}},"发":{"docs":{},"现":{"docs":{},"这":{"docs":{},"个":{"docs":{},"任":{"docs":{},"务":{"docs":{},"过":{"docs":{},"期":{"docs":{},"了":{"docs":{},"，":{"docs":{},"并":{"docs":{},"立":{"docs":{},"刻":{"docs":{},"执":{"docs":{},"行":{"docs":{},"它":{"docs":{},"，":{"docs":{},"不":{"docs":{},"过":{"docs":{},"这":{"docs":{},"会":{"docs":{},"导":{"docs":{},"致":{"docs":{},"这":{"docs":{},"个":{"docs":{},"任":{"docs":{},"务":{"docs":{},"执":{"docs":{},"行":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"和":{"docs":{},"设":{"docs":{},"定":{"docs":{},"的":{"docs":{},"不":{"docs":{},"一":{"docs":{},"样":{"docs":{},"。":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"被":{"docs":{},"按":{"docs":{},"照":{"docs":{},"调":{"docs":{},"用":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}},"传":{"docs":{},"入":{"docs":{},"一":{"docs":{},"个":{"docs":{},"已":{"docs":{},"经":{"docs":{},"创":{"docs":{},"建":{"docs":{},"好":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"对":{"docs":{},"象":{"docs":{},"，":{"docs":{},"这":{"docs":{},"是":{"docs":{},"因":{"docs":{},"为":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}}},"使":{"docs":{},"用":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.007194244604316547},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}},"j":{"docs":{},"p":{"docs":{},"s":{"docs":{},"命":{"docs":{},"令":{"docs":{},"得":{"docs":{},"到":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}},"一":{"docs":{},"个":{"docs":{},"主":{"docs":{},"内":{"docs":{},"存":{"docs":{},"来":{"docs":{},"保":{"docs":{},"存":{"docs":{},"变":{"docs":{},"量":{"docs":{},"当":{"docs":{},"前":{"docs":{},"值":{"docs":{},"，":{"docs":{},"而":{"docs":{},"每":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"则":{"docs":{},"有":{"docs":{},"其":{"docs":{},"独":{"docs":{},"立":{"docs":{},"的":{"docs":{},"工":{"docs":{},"作":{"docs":{},"内":{"docs":{},"存":{"docs":{},"。":{"docs":{},"线":{"docs":{},"程":{"docs":{},"访":{"docs":{},"问":{"docs":{},"变":{"docs":{},"量":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"会":{"docs":{},"将":{"docs":{},"变":{"docs":{},"量":{"docs":{},"的":{"docs":{},"值":{"docs":{},"拷":{"docs":{},"贝":{"docs":{},"到":{"docs":{},"自":{"docs":{},"己":{"docs":{},"的":{"docs":{},"工":{"docs":{},"作":{"docs":{},"内":{"docs":{},"存":{"docs":{},"中":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"，":{"docs":{},"当":{"docs":{},"线":{"docs":{},"程":{"docs":{},"对":{"docs":{},"自":{"docs":{},"己":{"docs":{},"工":{"docs":{},"作":{"docs":{},"内":{"docs":{},"存":{"docs":{},"中":{"docs":{},"的":{"docs":{},"变":{"docs":{},"量":{"docs":{},"进":{"docs":{},"行":{"docs":{},"操":{"docs":{},"作":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"就":{"docs":{},"造":{"docs":{},"成":{"docs":{},"了":{"docs":{},"工":{"docs":{},"作":{"docs":{},"内":{"docs":{},"存":{"docs":{},"中":{"docs":{},"的":{"docs":{},"变":{"docs":{},"量":{"docs":{},"拷":{"docs":{},"贝":{"docs":{},"的":{"docs":{},"值":{"docs":{},"与":{"docs":{},"主":{"docs":{},"内":{"docs":{},"存":{"docs":{},"中":{"docs":{},"的":{"docs":{},"变":{"docs":{},"量":{"docs":{},"值":{"docs":{},"不":{"docs":{},"同":{"docs":{},"。":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"原":{"docs":{},"子":{"docs":{},"类":{"docs":{},"进":{"docs":{},"行":{"docs":{},"i":{"docs":{},"+":{"docs":{},"+":{"docs":{},"操":{"docs":{},"作":{"1":{"docs":{},".":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}},"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}},"等":{"docs":{},"待":{"docs":{},"/":{"docs":{},"通":{"docs":{},"知":{"docs":{},"机":{"docs":{},"制":{"docs":{},"的":{"docs":{},"程":{"docs":{},"序":{"1":{"docs":{},".":{"3":{"docs":{},".":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"docs":{}}},"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"实":{"docs":{},"现":{"docs":{},"线":{"docs":{},"程":{"docs":{},"的":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"执":{"docs":{},"行":{"2":{"docs":{},".":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}},"饿":{"docs":{},"汉":{"docs":{},"模":{"docs":{},"式":{"docs":{},"，":{"docs":{},"倒":{"docs":{},"是":{"docs":{},"没":{"docs":{},"有":{"docs":{},"线":{"docs":{},"程":{"docs":{},"安":{"docs":{},"全":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"不":{"docs":{},"够":{"docs":{},"要":{"docs":{},"是":{"docs":{},"我":{"docs":{},"们":{"docs":{},"从":{"docs":{},"头":{"docs":{},"到":{"docs":{},"尾":{"docs":{},"都":{"docs":{},"用":{"docs":{},"不":{"docs":{},"到":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"修":{"docs":{},"饰":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"在":{"docs":{},"这":{"docs":{},"个":{"docs":{},"方":{"docs":{},"法":{"docs":{},"里":{"docs":{},"面":{"docs":{},"调":{"docs":{},"用":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},".":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},".":{"docs":{},"s":{"docs":{},"u":{"docs":{},"s":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{},"即":{"docs":{},"可":{"docs":{},"，":{"docs":{},"不":{"docs":{},"过":{"docs":{},"有":{"docs":{},"一":{"docs":{},"些":{"docs":{},"比":{"docs":{},"较":{"docs":{},"隐":{"docs":{},"蔽":{"docs":{},"的":{"docs":{},"同":{"docs":{},"步":{"docs":{},"块":{"docs":{},"，":{"docs":{},"也":{"docs":{},"可":{"docs":{},"能":{"docs":{},"会":{"docs":{},"导":{"docs":{},"致":{"docs":{},"独":{"docs":{},"占":{"docs":{},"公":{"docs":{},"共":{"docs":{},"同":{"docs":{},"步":{"docs":{},"对":{"docs":{},"象":{"docs":{},"，":{"docs":{},"使":{"docs":{},"得":{"docs":{},"程":{"docs":{},"序":{"docs":{},"卡":{"docs":{},"住":{"docs":{},"。":{"docs":{},"例":{"docs":{},"子":{"docs":{},"如":{"docs":{},"下":{"docs":{},"：":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"的":{"docs":{},"部":{"docs":{},"分":{"docs":{},"的":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}},"变":{"docs":{},"量":{"docs":{},"，":{"docs":{},"为":{"docs":{},"了":{"docs":{},"获":{"docs":{},"得":{"docs":{},"最":{"docs":{},"佳":{"docs":{},"速":{"docs":{},"度":{"docs":{},"，":{"docs":{},"允":{"docs":{},"许":{"docs":{},"线":{"docs":{},"程":{"docs":{},"保":{"docs":{},"存":{"docs":{},"共":{"docs":{},"享":{"docs":{},"成":{"docs":{},"员":{"docs":{},"变":{"docs":{},"量":{"docs":{},"的":{"docs":{},"私":{"docs":{},"有":{"docs":{},"拷":{"docs":{},"贝":{"docs":{},"，":{"docs":{},"而":{"docs":{},"且":{"docs":{},"只":{"docs":{},"当":{"docs":{},"线":{"docs":{},"程":{"docs":{},"进":{"docs":{},"入":{"docs":{},"或":{"docs":{},"者":{"docs":{},"离":{"docs":{},"开":{"docs":{},"同":{"docs":{},"步":{"docs":{},"代":{"docs":{},"码":{"docs":{},"块":{"docs":{},"时":{"docs":{},"才":{"docs":{},"与":{"docs":{},"共":{"docs":{},"享":{"docs":{},"成":{"docs":{},"员":{"docs":{},"变":{"docs":{},"量":{"docs":{},"的":{"docs":{},"原":{"docs":{},"始":{"docs":{},"值":{"docs":{},"对":{"docs":{},"比":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"说":{"docs":{},"，":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"之":{"docs":{},"后":{"docs":{},"：":{"docs":{},"(":{"docs":{},"修":{"docs":{},"改":{"docs":{},"文":{"docs":{},"件":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}},"改":{"docs":{},"文":{"docs":{},"件":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"为":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}},"这":{"docs":{},"里":{"docs":{},"：":{"docs":{},"i":{"docs":{},"f":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}},"停":{"docs":{},"止":{"docs":{},"线":{"docs":{},"程":{"1":{"docs":{},".":{"5":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"docs":{}}},"docs":{}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}},"关":{"docs":{},"键":{"docs":{},"字":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"来":{"docs":{},"修":{"docs":{},"饰":{"docs":{},"任":{"docs":{},"意":{"docs":{},"对":{"docs":{},"象":{"docs":{},"和":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"作":{"docs":{},"用":{"docs":{},"就":{"docs":{},"是":{"docs":{},"给":{"docs":{},"它":{"docs":{},"们":{"docs":{},"加":{"docs":{},"上":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"当":{"docs":{},"多":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"要":{"docs":{},"使":{"docs":{},"用":{"docs":{},"这":{"docs":{},"个":{"docs":{},"对":{"docs":{},"象":{"docs":{},"或":{"docs":{},"调":{"docs":{},"用":{"docs":{},"这":{"docs":{},"个":{"docs":{},"方":{"docs":{},"法":{"docs":{},"时":{"docs":{},"，":{"docs":{},"要":{"docs":{},"以":{"docs":{},"排":{"docs":{},"队":{"docs":{},"的":{"docs":{},"方":{"docs":{},"式":{"docs":{},"进":{"docs":{},"行":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"在":{"docs":{},"同":{"docs":{},"一":{"docs":{},"时":{"docs":{},"刻":{"docs":{},"只":{"docs":{},"能":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"拿":{"docs":{},"到":{"docs":{},"这":{"docs":{},"把":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"其":{"docs":{},"他":{"docs":{},"线":{"docs":{},"程":{"docs":{},"在":{"docs":{},"尝":{"docs":{},"试":{"docs":{},"拿":{"docs":{},"到":{"docs":{},"这":{"docs":{},"把":{"docs":{},"锁":{"docs":{},"。":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"解":{"docs":{},"决":{"docs":{},"变":{"docs":{},"量":{"docs":{},"在":{"docs":{},"多":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"之":{"docs":{},"间":{"docs":{},"的":{"docs":{},"可":{"docs":{},"见":{"docs":{},"性":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"它":{"docs":{},"可":{"docs":{},"以":{"docs":{},"让":{"docs":{},"多":{"docs":{},"线":{"docs":{},"程":{"docs":{},"读":{"docs":{},"取":{"docs":{},"共":{"docs":{},"享":{"docs":{},"变":{"docs":{},"量":{"docs":{},"时":{"docs":{},"可":{"docs":{},"以":{"docs":{},"获":{"docs":{},"得":{"docs":{},"该":{"docs":{},"变":{"docs":{},"量":{"docs":{},"的":{"docs":{},"最":{"docs":{},"新":{"docs":{},"值":{"docs":{},"。":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"加":{"docs":{},"到":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}}},"，":{"docs":{},"s":{"docs":{},"y":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}},"实":{"docs":{},"现":{"docs":{},"线":{"docs":{},"程":{"docs":{},"间":{"docs":{},"的":{"docs":{},"互":{"docs":{},"斥":{"docs":{},"，":{"docs":{},"使":{"docs":{},"用":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}},"判":{"docs":{},"断":{"docs":{},"当":{"docs":{},"前":{"docs":{},"线":{"docs":{},"程":{"docs":{},"是":{"docs":{},"否":{"docs":{},"处":{"docs":{},"在":{"docs":{},"活":{"docs":{},"动":{"docs":{},"状":{"docs":{},"态":{"docs":{},"。":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}},"线":{"docs":{},"程":{"docs":{},"是":{"docs":{},"否":{"docs":{},"为":{"docs":{},"停":{"docs":{},"止":{"docs":{},"状":{"docs":{},"态":{"1":{"docs":{},".":{"5":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"docs":{}}},"docs":{}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}},"处":{"docs":{},"，":{"docs":{},"两":{"docs":{},"个":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}},"包":{"docs":{},"裹":{"docs":{},"着":{"docs":{},"另":{"docs":{},"一":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"对":{"docs":{},"象":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}},"取":{"docs":{},"得":{"docs":{},"线":{"docs":{},"程":{"docs":{},"的":{"docs":{},"唯":{"docs":{},"一":{"docs":{},"标":{"docs":{},"识":{"docs":{},"。":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}},"值":{"docs":{},"时":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"安":{"docs":{},"全":{"docs":{},"问":{"docs":{},"题":{"docs":{},"(":{"docs":{},"脏":{"docs":{},"读":{"docs":{},")":{"1":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"docs":{}}},"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}},"消":{"docs":{},"任":{"docs":{},"务":{"docs":{},"执":{"docs":{},"行":{"1":{"docs":{},".":{"7":{"docs":{},".":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}},"docs":{}}},"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}},"受":{"docs":{},"制":{"docs":{},"于":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}},"只":{"docs":{},"是":{"docs":{},"给":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}},"线":{"docs":{},"程":{"docs":{},"打":{"docs":{},"上":{"docs":{},"了":{"docs":{},"一":{"docs":{},"个":{"docs":{},"终":{"docs":{},"止":{"docs":{},"的":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}},"能":{"docs":{},"保":{"docs":{},"证":{"docs":{},"数":{"docs":{},"据":{"docs":{},"的":{"docs":{},"可":{"docs":{},"见":{"docs":{},"性":{"docs":{},"，":{"docs":{},"不":{"docs":{},"能":{"docs":{},"保":{"docs":{},"证":{"docs":{},"数":{"docs":{},"据":{"docs":{},"的":{"docs":{},"原":{"docs":{},"子":{"docs":{},"性":{"docs":{},"，":{"docs":{},"而":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}}}}}}}}}}}}}},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"添":{"docs":{},"加":{"docs":{},"线":{"docs":{},"程":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}},"输":{"docs":{},"出":{"docs":{},"一":{"docs":{},"行":{"docs":{},"就":{"docs":{},"永":{"docs":{},"远":{"docs":{},"卡":{"docs":{},"住":{"docs":{},"了":{"docs":{},"，":{"docs":{},"即":{"docs":{},"使":{"docs":{},"在":{"docs":{},"a":{"docs":{},"w":{"docs":{},"a":{"docs":{},"i":{"docs":{},"t":{"docs":{},"中":{"docs":{},"，":{"docs":{},"线":{"docs":{},"程":{"docs":{},"也":{"docs":{},"不":{"docs":{},"会":{"docs":{},"被":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"u":{"docs":{},"p":{"docs":{},"t":{"docs":{},"中":{"docs":{},"断":{"docs":{},"掉":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"可":{"docs":{},"以":{"docs":{},"看":{"docs":{},"出":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"不":{"docs":{},"仅":{"docs":{},"可":{"docs":{},"以":{"docs":{},"创":{"docs":{},"建":{"docs":{},"一":{"docs":{},"个":{"docs":{},"全":{"docs":{},"新":{"docs":{},"的":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}},"指":{"docs":{},"定":{"docs":{},"锁":{"docs":{},"对":{"docs":{},"象":{"docs":{},"为":{"docs":{},"当":{"docs":{},"前":{"docs":{},"对":{"docs":{},"象":{"docs":{},"本":{"docs":{},"身":{"docs":{},"，":{"docs":{},"即":{"docs":{},"s":{"docs":{},"y":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}},"通":{"docs":{},"过":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}},"如":{"docs":{},"下":{"docs":{},"代":{"docs":{},"码":{"docs":{},"证":{"docs":{},"明":{"docs":{},"：":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}},"保":{"docs":{},"证":{"docs":{},"数":{"docs":{},"据":{"docs":{},"的":{"docs":{},"原":{"docs":{},"子":{"docs":{},"性":{"docs":{},"，":{"docs":{},"并":{"docs":{},"可":{"docs":{},"以":{"docs":{},"间":{"docs":{},"接":{"docs":{},"保":{"docs":{},"证":{"docs":{},"数":{"docs":{},"据":{"docs":{},"的":{"docs":{},"可":{"docs":{},"见":{"docs":{},"性":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}}}}}}}}}}}}}},"用":{"docs":{},"来":{"docs":{},"修":{"docs":{},"饰":{"docs":{},"方":{"docs":{},"法":{"docs":{},"和":{"docs":{},"代":{"docs":{},"码":{"docs":{},"块":{"docs":{},"。":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}},"一":{"docs":{},"个":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}},"达":{"docs":{},"到":{"docs":{},"与":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}},"将":{"docs":{},"任":{"docs":{},"一":{"docs":{},"个":{"docs":{},"对":{"docs":{},"象":{"docs":{},"作":{"docs":{},"为":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}},"在":{"docs":{},"子":{"docs":{},"线":{"docs":{},"程":{"docs":{},"中":{"docs":{},"取":{"docs":{},"得":{"docs":{},"父":{"docs":{},"线":{"docs":{},"程":{"docs":{},"在":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}}},"发":{"docs":{},"现":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}},"，":{"docs":{},"b":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}},"仍":{"docs":{},"然":{"docs":{},"好":{"docs":{},"好":{"docs":{},"运":{"docs":{},"行":{"docs":{},"着":{"docs":{},"呢":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}},"选":{"docs":{},"择":{"docs":{},"创":{"docs":{},"建":{"docs":{},"公":{"docs":{},"平":{"docs":{},"锁":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}},"后":{"docs":{},"会":{"docs":{},"将":{"docs":{},"状":{"docs":{},"态":{"docs":{},"标":{"docs":{},"志":{"docs":{},"设":{"docs":{},"为":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"用":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}},"就":{"docs":{},"会":{"docs":{},"进":{"docs":{},"入":{"docs":{},"阻":{"docs":{},"塞":{"docs":{},"队":{"docs":{},"列":{"docs":{},"，":{"docs":{},"等":{"docs":{},"待":{"docs":{},"又":{"docs":{},"其":{"docs":{},"他":{"docs":{},"线":{"docs":{},"程":{"docs":{},"调":{"docs":{},"用":{"docs":{},"了":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}},"启":{"docs":{},"动":{"docs":{},"线":{"docs":{},"程":{"docs":{},"：":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}}}}},"还":{"docs":{},"是":{"docs":{},"要":{"docs":{},"依":{"docs":{},"靠":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"类":{"docs":{},"的":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}},"和":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0035671819262782403},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.002883922134102379}},"遇":{"docs":{},"到":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}},"在":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274},"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}},"了":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}},"用":{"docs":{},"一":{"docs":{},"些":{"docs":{},"其":{"docs":{},"他":{"docs":{},"办":{"docs":{},"法":{"docs":{},"终":{"docs":{},"止":{"docs":{},"线":{"docs":{},"程":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"我":{"docs":{},"们":{"docs":{},"要":{"docs":{},"能":{"docs":{},"判":{"docs":{},"断":{"docs":{},"一":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"是":{"docs":{},"否":{"docs":{},"是":{"docs":{},"停":{"docs":{},"止":{"docs":{},"状":{"docs":{},"态":{"docs":{},"，":{"docs":{},"即":{"docs":{},"检":{"docs":{},"查":{"docs":{},"线":{"docs":{},"程":{"docs":{},"是":{"docs":{},"否":{"docs":{},"被":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"设":{"docs":{},"置":{"docs":{},"完":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}},"t":{"docs":{},"h":{"docs":{},"a":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}},"这":{"docs":{},"种":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"我":{"docs":{},"们":{"docs":{},"运":{"docs":{},"行":{"docs":{},"如":{"docs":{},"下":{"docs":{},"结":{"docs":{},"构":{"docs":{},"的":{"docs":{},"的":{"docs":{},"代":{"docs":{},"码":{"docs":{},"程":{"docs":{},"序":{"docs":{},"将":{"docs":{},"永":{"docs":{},"远":{"docs":{},"不":{"docs":{},"会":{"docs":{},"停":{"docs":{},"止":{"docs":{},"：":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"里":{"docs":{},"运":{"docs":{},"行":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},"并":{"docs":{},"没":{"docs":{},"有":{"docs":{},"修":{"docs":{},"改":{"docs":{},"正":{"docs":{},"在":{"docs":{},"运":{"docs":{},"行":{"docs":{},"的":{"docs":{},"t":{"docs":{},"h":{"docs":{},"a":{"docs":{},"中":{"docs":{},"的":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},".":{"docs":{},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{},"f":{"docs":{},"l":{"docs":{},"a":{"docs":{},"g":{"docs":{},"的":{"docs":{},"值":{"docs":{},"！":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"调":{"docs":{},"用":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"方":{"docs":{},"法":{"docs":{},"前":{"docs":{},"先":{"docs":{},"不":{"docs":{},"创":{"docs":{},"建":{"docs":{},"对":{"docs":{},"象":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}}}}}}},"静":{"docs":{},"态":{"docs":{},"代":{"docs":{},"码":{"docs":{},"块":{"docs":{},"中":{"docs":{},"实":{"docs":{},"例":{"docs":{},"化":{"docs":{},"对":{"docs":{},"象":{"docs":{},"，":{"docs":{},"感":{"docs":{},"觉":{"docs":{},"和":{"docs":{},"饿":{"docs":{},"汉":{"docs":{},"模":{"docs":{},"式":{"docs":{},"没":{"docs":{},"啥":{"docs":{},"区":{"docs":{},"别":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}}}}}}}},"重":{"docs":{},"写":{"docs":{},"的":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"a":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"方":{"docs":{},"法":{"docs":{},"中":{"docs":{},"处":{"docs":{},"理":{"docs":{},"组":{"docs":{},"内":{"docs":{},"线":{"docs":{},"程":{"docs":{},"的":{"docs":{},"中":{"docs":{},"断":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"组":{"docs":{},"内":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"跑":{"docs":{},"出":{"docs":{},"来":{"docs":{},"异":{"docs":{},"常":{"docs":{},"，":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"块":{"docs":{},"中":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}},"进":{"docs":{},"行":{"docs":{},"一":{"docs":{},"些":{"docs":{},"回":{"docs":{},"滚":{"docs":{},"操":{"docs":{},"作":{"docs":{},"的":{"docs":{},"，":{"docs":{},"而":{"docs":{},"用":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}},"，":{"docs":{},"并":{"docs":{},"清":{"docs":{},"楚":{"docs":{},"停":{"docs":{},"止":{"docs":{},"状":{"docs":{},"态":{"docs":{},"值":{"docs":{},"使":{"docs":{},"之":{"docs":{},"为":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}},"会":{"docs":{},"捕":{"docs":{},"捉":{"docs":{},"到":{"docs":{},"异":{"docs":{},"常":{"docs":{},"，":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"b":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}}}}}}}},"如":{"docs":{},"果":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}},"一":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"在":{"docs":{},"同":{"docs":{},"步":{"docs":{},"块":{"docs":{},"中":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}},"不":{"docs":{},"加":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}},"可":{"docs":{},"锁":{"docs":{},"重":{"docs":{},"入":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"会":{"docs":{},"造":{"docs":{},"成":{"docs":{},"死":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"造":{"docs":{},"成":{"docs":{},"死":{"docs":{},"锁":{"docs":{},"的":{"docs":{},"原":{"docs":{},"因":{"docs":{},"如":{"docs":{},"下":{"docs":{},"：":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}},"在":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}},"等":{"docs":{},"待":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"提":{"docs":{},"前":{"docs":{},"结":{"docs":{},"束":{"docs":{},"，":{"docs":{},"j":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}}}}}}}}}}}}},"我":{"docs":{},"们":{"docs":{},"在":{"docs":{},"这":{"docs":{},"里":{"docs":{},"加":{"docs":{},"一":{"docs":{},"个":{"docs":{},"延":{"docs":{},"时":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"线":{"docs":{},"程":{"docs":{},"一":{"docs":{},"进":{"docs":{},"入":{"docs":{},"到":{"docs":{},"i":{"docs":{},"f":{"docs":{},"代":{"docs":{},"码":{"docs":{},"块":{"docs":{},"时":{"docs":{},"，":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"何":{"docs":{},"产":{"docs":{},"生":{"docs":{},"死":{"docs":{},"锁":{"1":{"docs":{},".":{"7":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"docs":{}}},"docs":{}}},"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}},"检":{"docs":{},"测":{"docs":{},"死":{"docs":{},"锁":{"1":{"docs":{},".":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}},"创":{"docs":{},"建":{"docs":{},"公":{"docs":{},"平":{"docs":{},"锁":{"docs":{},"与":{"docs":{},"非":{"docs":{},"公":{"docs":{},"平":{"docs":{},"锁":{"docs":{},"：":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}},"下":{"docs":{},"代":{"docs":{},"码":{"docs":{},"会":{"docs":{},"抛":{"docs":{},"出":{"docs":{},"异":{"docs":{},"常":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"它":{"docs":{},"试":{"docs":{},"图":{"docs":{},"在":{"docs":{},"从":{"docs":{},"一":{"docs":{},"个":{"docs":{},"长":{"docs":{},"度":{"docs":{},"为":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}},"的":{"docs":{},"作":{"docs":{},"用":{"docs":{},"是":{"docs":{},"：":{"docs":{},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}}},"面":{"docs":{},"这":{"docs":{},"段":{"docs":{},"代":{"docs":{},"码":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"启":{"docs":{},"动":{"docs":{},"了":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}}}}}}}}},"它":{"docs":{},"的":{"docs":{},"作":{"docs":{},"用":{"docs":{},"是":{"docs":{},"放":{"docs":{},"弃":{"docs":{},"当":{"docs":{},"前":{"docs":{},"的":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}},"守":{"docs":{},"护":{"docs":{},"线":{"docs":{},"程":{"1":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}},"安":{"docs":{},"全":{"docs":{},"停":{"docs":{},"止":{"docs":{},"线":{"docs":{},"程":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"1":{"docs":{},".":{"5":{"docs":{},".":{"3":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"docs":{}}},"docs":{}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}},"定":{"docs":{},"义":{"docs":{},"：":{"docs":{},"一":{"docs":{},"种":{"docs":{},"特":{"docs":{},"殊":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"，":{"docs":{},"当":{"docs":{},"进":{"docs":{},"程":{"docs":{},"中":{"docs":{},"不":{"docs":{},"存":{"docs":{},"在":{"docs":{},"非":{"docs":{},"守":{"docs":{},"护":{"docs":{},"线":{"docs":{},"程":{"docs":{},"了":{"docs":{},"，":{"docs":{},"守":{"docs":{},"护":{"docs":{},"线":{"docs":{},"程":{"docs":{},"自":{"docs":{},"动":{"docs":{},"销":{"docs":{},"毁":{"docs":{},"。":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"时":{"docs":{},"器":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"1":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}},"docs":{}}},"docs":{"Ch5-定时器Timer/":{"ref":"Ch5-定时器Timer/","tf":5},"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":5.006172839506172}}}}}}}}}},"实":{"docs":{},"现":{"docs":{},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{},"n":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"接":{"docs":{},"口":{"docs":{},"(":{"docs":{},"常":{"docs":{},"用":{"docs":{},")":{"1":{"docs":{},".":{"3":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"docs":{}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}},"多":{"docs":{},"线":{"docs":{},"程":{"docs":{},"的":{"docs":{},"基":{"docs":{},"本":{"docs":{},"方":{"docs":{},"法":{"1":{"docs":{},".":{"2":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"docs":{}}},"docs":{}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}},"：":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}},"机":{"docs":{},"制":{"docs":{},"是":{"docs":{},"这":{"docs":{},"样":{"docs":{},"的":{"docs":{},"：":{"docs":{},"每":{"docs":{},"个":{"docs":{},"锁":{"docs":{},"对":{"docs":{},"象":{"docs":{},"都":{"docs":{},"又":{"docs":{},"两":{"docs":{},"个":{"docs":{},"队":{"docs":{},"列":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"是":{"docs":{},"就":{"docs":{},"绪":{"docs":{},"队":{"docs":{},"列":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"是":{"docs":{},"阻":{"docs":{},"塞":{"docs":{},"队":{"docs":{},"列":{"docs":{},"。":{"docs":{},"就":{"docs":{},"绪":{"docs":{},"队":{"docs":{},"列":{"docs":{},"中":{"docs":{},"存":{"docs":{},"储":{"docs":{},"了":{"docs":{},"将":{"docs":{},"要":{"docs":{},"获":{"docs":{},"得":{"docs":{},"锁":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"，":{"docs":{},"阻":{"docs":{},"塞":{"docs":{},"队":{"docs":{},"列":{"docs":{},"中":{"docs":{},"存":{"docs":{},"储":{"docs":{},"了":{"docs":{},"被":{"docs":{},"阻":{"docs":{},"塞":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"。":{"docs":{},"一":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"被":{"docs":{},"唤":{"docs":{},"醒":{"docs":{},"后":{"docs":{},"，":{"docs":{},"才":{"docs":{},"会":{"docs":{},"进":{"docs":{},"入":{"docs":{},"就":{"docs":{},"绪":{"docs":{},"队":{"docs":{},"列":{"docs":{},"，":{"docs":{},"等":{"docs":{},"待":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"交":{"docs":{},"替":{"docs":{},"打":{"docs":{},"印":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}},"战":{"docs":{},"：":{"docs":{},"交":{"docs":{},"叉":{"docs":{},"备":{"docs":{},"份":{"1":{"docs":{},".":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}},"例":{"docs":{},"，":{"docs":{},"线":{"docs":{},"程":{"docs":{},"对":{"docs":{},"象":{"docs":{},"可":{"docs":{},"以":{"docs":{},"注":{"docs":{},"册":{"docs":{},"在":{"docs":{},"指":{"docs":{},"定":{"docs":{},"的":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}},"对":{"docs":{},"象":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}},"的":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}},"同":{"docs":{},"步":{"docs":{},"方":{"docs":{},"法":{"docs":{},"呢":{"docs":{},"？":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}},"一":{"docs":{},"个":{"docs":{},"最":{"docs":{},"大":{"docs":{},"的":{"docs":{},"好":{"docs":{},"处":{"docs":{},"就":{"docs":{},"是":{"docs":{},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"实":{"docs":{},"现":{"docs":{},"多":{"docs":{},"路":{"docs":{},"通":{"docs":{},"知":{"docs":{},"功":{"docs":{},"能":{"docs":{},"了":{"docs":{},"，":{"docs":{},"即":{"docs":{},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"创":{"docs":{},"建":{"docs":{},"多":{"docs":{},"个":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"方":{"docs":{},"法":{"docs":{},"。":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}},"，":{"docs":{},"也":{"docs":{},"可":{"docs":{},"给":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}},"那":{"docs":{},"么":{"docs":{},"有":{"docs":{},"以":{"docs":{},"下":{"docs":{},"三":{"docs":{},"个":{"docs":{},"结":{"docs":{},"论":{"docs":{},"：":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}},"通":{"docs":{},"过":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}},"及":{"docs":{},"变":{"docs":{},"量":{"docs":{},"的":{"docs":{},"并":{"docs":{},"发":{"docs":{},"访":{"docs":{},"问":{"docs":{"Ch2-对象及变量的并发访问/":{"ref":"Ch2-对象及变量的并发访问/","tf":5}}}}}}}}}},"中":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}},"s":{"docs":{},"y":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}},"存":{"docs":{},"储":{"docs":{},"的":{"docs":{},"值":{"docs":{},"时":{"docs":{},"，":{"docs":{},"它":{"docs":{},"会":{"docs":{},"调":{"docs":{},"用":{"docs":{},"这":{"docs":{},"个":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}}}}},"作":{"docs":{},"为":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}},"去":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}},"启":{"docs":{},"动":{"docs":{},"它":{"docs":{},"。":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}},"：":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}},"于":{"docs":{},"没":{"docs":{},"有":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}},"操":{"docs":{},"作":{"docs":{},"栈":{"docs":{},"，":{"docs":{},"也":{"docs":{},"存":{"docs":{},"在":{"docs":{},"程":{"docs":{},"序":{"docs":{},"假":{"docs":{},"死":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"通":{"docs":{},"过":{"docs":{},"修":{"docs":{},"改":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"i":{"docs":{},"f":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},"为":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"i":{"docs":{},"f":{"docs":{},"y":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{},"来":{"docs":{},"解":{"docs":{},"决":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"通":{"docs":{},"过":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}},"应":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"中":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}},"就":{"docs":{},"是":{"docs":{},"说":{"docs":{},"这":{"docs":{},"个":{"docs":{},"方":{"docs":{},"法":{"docs":{},"如":{"docs":{},"果":{"docs":{},"调":{"docs":{},"用":{"docs":{},"两":{"docs":{},"次":{"docs":{},"，":{"docs":{},"第":{"docs":{},"一":{"docs":{},"次":{"docs":{},"为":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}},"永":{"docs":{},"远":{"docs":{},"不":{"docs":{},"会":{"docs":{},"结":{"docs":{},"束":{"docs":{},"，":{"docs":{},"它":{"docs":{},"也":{"docs":{},"永":{"docs":{},"远":{"docs":{},"不":{"docs":{},"会":{"docs":{},"放":{"docs":{},"开":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"程":{"docs":{},"序":{"docs":{},"的":{"docs":{},"运":{"docs":{},"行":{"docs":{},"陷":{"docs":{},"入":{"docs":{},"死":{"docs":{},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{},"导":{"docs":{},"致":{"docs":{},"死":{"docs":{},"锁":{"docs":{},"。":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"异":{"docs":{},"常":{"docs":{},"。":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}},"法":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}},"，":{"docs":{},"不":{"docs":{},"过":{"docs":{},"该":{"docs":{},"异":{"docs":{},"常":{"docs":{},"不":{"docs":{},"需":{"docs":{},"要":{"docs":{},"显":{"docs":{},"式":{"docs":{},"捕":{"docs":{},"捉":{"docs":{},"。":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}},"否":{"docs":{},"则":{"docs":{},"就":{"docs":{},"算":{"docs":{},"是":{"docs":{},"打":{"docs":{},"上":{"docs":{},"了":{"docs":{},"标":{"docs":{},"记":{"docs":{},"，":{"docs":{},"不":{"docs":{},"自":{"docs":{},"己":{"docs":{},"在":{"docs":{},"程":{"docs":{},"序":{"docs":{},"中":{"docs":{},"用":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}},"强":{"docs":{},"制":{"docs":{},"终":{"docs":{},"止":{"docs":{},"了":{"docs":{},"线":{"docs":{},"程":{"docs":{},"，":{"docs":{},"导":{"docs":{},"致":{"docs":{},"了":{"docs":{},"用":{"docs":{},"户":{"docs":{},"名":{"docs":{},"和":{"docs":{},"密":{"docs":{},"码":{"docs":{},"的":{"docs":{},"不":{"docs":{},"一":{"docs":{},"致":{"docs":{},"，":{"docs":{},"这":{"docs":{},"种":{"docs":{},"事":{"docs":{},"务":{"docs":{},"性":{"docs":{},"问":{"docs":{},"题":{"docs":{},"是":{"docs":{},"需":{"docs":{},"要":{"docs":{},"在":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"大":{"docs":{},"很":{"docs":{},"多":{"docs":{},"，":{"docs":{},"它":{"docs":{},"们":{"docs":{},"之":{"docs":{},"间":{"docs":{},"有":{"docs":{},"如":{"docs":{},"下":{"docs":{},"几":{"docs":{},"点":{"docs":{},"区":{"docs":{},"别":{"docs":{},"：":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}}}}}}}}},"影":{"docs":{},"响":{"docs":{},"是":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"。":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}},"得":{"docs":{},"到":{"docs":{},"的":{"docs":{},"是":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}}},"根":{"docs":{},"本":{"docs":{},"就":{"docs":{},"是":{"docs":{},"不":{"docs":{},"同":{"docs":{},"的":{"docs":{},"两":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"，":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},".":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"线":{"docs":{},"程":{"docs":{},"优":{"docs":{},"先":{"docs":{},"级":{"docs":{},"：":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}},"运":{"docs":{},"行":{"docs":{},"结":{"docs":{},"果":{"docs":{},"如":{"docs":{},"下":{"docs":{},"：":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}},"想":{"docs":{},"要":{"docs":{},"安":{"docs":{},"全":{"docs":{},"的":{"docs":{},"停":{"docs":{},"止":{"docs":{},"一":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"，":{"docs":{},"用":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}},"了":{"docs":{},"解":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}},"实":{"docs":{},"现":{"docs":{},"带":{"docs":{},"初":{"docs":{},"始":{"docs":{},"值":{"docs":{},"的":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}},"解":{"docs":{},"决":{"docs":{},"多":{"docs":{},"线":{"docs":{},"程":{"docs":{},"不":{"docs":{},"能":{"docs":{},"保":{"docs":{},"证":{"docs":{},"单":{"docs":{},"例":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"使":{"docs":{},"用":{"docs":{},"同":{"docs":{},"步":{"docs":{},"技":{"docs":{},"术":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"时":{"docs":{},"第":{"docs":{},"一":{"docs":{},"个":{"docs":{},"想":{"docs":{},"到":{"docs":{},"的":{"docs":{},"，":{"docs":{},"可":{"docs":{},"是":{"docs":{},"如":{"docs":{},"果":{"docs":{},"先":{"docs":{},"这":{"docs":{},"样":{"docs":{},"给":{"docs":{},"整":{"docs":{},"个":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"我":{"docs":{},"们":{"docs":{},"可":{"docs":{},"以":{"docs":{},"创":{"docs":{},"建":{"docs":{},"一":{"docs":{},"个":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}},"在":{"docs":{},"类":{"docs":{},"中":{"docs":{},"定":{"docs":{},"义":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}},"主":{"docs":{},"要":{"docs":{},"采":{"docs":{},"取":{"docs":{},"的":{"docs":{},"解":{"docs":{},"决":{"docs":{},"问":{"docs":{},"题":{"docs":{},"方":{"docs":{},"式":{"docs":{},"就":{"docs":{},"是":{"docs":{},"：":{"docs":{},"借":{"docs":{},"助":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}},"知":{"docs":{},"道":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"通":{"docs":{},"过":{"docs":{},"如":{"docs":{},"下":{"docs":{},"程":{"docs":{},"序":{"docs":{},"来":{"docs":{},"验":{"docs":{},"证":{"docs":{},"一":{"docs":{},"下":{"docs":{},"：":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}}}}},"先":{"docs":{},"实":{"docs":{},"现":{"docs":{},"一":{"docs":{},"个":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}},"是":{"docs":{},"在":{"docs":{},"子":{"docs":{},"线":{"docs":{},"程":{"docs":{},"后":{"docs":{},"加":{"docs":{},"的":{"docs":{},"！":{"docs":{},"\"":{"docs":{},";":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}}}},"打":{"docs":{},"上":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"执":{"docs":{},"行":{"docs":{},"时":{"docs":{},"间":{"docs":{},"，":{"docs":{},"不":{"docs":{},"过":{"docs":{},"刚":{"docs":{},"放":{"docs":{},"弃":{"docs":{},"就":{"docs":{},"立":{"docs":{},"刻":{"docs":{},"又":{"docs":{},"抢":{"docs":{},"到":{"docs":{},"了":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}},"到":{"docs":{},"时":{"docs":{},"延":{"docs":{},"时":{"docs":{},"，":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}},"完":{"docs":{},"毕":{"docs":{},"后":{"docs":{},"继":{"docs":{},"续":{"docs":{},"执":{"docs":{},"行":{"docs":{},"。":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}},"任":{"docs":{},"务":{"docs":{},"时":{"docs":{},"发":{"docs":{},"现":{"docs":{},"给":{"docs":{},"定":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"已":{"docs":{},"经":{"docs":{},"过":{"docs":{},"期":{"docs":{},"了":{"docs":{},"，":{"docs":{},"会":{"docs":{},"立":{"docs":{},"即":{"docs":{},"执":{"docs":{},"行":{"docs":{},"相":{"docs":{},"和":{"docs":{},"歌":{"docs":{},"任":{"docs":{},"务":{"docs":{},"。":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"换":{"docs":{},"成":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"接":{"docs":{},"口":{"docs":{},"的":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"我":{"docs":{},"们":{"docs":{},"甚":{"docs":{},"至":{"docs":{},"可":{"docs":{},"以":{"docs":{},"将":{"docs":{},"一":{"docs":{},"个":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}},"抽":{"docs":{},"象":{"docs":{},"类":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"要":{"docs":{},"新":{"docs":{},"建":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}}}}},"数":{"docs":{},"据":{"docs":{},"不":{"docs":{},"同":{"docs":{},"步":{"1":{"docs":{},".":{"7":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"docs":{}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}},"的":{"docs":{},"原":{"docs":{},"因":{"docs":{},"和":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}},"库":{"docs":{},"中":{"docs":{},"，":{"docs":{},"两":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"的":{"docs":{},"备":{"docs":{},"份":{"docs":{},"操":{"docs":{},"作":{"docs":{},"必":{"docs":{},"须":{"docs":{},"交":{"docs":{},"叉":{"docs":{},"进":{"docs":{},"行":{"docs":{},"。":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}},"另":{"docs":{},"外":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}},"文":{"docs":{},"件":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.012476007677543186},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.015337423312883436},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.01777362020579981},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.02158273381294964},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.010814708002883922}},"。":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}},"为":{"docs":{},"：":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}},"方":{"docs":{},"法":{"docs":{},"中":{"docs":{},"断":{"docs":{},"线":{"docs":{},"程":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}},"线":{"docs":{},"程":{"docs":{},"被":{"docs":{},"中":{"docs":{},"断":{"docs":{},"的":{"docs":{},"效":{"docs":{},"果":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}},"。":{"docs":{},"因":{"docs":{},"为":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}}}},"编":{"docs":{},"写":{"docs":{},"我":{"docs":{},"们":{"docs":{},"要":{"docs":{},"计":{"docs":{},"划":{"docs":{},"执":{"docs":{},"行":{"docs":{},"的":{"docs":{},"任":{"docs":{},"务":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"新":{"docs":{},"建":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}}}}}}}}}},"不":{"docs":{},"能":{"docs":{},"有":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}}}},"了":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"调":{"docs":{},"用":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}},"因":{"docs":{},"此":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}},"交":{"docs":{},"给":{"docs":{},"其":{"docs":{},"他":{"docs":{},"线":{"docs":{},"程":{"docs":{},"调":{"docs":{},"用":{"docs":{},"。":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}},"导":{"docs":{},"致":{"docs":{},"数":{"docs":{},"据":{"docs":{},"不":{"docs":{},"同":{"docs":{},"步":{"docs":{},"的":{"docs":{},"原":{"docs":{},"因":{"docs":{},"即":{"docs":{},"可":{"docs":{},"，":{"docs":{},"把":{"docs":{},"那":{"docs":{},"的":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}},"就":{"docs":{},"好":{"docs":{},"，":{"docs":{},"感":{"docs":{},"觉":{"docs":{},"上":{"docs":{},"像":{"docs":{},"是":{"docs":{},"实":{"docs":{},"现":{"docs":{},"了":{"docs":{},"线":{"docs":{},"程":{"docs":{},"本":{"docs":{},"身":{"docs":{},"与":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}},"强":{"docs":{},"制":{"docs":{},"退":{"docs":{},"出":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}},"执":{"docs":{},"行":{"docs":{},"完":{"docs":{},"之":{"docs":{},"后":{"docs":{},"自":{"docs":{},"动":{"docs":{},"退":{"docs":{},"出":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}},"的":{"docs":{},"内":{"docs":{},"容":{"docs":{},"的":{"docs":{},"分":{"docs":{},"离":{"docs":{},"。":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}},"拿":{"docs":{},"不":{"docs":{},"到":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"因":{"docs":{},"此":{"docs":{},"无":{"docs":{},"法":{"docs":{},"执":{"docs":{},"行":{"docs":{},"。":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}},"的":{"docs":{},"同":{"docs":{},"步":{"docs":{},"块":{"docs":{},"中":{"docs":{},"，":{"docs":{},"它":{"docs":{},"会":{"docs":{},"一":{"docs":{},"直":{"docs":{},"拿":{"docs":{},"着":{"docs":{},"锁":{"docs":{},"不":{"docs":{},"释":{"docs":{},"放":{"docs":{},"，":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}}}},"影":{"docs":{},"响":{"docs":{},"很":{"docs":{},"像":{"docs":{},"，":{"docs":{},"直":{"docs":{},"接":{"docs":{},"看":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}},"而":{"docs":{},"已":{"docs":{},"，":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}},"里":{"docs":{},"面":{"docs":{},"，":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"l":{"docs":{},"n":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}},"上":{"docs":{},"是":{"docs":{},"给":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}},"使":{"docs":{},"用":{"docs":{},"的":{"docs":{},"锁":{"docs":{},"是":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}}}}}},"和":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}},"并":{"docs":{},"没":{"docs":{},"有":{"docs":{},"结":{"docs":{},"束":{"docs":{},"，":{"docs":{},"说":{"docs":{},"明":{"docs":{},"线":{"docs":{},"程":{"docs":{},"不":{"docs":{},"会":{"docs":{},"放":{"docs":{},"开":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"执":{"docs":{},"行":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}},"改":{"docs":{},"成":{"docs":{},"同":{"docs":{},"步":{"docs":{},"的":{"docs":{},"：":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}}}}}}},"，":{"docs":{},"此":{"docs":{},"时":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"这":{"docs":{},"时":{"docs":{},"虽":{"docs":{},"然":{"docs":{},"能":{"docs":{},"实":{"docs":{},"现":{"docs":{},"同":{"docs":{},"步":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"由":{"docs":{},"于":{"docs":{},"线":{"docs":{},"程":{"docs":{},"阻":{"docs":{},"塞":{"docs":{},"的":{"docs":{},"原":{"docs":{},"因":{"docs":{},"，":{"docs":{},"运":{"docs":{},"行":{"docs":{},"效":{"docs":{},"率":{"docs":{},"大":{"docs":{},"大":{"docs":{},"降":{"docs":{},"低":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"我":{"docs":{},"们":{"docs":{},"根":{"docs":{},"据":{"docs":{},"同":{"docs":{},"步":{"docs":{},"需":{"docs":{},"求":{"docs":{},"将":{"docs":{},"其":{"docs":{},"分":{"docs":{},"成":{"docs":{},"需":{"docs":{},"要":{"docs":{},"进":{"docs":{},"行":{"docs":{},"同":{"docs":{},"步":{"docs":{},"几":{"docs":{},"部":{"docs":{},"分":{"docs":{},"，":{"docs":{},"每":{"docs":{},"一":{"docs":{},"部":{"docs":{},"分":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"就":{"docs":{},"不":{"docs":{},"会":{"docs":{},"有":{"docs":{},"这":{"docs":{},"么":{"docs":{},"多":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"的":{"docs":{},"运":{"docs":{},"行":{"docs":{},"都":{"docs":{},"需":{"docs":{},"要":{"docs":{},"抢":{"docs":{},"夺":{"docs":{},"一":{"docs":{},"个":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"大":{"docs":{},"大":{"docs":{},"提":{"docs":{},"高":{"docs":{},"运":{"docs":{},"行":{"docs":{},"效":{"docs":{},"率":{"docs":{},"。":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"在":{"docs":{},"方":{"docs":{},"法":{"docs":{},"返":{"docs":{},"回":{"docs":{},"前":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}},"它":{"docs":{},"会":{"docs":{},"进":{"docs":{},"入":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}},"使":{"docs":{},"其":{"docs":{},"返":{"docs":{},"回":{"docs":{},"新":{"docs":{},"的":{"docs":{},"初":{"docs":{},"始":{"docs":{},"值":{"docs":{},"即":{"docs":{},"可":{"docs":{},"。":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}}}},"我":{"docs":{},"们":{"docs":{},"需":{"docs":{},"要":{"docs":{},"写":{"docs":{},"一":{"docs":{},"个":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}},"创":{"docs":{},"建":{"docs":{},"的":{"docs":{},"单":{"docs":{},"例":{"docs":{},"对":{"docs":{},"象":{"docs":{},"的":{"docs":{},"资":{"docs":{},"源":{"docs":{},"就":{"docs":{},"浪":{"docs":{},"费":{"docs":{},"掉":{"docs":{},"了":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"为":{"docs":{},"了":{"docs":{},"节":{"docs":{},"省":{"docs":{},"资":{"docs":{},"源":{"docs":{},"我":{"docs":{},"们":{"docs":{},"还":{"docs":{},"是":{"docs":{},"想":{"docs":{},"要":{"docs":{},"使":{"docs":{},"用":{"docs":{},"懒":{"docs":{},"汉":{"docs":{},"模":{"docs":{},"式":{"docs":{},"的":{"docs":{},"，":{"docs":{},"不":{"docs":{},"过":{"docs":{},"在":{"docs":{},"多":{"docs":{},"线":{"docs":{},"程":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"，":{"docs":{},"懒":{"docs":{},"汉":{"docs":{},"模":{"docs":{},"式":{"docs":{},"是":{"docs":{},"不":{"docs":{},"能":{"docs":{},"保":{"docs":{},"证":{"docs":{},"单":{"docs":{},"例":{"docs":{},"的":{"docs":{},"。":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"正":{"docs":{},"常":{"docs":{},"在":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}},"可":{"docs":{},"将":{"docs":{},"组":{"docs":{},"内":{"docs":{},"正":{"docs":{},"在":{"docs":{},"运":{"docs":{},"行":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"批":{"docs":{},"量":{"docs":{},"停":{"docs":{},"止":{"docs":{},"。":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}}}}}}}},"：":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}},"只":{"docs":{},"要":{"docs":{},"写":{"docs":{},"一":{"docs":{},"段":{"docs":{},"代":{"docs":{},"码":{"docs":{},"，":{"docs":{},"里":{"docs":{},"面":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"同":{"docs":{},"步":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"另":{"docs":{},"一":{"docs":{},"个":{"docs":{},"方":{"docs":{},"法":{"docs":{},"中":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"将":{"docs":{},"任":{"docs":{},"务":{"docs":{},"队":{"docs":{},"列":{"docs":{},"中":{"docs":{},"的":{"docs":{},"全":{"docs":{},"部":{"docs":{},"任":{"docs":{},"务":{"docs":{},"清":{"docs":{},"空":{"docs":{},"。":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}}}}}},"自":{"docs":{},"身":{"docs":{},"从":{"docs":{},"任":{"docs":{},"务":{"docs":{},"队":{"docs":{},"列":{"docs":{},"中":{"docs":{},"清":{"docs":{},"除":{"docs":{},"。":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}}}}},"新":{"docs":{},"写":{"docs":{},"一":{"docs":{},"个":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}}}}},"差":{"docs":{},"不":{"docs":{},"多":{"docs":{},"，":{"docs":{},"都":{"docs":{},"是":{"docs":{},"会":{"docs":{},"抛":{"docs":{},"出":{"docs":{},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"u":{"docs":{},"p":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"异":{"docs":{},"常":{"docs":{},"，":{"docs":{},"感":{"docs":{},"觉":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"已":{"docs":{},"经":{"docs":{},"返":{"docs":{},"回":{"docs":{},"，":{"docs":{},"阻":{"docs":{},"塞":{"docs":{},"方":{"docs":{},"法":{"docs":{},"执":{"docs":{},"行":{"docs":{},"完":{"docs":{},"毕":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}},"或":{"docs":{},"代":{"docs":{},"码":{"docs":{},"块":{"docs":{},"中":{"docs":{},"调":{"docs":{},"用":{"docs":{},"。":{"docs":{},"如":{"docs":{},"果":{"docs":{},"调":{"docs":{},"用":{"docs":{},"它":{"docs":{},"们":{"docs":{},"时":{"docs":{},"没":{"docs":{},"有":{"docs":{},"持":{"docs":{},"有":{"docs":{},"适":{"docs":{},"当":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"会":{"docs":{},"抛":{"docs":{},"出":{"docs":{},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"g":{"docs":{},"a":{"docs":{},"l":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"异":{"docs":{},"常":{"docs":{},"（":{"docs":{},"是":{"docs":{},"个":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"同":{"docs":{},"步":{"docs":{},"代":{"docs":{},"码":{"docs":{},"块":{"docs":{},"中":{"docs":{},"调":{"docs":{},"用":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}},"经":{"docs":{},"过":{"docs":{},"指":{"docs":{},"定":{"docs":{},"休":{"docs":{},"眠":{"docs":{},"时":{"docs":{},"间":{"docs":{},"结":{"docs":{},"束":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}},"结":{"docs":{},"束":{"docs":{},"后":{"docs":{},"就":{"docs":{},"进":{"docs":{},"入":{"docs":{},"了":{"docs":{},"销":{"docs":{},"毁":{"docs":{},"阶":{"docs":{},"段":{"docs":{},"，":{"docs":{},"线":{"docs":{},"程":{"docs":{},"任":{"docs":{},"务":{"docs":{},"执":{"docs":{},"行":{"docs":{},"完":{"docs":{},"毕":{"docs":{},"。":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}},"内":{"docs":{},"部":{"docs":{},"就":{"docs":{},"是":{"docs":{},"用":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}},"是":{"docs":{},"用":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}},"实":{"docs":{},"现":{"docs":{},"的":{"docs":{},"。":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.007194244604316547}}}}}},"会":{"docs":{},"去":{"docs":{},"这":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"中":{"docs":{},"取":{"docs":{},"得":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}},"可":{"docs":{},"以":{"docs":{},"发":{"docs":{},"现":{"docs":{},"：":{"docs":{},"当":{"docs":{},"第":{"docs":{},"一":{"docs":{},"次":{"docs":{},"使":{"docs":{},"用":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}},"帮":{"docs":{},"我":{"docs":{},"们":{"docs":{},"省":{"docs":{},"去":{"docs":{},"判":{"docs":{},"断":{"docs":{},"中":{"docs":{},"断":{"docs":{},"标":{"docs":{},"记":{"docs":{},"抛":{"docs":{},"异":{"docs":{},"常":{"docs":{},"这":{"docs":{},"些":{"docs":{},"步":{"docs":{},"骤":{"docs":{},"。":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}},"对":{"docs":{},"父":{"docs":{},"线":{"docs":{},"程":{"docs":{},"设":{"docs":{},"置":{"docs":{},"的":{"docs":{},"值":{"docs":{},"进":{"docs":{},"行":{"docs":{},"修":{"docs":{},"改":{"docs":{},"：":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}}}}},"时":{"docs":{},"，":{"docs":{},"最":{"docs":{},"终":{"docs":{},"得":{"docs":{},"到":{"docs":{},"的":{"docs":{},"值":{"docs":{},"是":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}},"一":{"docs":{},"样":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"说":{"docs":{},"在":{"docs":{},"调":{"docs":{},"用":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}},"没":{"docs":{},"有":{"docs":{},"争":{"docs":{},"抢":{"docs":{},"到":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}},"依":{"docs":{},"旧":{"docs":{},"是":{"docs":{},"同":{"docs":{},"步":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"同":{"docs":{},"一":{"docs":{},"时":{"docs":{},"刻":{"docs":{},"到":{"docs":{},"来":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"仍":{"docs":{},"需":{"docs":{},"要":{"docs":{},"排":{"docs":{},"队":{"docs":{},"执":{"docs":{},"行":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"我":{"docs":{},"们":{"docs":{},"通":{"docs":{},"过":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"来":{"docs":{},"获":{"docs":{},"取":{"docs":{},"这":{"docs":{},"个":{"docs":{},"唯":{"docs":{},"一":{"docs":{},"的":{"docs":{},"实":{"docs":{},"例":{"docs":{},"化":{"docs":{},"对":{"docs":{},"象":{"docs":{},"。":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}},"都":{"docs":{},"加":{"docs":{},"上":{"docs":{},"锁":{"docs":{},"：":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}},"。":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}}},"时":{"docs":{},"间":{"docs":{},"片":{"docs":{},"也":{"docs":{},"是":{"docs":{},"又":{"docs":{},"可":{"docs":{},"能":{"docs":{},"的":{"docs":{},"。":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}},"时":{"docs":{},"抢":{"docs":{},"到":{"docs":{},"的":{"docs":{},"概":{"docs":{},"率":{"docs":{},"高":{"docs":{},"而":{"docs":{},"已":{"docs":{},"，":{"docs":{},"并":{"docs":{},"不":{"docs":{},"一":{"docs":{},"定":{"docs":{},"就":{"docs":{},"执":{"docs":{},"行":{"docs":{},"的":{"docs":{},"比":{"docs":{},"优":{"docs":{},"先":{"docs":{},"级":{"docs":{},"低":{"docs":{},"的":{"docs":{},"快":{"docs":{},"。":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"执":{"docs":{},"行":{"docs":{},"任":{"docs":{},"务":{"docs":{},"。":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}},"，":{"docs":{},"没":{"docs":{},"有":{"docs":{},"处":{"docs":{},"于":{"docs":{},"阻":{"docs":{},"塞":{"docs":{},"状":{"docs":{},"态":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"这":{"docs":{},"个":{"docs":{},"通":{"docs":{},"知":{"docs":{},"命":{"docs":{},"令":{"docs":{},"会":{"docs":{},"被":{"docs":{},"忽":{"docs":{},"略":{"docs":{},"，":{"docs":{},"不":{"docs":{},"会":{"docs":{},"有":{"docs":{},"什":{"docs":{},"么":{"docs":{},"影":{"docs":{},"响":{"docs":{},"。":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"如":{"docs":{},"果":{"docs":{},"没":{"docs":{},"有":{"docs":{},"持":{"docs":{},"有":{"docs":{},"适":{"docs":{},"当":{"docs":{},"的":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"就":{"docs":{},"会":{"docs":{},"抛":{"docs":{},"出":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}},"执":{"docs":{},"行":{"docs":{},"任":{"docs":{},"务":{"docs":{},"。":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}},"是":{"docs":{},"同":{"docs":{},"步":{"docs":{},"的":{"docs":{},"，":{"docs":{},"它":{"docs":{},"内":{"docs":{},"部":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"同":{"docs":{},"步":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"当":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}},"和":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}},"最":{"docs":{},"好":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"不":{"docs":{},"过":{"docs":{},"调":{"docs":{},"用":{"docs":{},"了":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}},"死":{"docs":{},"的":{"docs":{},"，":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}},"活":{"docs":{},"的":{"docs":{},"，":{"docs":{},"而":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}},"一":{"docs":{},"个":{"docs":{},"非":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}},"实":{"docs":{},"现":{"docs":{},"了":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}},"异":{"docs":{},"步":{"docs":{},"的":{"docs":{},"。":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}},"线":{"docs":{},"程":{"docs":{},"同":{"docs":{},"步":{"docs":{},"的":{"docs":{},"轻":{"docs":{},"量":{"docs":{},"级":{"docs":{},"实":{"docs":{},"现":{"docs":{},"，":{"docs":{},"性":{"docs":{},"能":{"docs":{},"要":{"docs":{},"好":{"docs":{},"于":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}}}}}},"不":{"docs":{},"安":{"docs":{},"全":{"docs":{},"的":{"docs":{},"，":{"docs":{},"想":{"docs":{},"要":{"docs":{},"保":{"docs":{},"证":{"docs":{},"线":{"docs":{},"程":{"docs":{},"安":{"docs":{},"全":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"必":{"docs":{},"须":{"docs":{},"给":{"docs":{},"每":{"docs":{},"一":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"准":{"docs":{},"备":{"docs":{},"一":{"docs":{},"个":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"这":{"docs":{},"样":{"docs":{},"的":{"docs":{},"：":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}},"用":{"docs":{},"来":{"docs":{},"指":{"docs":{},"定":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}},"普":{"docs":{},"通":{"docs":{},"的":{"docs":{},"例":{"docs":{},"子":{"docs":{},"很":{"docs":{},"好":{"docs":{},"举":{"docs":{},"，":{"docs":{},"只":{"docs":{},"要":{"docs":{},"在":{"docs":{},"一":{"docs":{},"个":{"docs":{},"方":{"docs":{},"法":{"docs":{},"前":{"docs":{},"加":{"docs":{},"上":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}},"同":{"docs":{},"步":{"docs":{},"方":{"docs":{},"法":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}},"执":{"docs":{},"行":{"docs":{},"：":{"docs":{},"s":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.012345679012345678}}}}}}}}}}}}}}}}}}}}}}}}},"暂":{"docs":{},"停":{"docs":{},"线":{"docs":{},"程":{"1":{"docs":{},".":{"6":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"docs":{}}},"docs":{}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}},"有":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}},"一":{"docs":{},"个":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"(":{"docs":{},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{},"n":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}},"可":{"docs":{},"能":{"docs":{},"会":{"docs":{},"导":{"docs":{},"致":{"docs":{},"数":{"docs":{},"据":{"docs":{},"不":{"docs":{},"同":{"docs":{},"步":{"docs":{},"。":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}},"两":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"(":{"docs":{},"t":{"docs":{},"h":{"1":{"docs":{},",":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"docs":{}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"线":{"docs":{},"程":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}},"种":{"docs":{},"使":{"docs":{},"用":{"docs":{},"方":{"docs":{},"式":{"docs":{},"：":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}},"线":{"docs":{},"程":{"docs":{},"安":{"docs":{},"全":{"docs":{},"问":{"docs":{},"题":{"docs":{},"的":{"docs":{},"代":{"docs":{},"码":{"docs":{},"：":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}},"如":{"docs":{},"下":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}},"两":{"docs":{},"类":{"docs":{},"执":{"docs":{},"行":{"docs":{},"任":{"docs":{},"务":{"docs":{},"的":{"docs":{},"方":{"docs":{},"式":{"docs":{},"。":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}}}}},"关":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"的":{"docs":{},"属":{"docs":{},"性":{"docs":{},"类":{"1":{"docs":{},".":{"4":{"docs":{},".":{"4":{"docs":{},".":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{}}},"docs":{}}},"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}},"带":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}},"时":{"docs":{},"会":{"docs":{},"因":{"docs":{},"为":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}},"追":{"docs":{},"赶":{"docs":{},"执":{"docs":{},"行":{"docs":{},"性":{"docs":{},"：":{"docs":{},"s":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{},"e":{"docs":{},"d":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"限":{"docs":{},"期":{"docs":{},"的":{"docs":{},"等":{"docs":{},"待":{"docs":{},"另":{"docs":{},"一":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"的":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"如":{"docs":{},"s":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{},"(":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},")":{"docs":{},",":{"docs":{},"w":{"docs":{},"a":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},")":{"docs":{},",":{"docs":{},"j":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},")":{"docs":{},"后":{"docs":{"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":0.02857142857142857}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"根":{"docs":{},"本":{"docs":{},"就":{"docs":{},"没":{"docs":{},"有":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}},"据":{"docs":{},"当":{"docs":{},"前":{"docs":{},"时":{"docs":{},"间":{"docs":{},"获":{"docs":{},"取":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"类":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"：":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}}}}}}}}}},"概":{"docs":{},"念":{"1":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"docs":{}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"然":{"docs":{},"后":{"docs":{},"进":{"docs":{},"入":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"添":{"docs":{},"加":{"docs":{},"一":{"docs":{},"个":{"docs":{},"存":{"docs":{},"储":{"docs":{},"这":{"docs":{},"个":{"docs":{},"对":{"docs":{},"象":{"docs":{},"本":{"docs":{},"身":{"docs":{},"的":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}},"在":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}},"状":{"docs":{},"态":{"docs":{},"下":{"docs":{},"停":{"docs":{},"止":{"docs":{},"线":{"docs":{},"程":{"docs":{},"，":{"docs":{},"会":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}},"。":{"docs":{},"修":{"docs":{},"改":{"docs":{},"如":{"docs":{},"下":{"docs":{},"：":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}},"可":{"docs":{},"相":{"docs":{},"互":{"docs":{},"切":{"docs":{},"换":{"docs":{},"，":{"docs":{},"线":{"docs":{},"程":{"docs":{},"进":{"docs":{},"入":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}},"和":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}},"，":{"docs":{},"即":{"docs":{},"假":{"docs":{},"死":{"docs":{},"状":{"docs":{},"态":{"docs":{},"。":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}},"在":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}},"程":{"docs":{},"序":{"docs":{},"陷":{"docs":{},"入":{"docs":{},"假":{"docs":{},"死":{"docs":{},"状":{"docs":{},"态":{"docs":{},"。":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}},"表":{"docs":{},"示":{"docs":{},"阻":{"docs":{},"塞":{"docs":{},"状":{"docs":{},"态":{"docs":{},"，":{"docs":{},"线":{"docs":{},"程":{"docs":{},"进":{"docs":{},"入":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}},"使":{"docs":{},"用":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}},"独":{"docs":{},"占":{"docs":{},"公":{"docs":{},"共":{"docs":{},"同":{"docs":{},"步":{"docs":{},"对":{"docs":{},"象":{"1":{"docs":{},".":{"6":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"docs":{}}},"docs":{}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}}}}}}}}}},"用":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}},"起":{"docs":{},"来":{"docs":{},"还":{"docs":{},"是":{"docs":{},"十":{"docs":{},"分":{"docs":{},"危":{"docs":{},"险":{"docs":{},"的":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"做":{"docs":{},"锁":{"docs":{},"的":{"docs":{},"坑":{"1":{"docs":{},".":{"7":{"docs":{},".":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"docs":{}}},"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}},"当":{"docs":{},"前":{"docs":{},"类":{"docs":{},"的":{"docs":{},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},"类":{"docs":{},"作":{"docs":{},"为":{"docs":{},"锁":{"docs":{},"的":{"docs":{},"同":{"docs":{},"步":{"docs":{},"代":{"docs":{},"码":{"docs":{},"块":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.012345679012345678}}}}}},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.012345679012345678}}}}}}},"的":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.008547008547008548},"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}},"。":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}}},"不":{"docs":{},"同":{"docs":{},"！":{"docs":{},"！":{"docs":{},"！":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}},"单":{"docs":{},"继":{"docs":{},"承":{"docs":{},"机":{"docs":{},"制":{"docs":{},"，":{"docs":{},"并":{"docs":{},"不":{"docs":{},"是":{"docs":{},"十":{"docs":{},"分":{"docs":{},"灵":{"docs":{},"活":{"docs":{},"。":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}},"位":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"源":{"docs":{},"码":{"docs":{},"如":{"docs":{},"下":{"docs":{},"：":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}},"结":{"docs":{},"果":{"docs":{},"，":{"docs":{},"尤":{"docs":{},"其":{"docs":{},"是":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}},"方":{"docs":{},"法":{"docs":{},"时":{"docs":{},"，":{"docs":{},"还":{"docs":{},"是":{"docs":{},"异":{"docs":{},"步":{"docs":{},"调":{"docs":{},"用":{"docs":{},"。":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}},"式":{"docs":{},"解":{"docs":{},"决":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}},"自":{"docs":{},"带":{"docs":{},"工":{"docs":{},"具":{"docs":{},"j":{"docs":{},"p":{"docs":{},"s":{"docs":{},"和":{"docs":{},"j":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"来":{"docs":{},"检":{"docs":{},"测":{"docs":{},"死":{"docs":{},"锁":{"docs":{},"。":{"docs":{},"步":{"docs":{},"骤":{"docs":{},"如":{"docs":{},"下":{"docs":{},"：":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}},"长":{"docs":{},"度":{"docs":{},"仍":{"docs":{},"为":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"的":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"不":{"docs":{},"为":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}},"主":{"docs":{},"要":{"docs":{},"作":{"docs":{},"用":{"docs":{},"是":{"docs":{},"使":{"docs":{},"变":{"docs":{},"量":{"docs":{},"在":{"docs":{},"多":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"间":{"docs":{},"可":{"docs":{},"见":{"docs":{},"，":{"docs":{},"它":{"docs":{},"强":{"docs":{},"制":{"docs":{},"这":{"docs":{},"个":{"docs":{},"变":{"docs":{},"量":{"docs":{},"从":{"docs":{},"公":{"docs":{},"共":{"docs":{},"内":{"docs":{},"存":{"docs":{},"中":{"docs":{},"取":{"docs":{},"得":{"docs":{},"变":{"docs":{},"量":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"而":{"docs":{},"不":{"docs":{},"是":{"docs":{},"从":{"docs":{},"线":{"docs":{},"程":{"docs":{},"的":{"docs":{},"私":{"docs":{},"有":{"docs":{},"数":{"docs":{},"据":{"docs":{},"栈":{"docs":{},"中":{"docs":{},"取":{"docs":{},"得":{"docs":{},"变":{"docs":{},"量":{"docs":{},"的":{"docs":{},"值":{"docs":{},"。":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"作":{"docs":{},"用":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"要":{"docs":{},"先":{"docs":{},"来":{"docs":{},"介":{"docs":{},"绍":{"docs":{},"一":{"docs":{},"下":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}}}},"值":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.006134969325153374}},"写":{"docs":{},"道":{"docs":{},"内":{"docs":{},"存":{"docs":{},"中":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}},"内":{"docs":{},"存":{"docs":{},"机":{"docs":{},"制":{"docs":{},"原":{"docs":{},"理":{"docs":{},"图":{"docs":{},"如":{"docs":{},"下":{"docs":{},"：":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}},"，":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}},"部":{"docs":{},"实":{"docs":{},"现":{"docs":{},"原":{"docs":{},"理":{"docs":{},"就":{"docs":{},"是":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}},"：":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}},"类":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}},"意":{"docs":{},"思":{"docs":{},"为":{"docs":{},"：":{"docs":{},"易":{"docs":{},"变":{"docs":{},"的":{"docs":{},"，":{"docs":{},"不":{"docs":{},"稳":{"docs":{},"定":{"docs":{},"的":{"docs":{},"。":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}}}}},"私":{"docs":{},"有":{"docs":{},"堆":{"docs":{},"栈":{"docs":{},"中":{"docs":{},"的":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}},"时":{"docs":{},"候":{"docs":{},"不":{"docs":{},"用":{"docs":{},"将":{"docs":{},"数":{"docs":{},"据":{"docs":{},"进":{"docs":{},"行":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}},"间":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"没":{"docs":{},"人":{"docs":{},"唤":{"docs":{},"醒":{"docs":{},"它":{"docs":{},"就":{"docs":{},"自":{"docs":{},"己":{"docs":{},"唤":{"docs":{},"醒":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"有":{"docs":{},"线":{"docs":{},"程":{"docs":{},"在":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}},"线":{"docs":{},"程":{"docs":{},"一":{"docs":{},"直":{"docs":{},"在":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}},"是":{"docs":{},"如":{"docs":{},"何":{"docs":{},"被":{"docs":{},"其":{"docs":{},"对":{"docs":{},"应":{"docs":{},"的":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}},"调":{"docs":{},"用":{"docs":{},"了":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}},"的":{"docs":{},"估":{"docs":{},"计":{"docs":{},"数":{"docs":{},"。":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}},"实":{"docs":{},"现":{"docs":{},"原":{"docs":{},"理":{"docs":{},"就":{"docs":{},"好":{"docs":{},"。":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}},"子":{"docs":{},"类":{"docs":{},"，":{"docs":{},"然":{"docs":{},"后":{"docs":{},"覆":{"docs":{},"盖":{"docs":{},"它":{"docs":{},"的":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}},"覆":{"docs":{},"盖":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}}},"并":{"docs":{},"在":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}},"新":{"docs":{},"类":{"docs":{},"，":{"docs":{},"通":{"docs":{},"过":{"docs":{},"观":{"docs":{},"察":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}},"返":{"docs":{},"回":{"docs":{},"值":{"docs":{},"。":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}},"构":{"docs":{},"造":{"docs":{},"器":{"docs":{},"：":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}},"次":{"docs":{},"数":{"docs":{},"。":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}},"顺":{"docs":{},"序":{"docs":{},"执":{"docs":{},"行":{"docs":{},"：":{"docs":{},"(":{"docs":{},"注":{"docs":{},"意":{"docs":{},"代":{"docs":{},"码":{"docs":{},"中":{"docs":{},"的":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"中":{"docs":{},"间":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}}}}},"执":{"docs":{},"行":{"docs":{},"，":{"docs":{},"这":{"docs":{},"些":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}},"示":{"docs":{},"例":{"docs":{},"：":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}},"典":{"docs":{},"型":{"docs":{},"的":{"docs":{},"守":{"docs":{},"护":{"docs":{},"线":{"docs":{},"程":{"docs":{},"是":{"docs":{},"垃":{"docs":{},"圾":{"docs":{},"回":{"docs":{},"收":{"docs":{},"线":{"docs":{},"程":{"docs":{},"，":{"docs":{},"当":{"docs":{},"进":{"docs":{},"程":{"docs":{},"中":{"docs":{},"没":{"docs":{},"有":{"docs":{},"非":{"docs":{},"守":{"docs":{},"护":{"docs":{},"线":{"docs":{},"程":{"docs":{},"了":{"docs":{},"，":{"docs":{},"垃":{"docs":{},"圾":{"docs":{},"回":{"docs":{},"收":{"docs":{},"线":{"docs":{},"程":{"docs":{},"就":{"docs":{},"没":{"docs":{},"有":{"docs":{},"存":{"docs":{},"在":{"docs":{},"的":{"docs":{},"必":{"docs":{},"要":{"docs":{},"了":{"docs":{},"，":{"docs":{},"会":{"docs":{},"自":{"docs":{},"动":{"docs":{},"销":{"docs":{},"毁":{"docs":{},"。":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"两":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"处":{"docs":{},"于":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}},"种":{"docs":{},"构":{"docs":{},"造":{"docs":{},"函":{"docs":{},"数":{"docs":{},"，":{"docs":{},"比":{"docs":{},"较":{"docs":{},"常":{"docs":{},"用":{"docs":{},"的":{"docs":{},"有":{"docs":{},"以":{"docs":{},"下":{"docs":{},"几":{"docs":{},"种":{"docs":{},"：":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}},"终":{"docs":{},"止":{"docs":{},"正":{"docs":{},"在":{"docs":{},"运":{"docs":{},"行":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"：":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}},"删":{"docs":{},"除":{"docs":{},"元":{"docs":{},"素":{"docs":{},"。":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}},"情":{"docs":{},"况":{"docs":{},"：":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}}}}},"类":{"docs":{},"中":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"：":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}},"的":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}},"一":{"docs":{},"个":{"docs":{},"内":{"docs":{},"部":{"docs":{},"枚":{"docs":{},"举":{"docs":{},"类":{"docs":{"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":0.02857142857142857}}}}}}}}}},"加":{"docs":{},"入":{"docs":{},"这":{"docs":{},"样":{"docs":{},"一":{"docs":{},"个":{"docs":{},"方":{"docs":{},"法":{"docs":{},"：":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}},"也":{"docs":{},"是":{"docs":{},"实":{"docs":{},"现":{"docs":{},"了":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}},"可":{"docs":{},"以":{"docs":{},"达":{"docs":{},"到":{"docs":{},"相":{"docs":{},"同":{"docs":{},"的":{"docs":{},"效":{"docs":{},"果":{"docs":{},"，":{"docs":{},"并":{"docs":{},"且":{"docs":{},"具":{"docs":{},"有":{"docs":{},"嗅":{"docs":{},"探":{"docs":{},"锁":{"docs":{},"定":{"docs":{},"，":{"docs":{},"多":{"docs":{},"路":{"docs":{},"分":{"docs":{},"支":{"docs":{},"通":{"docs":{},"知":{"docs":{},"等":{"docs":{},"扩":{"docs":{},"展":{"docs":{},"功":{"docs":{},"能":{"docs":{},"，":{"docs":{},"使":{"docs":{},"用":{"docs":{},"起":{"docs":{},"来":{"docs":{},"也":{"docs":{},"更":{"docs":{},"为":{"docs":{},"灵":{"docs":{},"活":{"docs":{},"。":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"上":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"而":{"docs":{},"加":{"docs":{},"到":{"docs":{},"非":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}},"的":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274},"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.012345679012345678}},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}},"作":{"docs":{},"用":{"docs":{},"就":{"docs":{},"是":{"docs":{},"设":{"docs":{},"置":{"docs":{},"计":{"docs":{},"划":{"docs":{},"任":{"docs":{},"务":{"docs":{},"，":{"docs":{},"不":{"docs":{},"过":{"docs":{},"它":{"docs":{},"是":{"docs":{},"不":{"docs":{},"能":{"docs":{},"单":{"docs":{},"独":{"docs":{},"使":{"docs":{},"用":{"docs":{},"的":{"docs":{},"，":{"docs":{},"它":{"docs":{},"只":{"docs":{},"负":{"docs":{},"责":{"docs":{},"按":{"docs":{},"照":{"docs":{},"要":{"docs":{},"求":{"docs":{},"启":{"docs":{},"动":{"docs":{},"任":{"docs":{},"务":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"需":{"docs":{},"要":{"docs":{},"把":{"docs":{},"要":{"docs":{},"执":{"docs":{},"行":{"docs":{},"的":{"docs":{},"任":{"docs":{},"务":{"docs":{},"提":{"docs":{},"供":{"docs":{},"给":{"docs":{},"它":{"docs":{},"，":{"docs":{},"负":{"docs":{},"责":{"docs":{},"提":{"docs":{},"供":{"docs":{},"任":{"docs":{},"务":{"docs":{},"的":{"docs":{},"就":{"docs":{},"是":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"子":{"docs":{},"类":{"docs":{},"：":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}},"。":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}},"内":{"docs":{},"部":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}},"型":{"docs":{},"的":{"docs":{},"成":{"docs":{},"员":{"docs":{},"变":{"docs":{},"量":{"docs":{},"。":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}},"：":{"docs":{},"可":{"docs":{},"重":{"docs":{},"入":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"j":{"docs":{},"d":{"docs":{},"k":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}},"，":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}},"这":{"docs":{},"就":{"docs":{},"用":{"docs":{},"到":{"docs":{},"了":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}},"主":{"docs":{},"要":{"docs":{},"负":{"docs":{},"责":{"docs":{},"日":{"docs":{},"期":{"docs":{},"转":{"docs":{},"换":{"docs":{},"与":{"docs":{},"格":{"docs":{},"式":{"docs":{},"化":{"docs":{},"，":{"docs":{},"但":{"docs":{},"是":{"docs":{},"它":{"docs":{},"是":{"docs":{},"非":{"docs":{},"线":{"docs":{},"程":{"docs":{},"安":{"docs":{},"全":{"docs":{},"的":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"只":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"来":{"docs":{},"解":{"docs":{},"决":{"docs":{},"这":{"docs":{},"个":{"docs":{},"问":{"docs":{},"题":{"docs":{},"：":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}}}}},"线":{"docs":{},"程":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}},"中":{"docs":{},"的":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}},"异":{"docs":{},"常":{"docs":{},"处":{"docs":{},"理":{"1":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}},"docs":{}}},"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":5.005263157894737}}}}}}}},"优":{"docs":{},"先":{"docs":{},"级":{"docs":{},"有":{"docs":{},"继":{"docs":{},"承":{"docs":{},"的":{"docs":{},"特":{"docs":{},"性":{"docs":{},"：":{"docs":{},"子":{"docs":{},"线":{"docs":{},"程":{"docs":{},"和":{"docs":{},"父":{"docs":{},"线":{"docs":{},"程":{"docs":{},"具":{"docs":{},"有":{"docs":{},"相":{"docs":{},"同":{"docs":{},"的":{"docs":{},"优":{"docs":{},"先":{"docs":{},"级":{"docs":{},"。":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}}}}}}}}}},"对":{"docs":{},"象":{"docs":{},"，":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}},"已":{"docs":{},"经":{"docs":{},"停":{"docs":{},"止":{"docs":{},"，":{"docs":{},"准":{"docs":{},"备":{"docs":{},"退":{"docs":{},"出":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}}}}}}}}}}},"提":{"docs":{},"供":{"docs":{},"了":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}},"的":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}},"优":{"docs":{},"先":{"docs":{},"级":{"1":{"docs":{},".":{"7":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"docs":{}}},"docs":{}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}},"执":{"docs":{},"行":{"docs":{},"，":{"docs":{},"在":{"docs":{},"它":{"docs":{},"执":{"docs":{},"行":{"docs":{},"完":{"docs":{},"之":{"docs":{},"后":{"docs":{},"再":{"docs":{},"执":{"docs":{},"行":{"docs":{},"一":{"docs":{},"下":{"docs":{},"再":{"docs":{},"结":{"docs":{},"束":{"docs":{},"。":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}}}}}}}}}}}},"状":{"docs":{},"态":{"1":{"docs":{},".":{"docs":{"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":0.02857142857142857}}}},"docs":{"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":5.0285714285714285}},"的":{"docs":{},"表":{"docs":{},"示":{"docs":{},"方":{"docs":{},"法":{"docs":{},"放":{"docs":{},"在":{"docs":{"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":0.02857142857142857}}}}}}}}}}}},"被":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}},"销":{"docs":{},"毁":{"docs":{},"时":{"docs":{},"的":{"docs":{},"状":{"docs":{},"态":{"docs":{"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":0.02857142857142857}}}}}}}}},"：":{"docs":{},"在":{"docs":{},"进":{"docs":{},"程":{"docs":{},"中":{"docs":{},"独":{"docs":{},"立":{"docs":{},"运":{"docs":{},"行":{"docs":{},"的":{"docs":{},"子":{"docs":{},"任":{"docs":{},"务":{"docs":{},"，":{"docs":{},"被":{"docs":{},"调":{"docs":{},"用":{"docs":{},"的":{"docs":{},"时":{"docs":{},"机":{"docs":{},"是":{"docs":{},"随":{"docs":{},"机":{"docs":{},"的":{"docs":{},"。":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}}}}}}}}},"安":{"docs":{},"全":{"docs":{},"包":{"docs":{},"括":{"docs":{},"原":{"docs":{},"子":{"docs":{},"性":{"docs":{},"和":{"docs":{},"可":{"docs":{},"见":{"docs":{},"性":{"docs":{},"两":{"docs":{},"个":{"docs":{},"方":{"docs":{},"面":{"docs":{},"。":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}},"间":{"docs":{},"通":{"docs":{},"信":{"docs":{"Ch3-线程间通信/":{"ref":"Ch3-线程间通信/","tf":5}}}}},"在":{"docs":{},"等":{"docs":{},"待":{"docs":{},"某":{"docs":{},"个":{"docs":{},"通":{"docs":{},"知":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}},"的":{"docs":{},"通":{"docs":{},"知":{"docs":{},"发":{"docs":{},"起":{"docs":{},"了":{"docs":{},"通":{"docs":{},"知":{"docs":{},"给":{"docs":{},"它":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}},"成":{"docs":{},"功":{"docs":{},"地":{"docs":{},"获":{"docs":{},"得":{"docs":{},"了":{"docs":{},"锁":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}},"状":{"docs":{},"态":{"docs":{},"转":{"docs":{},"换":{"docs":{},"示":{"docs":{},"意":{"docs":{},"图":{"docs":{},"如":{"docs":{},"下":{"docs":{},"：":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}},"试":{"docs":{},"图":{"docs":{},"获":{"docs":{},"得":{"docs":{},"一":{"docs":{},"个":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"但":{"docs":{},"该":{"docs":{},"锁":{"docs":{},"正":{"docs":{},"被":{"docs":{},"其":{"docs":{},"他":{"docs":{},"线":{"docs":{},"程":{"docs":{},"持":{"docs":{},"有":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}},"调":{"docs":{},"用":{"docs":{},"的":{"docs":{},"阻":{"docs":{},"塞":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}},"都":{"docs":{},"被":{"docs":{},"唤":{"docs":{},"醒":{"docs":{},"向":{"docs":{},"下":{"docs":{},"执":{"docs":{},"行":{"docs":{},"，":{"docs":{},"然":{"docs":{},"而":{"docs":{},"只":{"docs":{},"添":{"docs":{},"加":{"docs":{},"了":{"docs":{},"一":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{},"，":{"docs":{},"两":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"却":{"docs":{},"执":{"docs":{},"行":{"docs":{},"了":{"docs":{},"两":{"docs":{},"次":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"进":{"docs":{},"入":{"docs":{},"了":{"docs":{},"，":{"docs":{},"并":{"docs":{},"进":{"docs":{},"入":{"docs":{},"了":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}},"要":{"docs":{},"等":{"docs":{},"待":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}},"是":{"docs":{},"否":{"docs":{},"在":{"docs":{},"等":{"docs":{},"待":{"docs":{},"获":{"docs":{},"取":{"docs":{},"此":{"docs":{},"锁":{"docs":{},"。":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}},"实":{"docs":{},"例":{"docs":{},"化":{"docs":{},"后":{"docs":{},"还":{"docs":{},"未":{"docs":{},"执":{"docs":{},"行":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},"方":{"docs":{},"法":{"docs":{"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":0.02857142857142857}}}}}}}}}}}}}}}}}}},"进":{"docs":{},"入":{"docs":{},"运":{"docs":{},"行":{"docs":{},"状":{"docs":{},"态":{"docs":{},"，":{"docs":{},"可":{"docs":{},"能":{"docs":{},"真":{"docs":{},"的":{"docs":{},"在":{"docs":{},"执":{"docs":{},"行":{"docs":{},"，":{"docs":{},"也":{"docs":{},"可":{"docs":{},"能":{"docs":{},"在":{"docs":{},"抢":{"docs":{},"c":{"docs":{},"p":{"docs":{},"u":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"片":{"docs":{"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":0.02857142857142857}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"组":{"1":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}},"docs":{}}},"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":5.00625}},"中":{"docs":{},"活":{"docs":{},"动":{"docs":{},"线":{"docs":{},"程":{"docs":{},"的":{"docs":{},"数":{"docs":{},"量":{"docs":{},"：":{"2":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}},"4":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}},"docs":{}}}}}}}}}},"的":{"docs":{},"作":{"docs":{},"用":{"docs":{},"：":{"docs":{},"批":{"docs":{},"量":{"docs":{},"管":{"docs":{},"理":{"docs":{},"线":{"docs":{},"程":{"docs":{},"或":{"docs":{},"者":{"docs":{},"线":{"docs":{},"程":{"docs":{},"组":{"docs":{},"，":{"docs":{},"线":{"docs":{},"程":{"docs":{},"组":{"docs":{},"中":{"docs":{},"既":{"docs":{},"可":{"docs":{},"以":{"docs":{},"有":{"docs":{},"线":{"docs":{},"程":{"docs":{},"对":{"docs":{},"象":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"有":{"docs":{},"线":{"docs":{},"程":{"docs":{},"组":{"docs":{},"对":{"docs":{},"象":{"docs":{},"。":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"名":{"docs":{},"称":{"docs":{},"：":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}},"终":{"docs":{},"止":{"docs":{},"一":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"复":{"docs":{},"杂":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}},"线":{"docs":{},"程":{"docs":{},"并":{"docs":{},"不":{"docs":{},"能":{"docs":{},"给":{"docs":{},"我":{"docs":{},"们":{"docs":{},"这":{"docs":{},"样":{"docs":{},"的":{"docs":{},"机":{"docs":{},"会":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}},"继":{"docs":{},"承":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"类":{"1":{"docs":{},".":{"2":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"docs":{}}},"docs":{}}},"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}},"让":{"docs":{},"“":{"docs":{},"正":{"docs":{},"在":{"docs":{},"执":{"docs":{},"行":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"”":{"docs":{},"即":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}},"设":{"docs":{},"置":{"docs":{},"方":{"docs":{},"法":{"docs":{},"：":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"d":{"docs":{},"a":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{},";":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}}}}}}}}}},"线":{"docs":{},"程":{"docs":{},"优":{"docs":{},"先":{"docs":{},"级":{"docs":{},"：":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}}}},"创":{"docs":{},"建":{"docs":{},"守":{"docs":{},"护":{"docs":{},"线":{"docs":{},"程":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}},"多":{"docs":{},"个":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}},"调":{"docs":{},"用":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}},"阻":{"docs":{},"塞":{"docs":{},"式":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}},"了":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"v":{"docs":{},"e":{"docs":{},"方":{"docs":{},"法":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}},"度":{"docs":{},"。":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}},"；":{"docs":{},"反":{"docs":{},"之":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"被":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}},"资":{"docs":{},"源":{"docs":{},"，":{"docs":{},"将":{"docs":{},"它":{"docs":{},"让":{"docs":{},"给":{"docs":{},"其":{"docs":{},"他":{"docs":{},"任":{"docs":{},"务":{"docs":{},"去":{"docs":{},"占":{"docs":{},"用":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}},"后":{"docs":{},"，":{"docs":{},"他":{"docs":{},"就":{"docs":{},"会":{"docs":{},"变":{"docs":{},"成":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"间":{"docs":{},"的":{"docs":{},"通":{"docs":{},"信":{"docs":{},"机":{"docs":{},"制":{"docs":{},"。":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}},"过":{"docs":{},"。":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}},"返":{"docs":{},"回":{"docs":{},"代":{"docs":{},"码":{"docs":{},"段":{"docs":{},"正":{"docs":{},"在":{"docs":{},"被":{"docs":{},"哪":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"调":{"docs":{},"用":{"docs":{},"的":{"docs":{},"信":{"docs":{},"息":{"docs":{},"。":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"，":{"docs":{},"休":{"docs":{},"眠":{"docs":{},"指":{"docs":{},"定":{"docs":{},"的":{"docs":{},"毫":{"docs":{},"秒":{"docs":{},"数":{"docs":{},"。":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}},"为":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"初":{"docs":{},"始":{"docs":{},"值":{"docs":{},"为":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}}}}}}}}},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"尤":{"docs":{},"其":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}},"问":{"docs":{},"题":{"docs":{},"的":{"docs":{},"详":{"docs":{},"细":{"docs":{},"说":{"docs":{},"明":{"docs":{},"如":{"docs":{},"下":{"docs":{},"：":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}},"是":{"docs":{},"因":{"docs":{},"为":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}},"我":{"docs":{},"们":{"docs":{},"通":{"docs":{},"过":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}},"种":{"docs":{},"不":{"docs":{},"同":{"docs":{},"源":{"docs":{},"自":{"docs":{},"于":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}},"里":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"关":{"docs":{},"于":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},".":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"和":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"结":{"docs":{},"果":{"docs":{},"的":{"docs":{},"不":{"docs":{},"同":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"详":{"docs":{},"细":{"docs":{},"的":{"docs":{},"例":{"docs":{},"子":{"docs":{},"和":{"docs":{},"下":{"docs":{},"面":{"docs":{},"的":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"可":{"docs":{},"以":{"docs":{},"引":{"docs":{},"申":{"docs":{},"出":{"docs":{},"一":{"docs":{},"个":{"docs":{},"问":{"docs":{},"题":{"docs":{},"：":{"docs":{},"如":{"docs":{},"何":{"docs":{},"判":{"docs":{},"断":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}},"发":{"docs":{},"出":{"docs":{},"了":{"docs":{},"通":{"docs":{},"知":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{},"厨":{"docs":{},"师":{"docs":{},"和":{"docs":{},"服":{"docs":{},"务":{"docs":{},"员":{"docs":{},"之":{"docs":{},"间":{"docs":{},"在":{"docs":{},"菜":{"docs":{},"品":{"docs":{},"传":{"docs":{},"递":{"docs":{},"台":{"docs":{},"上":{"docs":{},"传":{"docs":{},"递":{"docs":{},"菜":{"docs":{},"品":{"docs":{},"的":{"docs":{},"例":{"docs":{},"子":{"docs":{},"来":{"docs":{},"说":{"docs":{},"明":{"docs":{},"什":{"docs":{},"么":{"docs":{},"是":{"docs":{},"等":{"docs":{},"待":{"docs":{},"/":{"docs":{},"通":{"docs":{},"知":{"docs":{},"机":{"docs":{},"制":{"docs":{},"。":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"三":{"docs":{},"步":{"docs":{},"是":{"docs":{},"典":{"docs":{},"型":{"docs":{},"的":{"docs":{},"非":{"docs":{},"原":{"docs":{},"子":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"在":{"docs":{},"多":{"docs":{},"线":{"docs":{},"程":{"docs":{},"的":{"docs":{},"环":{"docs":{},"境":{"docs":{},"中":{"docs":{},"运":{"docs":{},"行":{"docs":{},"很":{"docs":{},"容":{"docs":{},"易":{"docs":{},"出":{"docs":{},"现":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"个":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.008547008547008548}},"时":{"docs":{},"候":{"docs":{},"生":{"docs":{},"产":{"docs":{},"出":{"docs":{},"来":{"docs":{},"就":{"docs":{},"会":{"docs":{},"被":{"docs":{},"消":{"docs":{},"费":{"docs":{},"，":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}},"错":{"docs":{},"误":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"主":{"docs":{},"要":{"docs":{},"是":{"docs":{},"因":{"docs":{},"为":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}}}}}}},"些":{"docs":{},"对":{"docs":{},"象":{"docs":{},"都":{"docs":{},"是":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}},"时":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{},"依":{"docs":{},"旧":{"docs":{},"为":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"，":{"docs":{},"这":{"docs":{},"个":{"docs":{},"时":{"docs":{},"候":{"docs":{},"线":{"docs":{},"程":{"docs":{},"二":{"docs":{},"也":{"docs":{},"可":{"docs":{},"以":{"docs":{},"进":{"docs":{},"入":{"docs":{},"i":{"docs":{},"f":{"docs":{},"代":{"docs":{},"码":{"docs":{},"块":{"docs":{},"，":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"样":{"docs":{},"就":{"docs":{},"会":{"docs":{},"有":{"docs":{},"多":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"进":{"docs":{},"入":{"docs":{},"i":{"docs":{},"f":{"docs":{},"代":{"docs":{},"码":{"docs":{},"块":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}},"程":{"docs":{},"序":{"docs":{},"的":{"docs":{},"运":{"docs":{},"行":{"docs":{},"效":{"docs":{},"率":{"docs":{},"会":{"docs":{},"大":{"docs":{},"打":{"docs":{},"折":{"docs":{},"扣":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"我":{"docs":{},"们":{"docs":{},"只":{"docs":{},"有":{"docs":{},"在":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}}}}}}},"进":{"docs":{},"入":{"docs":{},"m":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},"的":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"块":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0023781212841854932}}}}}}}}}}}}}}}}}}}}}}},"程":{"docs":{},"：":{"docs":{},"受":{"docs":{},"操":{"docs":{},"作":{"docs":{},"系":{"docs":{},"统":{"docs":{},"管":{"docs":{},"理":{"docs":{},"的":{"docs":{},"基":{"docs":{},"本":{"docs":{},"运":{"docs":{},"行":{"docs":{},"单":{"docs":{},"元":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"理":{"docs":{},"解":{"docs":{},"成":{"docs":{},"运":{"docs":{},"行":{"docs":{},"在":{"docs":{},"内":{"docs":{},"存":{"docs":{},"中":{"docs":{},"的":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"行":{"docs":{},"了":{"docs":{},"两":{"docs":{},"次":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}},"那":{"docs":{},"行":{"docs":{},"，":{"docs":{},"程":{"docs":{},"序":{"docs":{},"会":{"docs":{},"输":{"docs":{},"出":{"docs":{},"：":{"docs":{},"\"":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}},"根":{"docs":{},"本":{"docs":{},"无":{"docs":{},"法":{"docs":{},"输":{"docs":{},"出":{"docs":{},"\"":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}}}}}}}}}}},"么":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}},"重":{"docs":{},"点":{"docs":{},"在":{"docs":{},"于":{"docs":{},"观":{"docs":{},"察":{"docs":{"Ch1-Java多线程技能/Java多线程概述.html":{"ref":"Ch1-Java多线程技能/Java多线程概述.html","tf":0.0011890606420927466}}}}}}}},">":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.002883922134102379}},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"1":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}},"2":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}},"docs":{}}}}}},"[":{"docs":{},"i":{"docs":{},"d":{"docs":{},"值":{"docs":{},"]":{"docs":{},"，":{"docs":{},"查":{"docs":{},"看":{"docs":{},"结":{"docs":{},"果":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}},"\\":{"docs":{},"\\":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}},")":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0028790786948176585}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"(":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.018518518518518517},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.007352941176470588}},"(":{"docs":{},")":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{},")":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.007352941176470588}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.011029411764705883}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.007352941176470588}}},";":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.014705882352941176}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.011029411764705883}},"s":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"s":{"docs":{},"i":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"y":{"docs":{},"y":{"docs":{},"y":{"docs":{},"i":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.007352941176470588}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0028790786948176585}},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}},".":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}},"b":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}},"e":{"docs":{},")":{"docs":{},"：":{"docs":{},"等":{"docs":{},"待":{"docs":{},"到":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"y":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}},")":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}},",":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}},"设":{"docs":{},"置":{"docs":{},"任":{"docs":{},"务":{"docs":{},"开":{"docs":{},"始":{"docs":{},"执":{"docs":{},"行":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"1":{"docs":{},".":{"5":{"docs":{},".":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}},"docs":{}}},"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}}}}}}},"f":{"docs":{},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"a":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"t":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.004677268475210477}},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}},")":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}},".":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"u":{"docs":{},"p":{"docs":{},"a":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}},"b":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0037418147801683817}}}}}}}}},"c":{"docs":{},"l":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}},"双":{"docs":{},"检":{"docs":{},"查":{"docs":{},"锁":{"docs":{},"机":{"docs":{},"制":{"1":{"docs":{},".":{"3":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}},"docs":{}}},"docs":{}}},"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}},"d":{"docs":{},"\"":{"docs":{},")":{"docs":{},".":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}}}}}}}}}}}}}}},";":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}},"w":{"docs":{},"a":{"docs":{},"i":{"docs":{},"t":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.015902712815715623},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.007194244604316547},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}},"(":{"docs":{},")":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.002806361085126286},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}},";":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}},"等":{"docs":{},"待":{"docs":{},"的":{"docs":{},"条":{"docs":{},"件":{"docs":{},"发":{"docs":{},"生":{"docs":{},"了":{"docs":{},"变":{"docs":{},"化":{"1":{"docs":{},".":{"5":{"docs":{},".":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"docs":{}}},"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}},"：":{"docs":{},"使":{"docs":{},"调":{"docs":{},"用":{"docs":{},"该":{"docs":{},"方":{"docs":{},"法":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"释":{"docs":{},"放":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"从":{"docs":{},"运":{"docs":{},"行":{"docs":{},"状":{"docs":{},"态":{"docs":{},"中":{"docs":{},"退":{"docs":{},"出":{"docs":{},"，":{"docs":{},"进":{"docs":{},"入":{"docs":{},"等":{"docs":{},"待":{"docs":{},"队":{"docs":{},"列":{"docs":{},"，":{"docs":{},"直":{"docs":{},"到":{"docs":{},"接":{"docs":{},"到":{"docs":{},"通":{"docs":{},"知":{"docs":{},"或":{"docs":{},"者":{"docs":{},"被":{"docs":{},"中":{"docs":{},"断":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}},")":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}},"/":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"i":{"docs":{},"f":{"docs":{},"y":{"docs":{},"机":{"docs":{},"制":{"docs":{},"导":{"docs":{},"致":{"docs":{},"的":{"docs":{},"程":{"docs":{},"序":{"docs":{},"逻":{"docs":{},"辑":{"docs":{},"混":{"docs":{},"乱":{"1":{"docs":{},".":{"4":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"docs":{}}},"docs":{}}},"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"没":{"docs":{},"人":{"docs":{},"通":{"docs":{},"知":{"docs":{},"它":{"docs":{},"可":{"docs":{},"以":{"docs":{},"不":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0014419610670511895}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":0.02857142857142857}}}}}}}}},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"当":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},"i":{"docs":{},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"不":{"docs":{},"加":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}},"存":{"docs":{},"在":{"docs":{},"，":{"docs":{},"实":{"docs":{},"例":{"docs":{},"化":{"docs":{},"该":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"并":{"docs":{},"放":{"docs":{},"入":{"docs":{},"池":{"docs":{},"中":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}},"过":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}},"要":{"docs":{},"注":{"docs":{},"意":{"docs":{},"！":{"docs":{},"！":{"docs":{},"！":{"docs":{},"使":{"docs":{},"用":{"docs":{},"s":{"docs":{},"y":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}},"为":{"docs":{},"了":{"docs":{},"保":{"docs":{},"证":{"docs":{},"“":{"docs":{},"职":{"docs":{},"责":{"docs":{},"单":{"docs":{},"一":{"docs":{},"原":{"docs":{},"则":{"docs":{},"”":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"要":{"docs":{},"把":{"docs":{},"这":{"docs":{},"个":{"docs":{},"e":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"用":{"docs":{},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},"包":{"docs":{},"装":{"docs":{},"一":{"docs":{},"下":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"可":{"docs":{},"能":{"docs":{},"有":{"docs":{},"多":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"都":{"docs":{},"进":{"docs":{},"入":{"docs":{},"了":{"docs":{},"上":{"docs":{},"一":{"docs":{},"个":{"docs":{},"i":{"docs":{},"f":{"docs":{},"块":{"docs":{},"，":{"docs":{},"作":{"docs":{},"用":{"docs":{},"这":{"docs":{},"里":{"docs":{},"要":{"docs":{},"再":{"docs":{},"加":{"docs":{},"一":{"docs":{},"层":{"docs":{},"判":{"docs":{},"断":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"当":{"docs":{},"我":{"docs":{},"们":{"docs":{},"在":{"docs":{},"一":{"docs":{},"个":{"docs":{},"程":{"docs":{},"序":{"docs":{},"中":{"docs":{},"对":{"docs":{},"单":{"docs":{},"例":{"docs":{},"对":{"docs":{},"象":{"docs":{},"进":{"docs":{},"行":{"docs":{},"了":{"docs":{},"序":{"docs":{},"列":{"docs":{},"化":{"docs":{},"和":{"docs":{},"反":{"docs":{},"序":{"docs":{},"列":{"docs":{},"化":{"docs":{},"操":{"docs":{},"（":{"docs":{},"必":{"docs":{},"须":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"程":{"docs":{},"序":{"docs":{},"中":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"一":{"docs":{},"个":{"docs":{},"程":{"docs":{},"序":{"docs":{},"进":{"docs":{},"行":{"docs":{},"序":{"docs":{},"列":{"docs":{},"化":{"docs":{},"，":{"docs":{},"另":{"docs":{},"一":{"docs":{},"个":{"docs":{},"程":{"docs":{},"序":{"docs":{},"进":{"docs":{},"行":{"docs":{},"反":{"docs":{},"序":{"docs":{},"列":{"docs":{},"化":{"docs":{},"是":{"docs":{},"肯":{"docs":{},"定":{"docs":{},"不":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"）":{"docs":{},"，":{"docs":{},"序":{"docs":{},"列":{"docs":{},"化":{"docs":{},"前":{"docs":{},"后":{"docs":{},"的":{"docs":{},"单":{"docs":{},"例":{"docs":{},"对":{"docs":{},"象":{"docs":{},"并":{"docs":{},"不":{"docs":{},"是":{"docs":{},"同":{"docs":{},"一":{"docs":{},"个":{"docs":{},"对":{"docs":{},"象":{"docs":{},"一":{"docs":{},"个":{"docs":{},"。":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"会":{"docs":{},"发":{"docs":{},"生":{"docs":{},"阻":{"docs":{},"塞":{"docs":{},"，":{"docs":{},"而":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}},"放":{"docs":{},"开":{"docs":{},"锁":{"docs":{},"。":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}},"再":{"docs":{},"计":{"docs":{},"时":{"docs":{},"了":{"docs":{},"，":{"docs":{},"而":{"docs":{},"是":{"docs":{},"往":{"docs":{},"下":{"docs":{},"执":{"docs":{},"行":{"docs":{},"，":{"docs":{},"而":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}}}}}},"释":{"docs":{},"放":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"原":{"docs":{},"因":{"docs":{},"是":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}},"用":{"docs":{},"v":{"docs":{},"o":{"docs":{},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"修":{"docs":{},"饰":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}}}},"为":{"docs":{},"了":{"docs":{},"提":{"docs":{},"高":{"docs":{},"性":{"docs":{},"能":{"docs":{},"减":{"docs":{},"小":{"docs":{},"内":{"docs":{},"存":{"docs":{},"开":{"docs":{},"销":{"docs":{},"，":{"docs":{},"在":{"docs":{},"实":{"docs":{},"例":{"docs":{},"化":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"常":{"docs":{},"量":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"进":{"docs":{},"行":{"docs":{},"了":{"docs":{},"如":{"docs":{},"下":{"docs":{},"优":{"docs":{},"化":{"docs":{},"：":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"什":{"docs":{},"么":{"docs":{},"需":{"docs":{},"要":{"docs":{},"锁":{"docs":{},"不":{"docs":{},"是":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}},"说":{"docs":{},"等":{"docs":{},"待":{"docs":{},"/":{"docs":{},"通":{"docs":{},"知":{"docs":{},"机":{"docs":{},"制":{"docs":{},"可":{"docs":{},"以":{"docs":{},"节":{"docs":{},"约":{"docs":{},"系":{"docs":{},"统":{"docs":{},"资":{"docs":{},"源":{"docs":{},"呢":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"如":{"docs":{},"果":{"docs":{},"没":{"docs":{},"有":{"docs":{},"等":{"docs":{},"待":{"docs":{},"/":{"docs":{},"通":{"docs":{},"知":{"docs":{},"机":{"docs":{},"制":{"docs":{},"，":{"docs":{},"两":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"之":{"docs":{},"间":{"docs":{},"想":{"docs":{},"要":{"docs":{},"进":{"docs":{},"行":{"docs":{},"通":{"docs":{},"信":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"只":{"docs":{},"能":{"docs":{},"用":{"docs":{},"一":{"docs":{},"个":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"开":{"docs":{},"辟":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"常":{"docs":{},"量":{"docs":{},"池":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}},"：":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}},"每":{"docs":{},"个":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}},"产":{"docs":{},"生":{"docs":{},"数":{"docs":{},"据":{"docs":{},"不":{"docs":{},"同":{"docs":{},"步":{"docs":{},"问":{"docs":{},"题":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}},"死":{"docs":{},"锁":{"1":{"docs":{},".":{"7":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"docs":{}}},"docs":{}}},"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}},"的":{"docs":{},"本":{"docs":{},"质":{"docs":{},"：":{"docs":{},"两":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"在":{"docs":{},"需":{"docs":{},"要":{"docs":{},"对":{"docs":{},"方":{"docs":{},"掌":{"docs":{},"握":{"docs":{},"的":{"docs":{},"资":{"docs":{},"源":{"docs":{},"同":{"docs":{},"时":{"docs":{},"又":{"docs":{},"不":{"docs":{},"肯":{"docs":{},"放":{"docs":{},"开":{"docs":{},"自":{"docs":{},"己":{"docs":{},"手":{"docs":{},"中":{"docs":{},"的":{"docs":{},"资":{"docs":{},"源":{"docs":{},"，":{"docs":{},"由":{"docs":{},"此":{"docs":{},"陷":{"docs":{},"入":{"docs":{},"的":{"docs":{},"胶":{"docs":{},"着":{"docs":{},"状":{"docs":{},"态":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"程":{"docs":{},"序":{"docs":{},"：":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}},"代":{"docs":{},"码":{"docs":{},"块":{"docs":{},"中":{"docs":{},"，":{"docs":{},"就":{"docs":{},"会":{"docs":{},"导":{"docs":{},"致":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}},"是":{"docs":{},"异":{"docs":{},"步":{"docs":{},"的":{"docs":{},"。":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}},"的":{"docs":{},"作":{"docs":{},"用":{"docs":{},"是":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"。":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}},"如":{"docs":{},"下":{"docs":{},"：":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.012476007677543186},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.018404907975460124},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.01777362020579981},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.02158273381294964},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.010814708002883922}},"线":{"docs":{},"程":{"docs":{},"调":{"docs":{},"用":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{},"方":{"docs":{},"法":{"docs":{},"都":{"docs":{},"是":{"docs":{},"同":{"docs":{},"步":{"docs":{},"的":{"docs":{},"。":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}},")":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}},"为":{"docs":{},"：":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}},"作":{"docs":{},"为":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"只":{"docs":{},"要":{"docs":{},"我":{"docs":{},"们":{"docs":{},"对":{"docs":{},"两":{"docs":{},"个":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}},"而":{"docs":{},"用":{"docs":{},"其":{"docs":{},"他":{"docs":{},"对":{"docs":{},"象":{"docs":{},"，":{"docs":{},"比":{"docs":{},"如":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}},"用":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"假":{"docs":{},"设":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}},"有":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}},"先":{"docs":{},"搭":{"docs":{},"建":{"docs":{},"环":{"docs":{},"境":{"docs":{},"如":{"docs":{},"下":{"docs":{},"：":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}},"说":{"docs":{},"结":{"docs":{},"论":{"docs":{},"：":{"docs":{},"s":{"docs":{},"y":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}},"把":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"日":{"docs":{},"期":{"docs":{},"转":{"docs":{},"换":{"docs":{},"成":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}}}}}}}}}},"出":{"docs":{},"错":{"docs":{},"原":{"docs":{},"因":{"docs":{},"：":{"docs":{},"m":{"docs":{},"y":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}},"现":{"docs":{},"这":{"docs":{},"个":{"docs":{},"错":{"docs":{},"误":{"docs":{},"的":{"docs":{},"主":{"docs":{},"要":{"docs":{},"原":{"docs":{},"因":{"docs":{},"是":{"docs":{},"：":{"docs":{},"在":{"docs":{},"文":{"docs":{},"件":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}},"了":{"docs":{},"异":{"docs":{},"常":{"docs":{},"\"":{"docs":{},")":{"docs":{},";":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.010526315789473684}}}}}}}}}},"则":{"docs":{},"是":{"docs":{},"给":{"docs":{},"对":{"docs":{},"象":{"docs":{},"上":{"docs":{},"锁":{"docs":{},"。":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}},"创":{"docs":{},"建":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"常":{"docs":{},"量":{"docs":{},"时":{"docs":{},"，":{"docs":{},"首":{"docs":{},"先":{"docs":{},"检":{"docs":{},"查":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"常":{"docs":{},"量":{"docs":{},"池":{"docs":{},"是":{"docs":{},"否":{"docs":{},"存":{"docs":{},"在":{"docs":{},"该":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}},"一":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"再":{"docs":{},"调":{"docs":{},"用":{"docs":{},"它":{"docs":{},"的":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}},"同":{"docs":{},"步":{"docs":{},"代":{"docs":{},"码":{"docs":{},"块":{"docs":{},"使":{"docs":{},"用":{"docs":{},"用":{"docs":{},"相":{"docs":{},"同":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"做":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"这":{"docs":{},"两":{"docs":{},"个":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}},"就":{"docs":{},"是":{"docs":{},"同":{"docs":{},"步":{"docs":{},"的":{"docs":{},"，":{"docs":{},"这":{"docs":{},"会":{"docs":{},"比":{"docs":{},"较":{"docs":{},"容":{"docs":{},"易":{"docs":{},"带":{"docs":{},"来":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"我":{"docs":{},"们":{"docs":{},"一":{"docs":{},"般":{"docs":{},"都":{"docs":{},"不":{"docs":{},"使":{"docs":{},"用":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"放":{"docs":{},"在":{"docs":{},"非":{"docs":{},"同":{"docs":{},"步":{"docs":{},"方":{"docs":{},"法":{"docs":{},"中":{"docs":{},"执":{"docs":{},"行":{"docs":{},"产":{"docs":{},"生":{"docs":{},"的":{"docs":{},"脏":{"docs":{},"读":{"docs":{},"问":{"docs":{},"题":{"1":{"docs":{},".":{"4":{"docs":{},".":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"docs":{}}},"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"只":{"docs":{},"要":{"docs":{},"证":{"docs":{},"明":{"docs":{},"这":{"docs":{},"两":{"docs":{},"部":{"docs":{},"分":{"docs":{},"是":{"docs":{},"同":{"docs":{},"步":{"docs":{},"的":{"docs":{},"，":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"说":{"docs":{},"明":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}},"方":{"docs":{},"法":{"docs":{},"时":{"docs":{},"呈":{"docs":{},"同":{"docs":{},"步":{"docs":{},"效":{"docs":{},"果":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}},"时":{"docs":{},"子":{"docs":{},"线":{"docs":{},"程":{"docs":{},"还":{"docs":{},"可":{"docs":{},"以":{"docs":{},"通":{"docs":{},"过":{"docs":{},"覆":{"docs":{},"盖":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}}}},"因":{"docs":{},"为":{"docs":{},"这":{"docs":{},"样":{"docs":{},"可":{"docs":{},"以":{"docs":{},"提":{"docs":{},"高":{"docs":{},"程":{"docs":{},"序":{"docs":{},"的":{"docs":{},"运":{"docs":{},"行":{"docs":{},"效":{"docs":{},"率":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"在":{"docs":{},"一":{"docs":{},"个":{"docs":{},"类":{"docs":{},"中":{"docs":{},"有":{"docs":{},"很":{"docs":{},"多":{"docs":{},"个":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}},"实":{"docs":{},"例":{"docs":{},"化":{"docs":{},"一":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"组":{"docs":{},"时":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"不":{"docs":{},"指":{"docs":{},"定":{"docs":{},"所":{"docs":{},"属":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"组":{"docs":{},"，":{"docs":{},"就":{"docs":{},"自":{"docs":{},"动":{"docs":{},"归":{"docs":{},"到":{"docs":{},"当":{"docs":{},"前":{"docs":{},"线":{"docs":{},"程":{"docs":{},"对":{"docs":{},"象":{"docs":{},"所":{"docs":{},"属":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"组":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"是":{"docs":{},"对":{"docs":{},"一":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"类":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"对":{"docs":{},"象":{"docs":{},"设":{"docs":{},"置":{"docs":{},"异":{"docs":{},"常":{"docs":{},"处":{"docs":{},"理":{"docs":{},"器":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"是":{"docs":{},"线":{"docs":{},"程":{"docs":{},"类":{"docs":{},"在":{"docs":{},"调":{"docs":{},"用":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"给":{"docs":{},"指":{"docs":{},"定":{"docs":{},"线":{"docs":{},"程":{"docs":{},"对":{"docs":{},"象":{"docs":{},"设":{"docs":{},"置":{"docs":{},"异":{"docs":{},"常":{"docs":{},"处":{"docs":{},"理":{"docs":{},"器":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"是":{"docs":{},"线":{"docs":{},"程":{"docs":{},"对":{"docs":{},"象":{"docs":{},"在":{"docs":{},"调":{"docs":{},"用":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"声":{"docs":{},"明":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"或":{"docs":{},"者":{"docs":{},"代":{"docs":{},"码":{"docs":{},"块":{"docs":{},"一":{"docs":{},"定":{"docs":{},"同":{"docs":{},"步":{"docs":{},"的":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"是":{"docs":{},"排":{"docs":{},"队":{"docs":{},"运":{"docs":{},"行":{"docs":{},"的":{"docs":{},"。":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}}},"处":{"docs":{},"，":{"docs":{},"当":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}},"调":{"docs":{},"用":{"docs":{},"了":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}},"是":{"docs":{},"方":{"docs":{},"法":{"docs":{},"的":{"docs":{},"关":{"docs":{},"键":{"docs":{},")":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}},"理":{"docs":{},"就":{"docs":{},"可":{"docs":{},"以":{"docs":{},"直":{"docs":{},"接":{"docs":{},"写":{"docs":{},"入":{"docs":{},"。":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}},"线":{"docs":{},"程":{"docs":{},"中":{"docs":{},"的":{"docs":{},"异":{"docs":{},"常":{"1":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}},"docs":{}}},"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}}}},"组":{"docs":{},"中":{"docs":{},"的":{"docs":{},"异":{"docs":{},"常":{"1":{"docs":{},".":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}},"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}}}}}}}},"的":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"a":{"docs":{},"w":{"docs":{},"a":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{},"替":{"docs":{},"换":{"docs":{},"成":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"a":{"docs":{},"w":{"docs":{},"a":{"docs":{},"i":{"docs":{},"t":{"docs":{},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"u":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{},"，":{"docs":{},"得":{"docs":{},"到":{"docs":{},"如":{"docs":{},"下":{"docs":{},"结":{"docs":{},"果":{"docs":{},"：":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{},"替":{"docs":{},"换":{"docs":{},"成":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"u":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"得":{"docs":{},"到":{"docs":{},"如":{"docs":{},"下":{"docs":{},"运":{"docs":{},"行":{"docs":{},"结":{"docs":{},"果":{"docs":{},"：":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"多":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"执":{"docs":{},"行":{"docs":{},"s":{"docs":{},"y":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"实":{"docs":{},"现":{"docs":{},"部":{"docs":{},"分":{"docs":{},"线":{"docs":{},"程":{"docs":{},"通":{"docs":{},"知":{"1":{"docs":{},".":{"2":{"docs":{},".":{"3":{"docs":{},".":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{}}},"docs":{}}},"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}},"进":{"docs":{},"入":{"docs":{},"i":{"docs":{},"f":{"docs":{},"代":{"docs":{},"码":{"docs":{},"块":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"都":{"docs":{},"会":{"docs":{},"运":{"docs":{},"行":{"docs":{},"这":{"docs":{},"一":{"docs":{},"行":{"docs":{},"，":{"docs":{},"就":{"docs":{},"产":{"docs":{},"生":{"docs":{},"了":{"docs":{},"多":{"docs":{},"个":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{},"对":{"docs":{},"象":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"线":{"docs":{},"程":{"docs":{},"访":{"docs":{},"问":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}},"单":{"docs":{},"例":{"docs":{},"模":{"docs":{},"式":{"docs":{},"的":{"docs":{},"实":{"docs":{},"现":{"1":{"docs":{},".":{"3":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}},"docs":{}}},"docs":{}}},"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}},"生":{"docs":{},"产":{"docs":{},"一":{"docs":{},"消":{"docs":{},"费":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}},"多":{"docs":{},"消":{"docs":{},"费":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}}}}}}},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"常":{"docs":{},"量":{"docs":{},"池":{"docs":{},"实":{"docs":{},"现":{"docs":{},"的":{"docs":{},"基":{"docs":{},"础":{"docs":{},"：":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}},"是":{"docs":{},"不":{"docs":{},"可":{"docs":{},"变":{"docs":{},"的":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"不":{"docs":{},"用":{"docs":{},"担":{"docs":{},"心":{"docs":{},"数":{"docs":{},"据":{"docs":{},"冲":{"docs":{},"突":{"docs":{},"进":{"docs":{},"行":{"docs":{},"共":{"docs":{},"享":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}},"流":{"docs":{},"和":{"docs":{},"字":{"docs":{},"节":{"docs":{},"流":{"docs":{},"的":{"docs":{},"操":{"docs":{},"作":{"docs":{},"差":{"docs":{},"不":{"docs":{},"多":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}},"：":{"docs":{},"p":{"docs":{},"i":{"docs":{},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"&":{"docs":{},"p":{"docs":{},"i":{"docs":{},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}},"e":{"docs":{},"r":{"1":{"docs":{},".":{"7":{"docs":{},".":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}},"节":{"docs":{},"流":{"docs":{},"：":{"docs":{},"p":{"docs":{},"i":{"docs":{},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},"&":{"docs":{},"p":{"docs":{},"i":{"docs":{},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"1":{"docs":{},".":{"6":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"docs":{}}},"docs":{}}},"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"存":{"docs":{},"在":{"docs":{},"该":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"，":{"docs":{},"返":{"docs":{},"回":{"docs":{},"引":{"docs":{},"用":{"docs":{},"实":{"docs":{},"例":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}},"每":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"中":{"docs":{},"的":{"docs":{},"，":{"docs":{},"当":{"docs":{},"一":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"它":{"docs":{},"要":{"docs":{},"获":{"docs":{},"得":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}}}}}}}}}},"已":{"docs":{},"经":{"docs":{},"可":{"docs":{},"以":{"docs":{},"调":{"docs":{},"用":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}},"发":{"docs":{},"出":{"docs":{},"通":{"docs":{},"知":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}},"常":{"docs":{},"量":{"docs":{},"池":{"docs":{},"缓":{"docs":{},"存":{"docs":{},"的":{"docs":{},"功":{"docs":{},"能":{"docs":{},"，":{"docs":{},"这":{"docs":{},"里":{"docs":{},"我":{"docs":{},"们":{"docs":{},"先":{"docs":{},"简":{"docs":{},"单":{"docs":{},"的":{"docs":{},"介":{"docs":{},"绍":{"docs":{},"以":{"docs":{},"下":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"常":{"docs":{},"量":{"docs":{},"池":{"docs":{},"：":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"当":{"docs":{},"一":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"执":{"docs":{},"行":{"docs":{},"出":{"docs":{},"现":{"docs":{},"异":{"docs":{},"常":{"docs":{},"时":{"docs":{},"，":{"docs":{},"其":{"docs":{},"所":{"docs":{},"持":{"docs":{},"有":{"docs":{},"的":{"docs":{},"锁":{"docs":{},"会":{"docs":{},"自":{"docs":{},"动":{"docs":{},"释":{"docs":{},"放":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}},"其":{"docs":{},"他":{"docs":{},"线":{"docs":{},"程":{"docs":{},"执":{"docs":{},"行":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}}}}}}}},"存":{"docs":{},"在":{"docs":{},"父":{"docs":{},"子":{"docs":{},"类":{"docs":{},"继":{"docs":{},"承":{"docs":{},"关":{"docs":{},"系":{"docs":{},"时":{"docs":{},"，":{"docs":{},"子":{"docs":{},"类":{"docs":{},"是":{"docs":{},"可":{"docs":{},"以":{"docs":{},"通":{"docs":{},"过":{"docs":{},"\"":{"docs":{},"可":{"docs":{},"重":{"docs":{},"入":{"docs":{},"锁":{"docs":{},"\"":{"docs":{},"调":{"docs":{},"用":{"docs":{},"父":{"docs":{},"类":{"docs":{},"的":{"docs":{},"同":{"docs":{},"步":{"docs":{},"方":{"docs":{},"法":{"docs":{},"的":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"我":{"docs":{},"们":{"docs":{},"把":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}},"j":{"docs":{},"v":{"docs":{},"m":{"docs":{},"从":{"docs":{},"内":{"docs":{},"存":{"docs":{},"中":{"docs":{},"反":{"docs":{},"序":{"docs":{},"列":{"docs":{},"化":{"docs":{},"地":{"docs":{},"组":{"docs":{},"装":{"docs":{},"一":{"docs":{},"个":{"docs":{},"新":{"docs":{},"对":{"docs":{},"象":{"docs":{},"时":{"docs":{},"，":{"docs":{},"会":{"docs":{},"自":{"docs":{},"动":{"docs":{},"调":{"docs":{},"用":{"docs":{},"这":{"docs":{},"个":{"docs":{},"方":{"docs":{},"法":{"docs":{},"返":{"docs":{},"回":{"docs":{},"我":{"docs":{},"们":{"docs":{},"的":{"docs":{},"指":{"docs":{},"定":{"docs":{},"对":{"docs":{},"象":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"必":{"docs":{},"须":{"docs":{},"是":{"docs":{},"同":{"docs":{},"一":{"docs":{},"个":{"docs":{},"对":{"docs":{},"象":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"说":{"docs":{},"基":{"docs":{},"本":{"docs":{},"上":{"docs":{},"应":{"docs":{},"该":{"docs":{},"是":{"docs":{},"成":{"docs":{},"员":{"docs":{},"变":{"docs":{},"量":{"docs":{},"而":{"docs":{},"非":{"docs":{},"局":{"docs":{},"部":{"docs":{},"变":{"docs":{},"量":{"docs":{},"，":{"docs":{},"*":{"docs":{},"锁":{"docs":{},"不":{"docs":{},"同":{"docs":{},"的":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"把":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}},"i":{"docs":{},"f":{"docs":{},"用":{"docs":{},"s":{"docs":{},"y":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"d":{"docs":{},"代":{"docs":{},"码":{"docs":{},"块":{"docs":{},"包":{"docs":{},"起":{"docs":{},"来":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"这":{"docs":{},"里":{"docs":{},"只":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"对":{"docs":{},"象":{"docs":{},"，":{"docs":{},"用":{"docs":{},"其":{"docs":{},"做":{"docs":{},"锁":{"docs":{},"很":{"docs":{},"合":{"docs":{},"适":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"单":{"docs":{},"例":{"docs":{},"对":{"docs":{},"象":{"docs":{},"放":{"docs":{},"在":{"docs":{},"静":{"docs":{},"态":{"docs":{},"内":{"docs":{},"部":{"docs":{},"类":{"docs":{},"中":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}},"真":{"docs":{},"正":{"docs":{},"的":{"docs":{},"单":{"docs":{},"例":{"docs":{},"对":{"docs":{},"象":{"docs":{},"放":{"docs":{},"在":{"docs":{},"枚":{"docs":{},"举":{"docs":{},"类":{"docs":{},"中":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}},"拥":{"docs":{},"有":{"docs":{},"锁":{"docs":{},"重":{"docs":{},"入":{"docs":{},"的":{"docs":{},"功":{"docs":{},"能":{"docs":{},"，":{"docs":{},"即":{"docs":{},"当":{"docs":{},"一":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"得":{"docs":{},"到":{"docs":{},"一":{"docs":{},"个":{"docs":{},"对":{"docs":{},"象":{"docs":{},"锁":{"docs":{},"后":{"docs":{},"，":{"docs":{},"此":{"docs":{},"时":{"docs":{},"这":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"也":{"docs":{},"是":{"docs":{},"可":{"docs":{},"以":{"docs":{},"调":{"docs":{},"用":{"docs":{},"该":{"docs":{},"对":{"docs":{},"象":{"docs":{},"其":{"docs":{},"他":{"docs":{},"被":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"按":{"docs":{},"照":{"docs":{},"如":{"docs":{},"下":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"希":{"docs":{},"求":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"两":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"在":{"docs":{},"得":{"docs":{},"到":{"docs":{},"一":{"docs":{},"个":{"docs":{},"锁":{"docs":{},"后":{"docs":{},"都":{"docs":{},"有":{"docs":{},"相":{"docs":{},"同":{"docs":{},"时":{"docs":{},"间":{"docs":{},"的":{"docs":{},"时":{"docs":{},"延":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"操":{"docs":{},"作":{"docs":{},"。":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}},"值":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}},"栈":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"为":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}},"正":{"docs":{},"确":{"docs":{},"的":{"docs":{},"做":{"docs":{},"法":{"docs":{},"是":{"docs":{},"把":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}},"线":{"docs":{},"程":{"docs":{},"组":{"docs":{},"的":{"docs":{},"常":{"docs":{},"用":{"docs":{},"方":{"docs":{},"法":{"1":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}},"docs":{}}},"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}},"死":{"docs":{},"锁":{"docs":{},"的":{"docs":{},"产":{"docs":{},"生":{"docs":{},"方":{"docs":{},"法":{"docs":{},"：":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}},"注":{"docs":{},"意":{"docs":{},"：":{"docs":{},"如":{"docs":{},"果":{"docs":{},"其":{"docs":{},"他":{"docs":{},"线":{"docs":{},"程":{"docs":{},"调":{"docs":{},"用":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}},"使":{"docs":{},"用":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}},"这":{"docs":{},"种":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"组":{"docs":{},"内":{"docs":{},"的":{"docs":{},"每":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"对":{"docs":{},"象":{"docs":{},"中":{"docs":{},"的":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}}}}}}}}}}}}}}}}}},"实":{"docs":{},"例":{"docs":{},"化":{"docs":{},"一":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"组":{"docs":{},"时":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"不":{"docs":{},"指":{"docs":{},"定":{"docs":{},"所":{"docs":{},"属":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"组":{"docs":{},"，":{"docs":{},"就":{"docs":{},"自":{"docs":{},"动":{"docs":{},"归":{"docs":{},"到":{"docs":{},"当":{"docs":{},"前":{"docs":{},"线":{"docs":{},"程":{"docs":{},"对":{"docs":{},"象":{"docs":{},"所":{"docs":{},"属":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"组":{"docs":{},"。":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"事":{"docs":{},"项":{"1":{"docs":{},".":{"6":{"docs":{},".":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}},"docs":{}}},"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}},"由":{"docs":{},"于":{"docs":{},"这":{"docs":{},"个":{"docs":{},"特":{"docs":{},"性":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"我":{"docs":{},"们":{"docs":{},"用":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}},"结":{"docs":{},"果":{"docs":{},"：":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"束":{"docs":{},"之":{"docs":{},"后":{"docs":{},"，":{"docs":{},"它":{"docs":{},"们":{"docs":{},"会":{"docs":{},"再":{"docs":{},"判":{"docs":{},"断":{"docs":{},"一":{"docs":{},"次":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}},"而":{"docs":{},"后":{"docs":{},"程":{"docs":{},"序":{"docs":{},"运":{"docs":{},"行":{"docs":{},"停":{"docs":{},"止":{"docs":{},"，":{"docs":{},"不":{"docs":{},"再":{"docs":{},"向":{"docs":{},"下":{"docs":{},"执":{"docs":{},"行":{"docs":{},"，":{"docs":{},"陷":{"docs":{},"入":{"docs":{},"死":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"通":{"docs":{},"过":{"docs":{},"下":{"docs":{},"一":{"docs":{},"节":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"进":{"docs":{},"行":{"docs":{},"检":{"docs":{},"测":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"观":{"docs":{},"察":{"docs":{},"运":{"docs":{},"行":{"docs":{},"结":{"docs":{},"果":{"docs":{},"可":{"docs":{},"知":{"docs":{},"，":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"2":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}},"docs":{}}}}}}}}}}}}}}}},"解":{"docs":{},"决":{"docs":{},"方":{"docs":{},"法":{"docs":{},"：":{"docs":{},"修":{"docs":{},"改":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"把":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0019193857965451055}},"通":{"docs":{},"知":{"docs":{},"线":{"docs":{},"程":{"docs":{},"启":{"docs":{},"动":{"docs":{},"的":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"i":{"docs":{},"f":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},"换":{"docs":{},"成":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"i":{"docs":{},"f":{"docs":{},"y":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"异":{"docs":{},"类":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"一":{"docs":{},"定":{"docs":{},"会":{"docs":{},"被":{"docs":{},"启":{"docs":{},"动":{"docs":{},"。":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"第":{"docs":{},"一":{"docs":{},"次":{"docs":{},"使":{"docs":{},"用":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},"方":{"docs":{},"法":{"docs":{},"返":{"docs":{},"回":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"问":{"docs":{},"题":{"1":{"docs":{},".":{"4":{"docs":{},".":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}},"docs":{}}},"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}}}}}}}}}}}}}},"赋":{"docs":{},"值":{"docs":{},"时":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"安":{"docs":{},"全":{"docs":{},"问":{"docs":{},"题":{"1":{"docs":{},".":{"1":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"docs":{}}},"docs":{}}},"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}},"运":{"docs":{},"行":{"docs":{},"如":{"docs":{},"上":{"docs":{},"代":{"docs":{},"码":{"docs":{},"，":{"docs":{},"运":{"docs":{},"行":{"docs":{},"结":{"docs":{},"果":{"docs":{},"如":{"docs":{},"下":{"docs":{},"：":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}},"时":{"docs":{},"，":{"docs":{},"实":{"docs":{},"例":{"docs":{},"创":{"docs":{},"建":{"docs":{},"的":{"docs":{},"全":{"docs":{},"局":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"常":{"docs":{},"量":{"docs":{},"池":{"docs":{},"中":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"表":{"docs":{},"，":{"docs":{},"总":{"docs":{},"是":{"docs":{},"为":{"docs":{},"池":{"docs":{},"中":{"docs":{},"每":{"docs":{},"个":{"docs":{},"唯":{"docs":{},"一":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"对":{"docs":{},"象":{"docs":{},"维":{"docs":{},"护":{"docs":{},"一":{"docs":{},"个":{"docs":{},"引":{"docs":{},"用":{"docs":{},",":{"docs":{},"这":{"docs":{},"就":{"docs":{},"意":{"docs":{},"味":{"docs":{},"着":{"docs":{},"它":{"docs":{},"们":{"docs":{},"一":{"docs":{},"直":{"docs":{},"引":{"docs":{},"用":{"docs":{},"着":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"常":{"docs":{},"量":{"docs":{},"池":{"docs":{},"中":{"docs":{},"的":{"docs":{},"对":{"docs":{},"象":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"，":{"docs":{},"在":{"docs":{},"常":{"docs":{},"量":{"docs":{},"池":{"docs":{},"中":{"docs":{},"的":{"docs":{},"这":{"docs":{},"些":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"不":{"docs":{},"会":{"docs":{},"被":{"docs":{},"垃":{"docs":{},"圾":{"docs":{},"收":{"docs":{},"集":{"docs":{},"器":{"docs":{},"回":{"docs":{},"收":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"结":{"docs":{},"果":{"docs":{},"如":{"docs":{},"下":{"docs":{},"：":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}},"：":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527},"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.002806361085126286},"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.007194244604316547},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.002883922134102379},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}},"构":{"docs":{},"：":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}},"静":{"docs":{},"态":{"docs":{},"同":{"docs":{},"步":{"docs":{},"s":{"docs":{},"y":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"d":{"docs":{},"方":{"docs":{},"法":{"docs":{},"与":{"docs":{},"s":{"docs":{},"y":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},")":{"docs":{},"代":{"docs":{},"码":{"docs":{},"块":{"1":{"docs":{},".":{"6":{"docs":{},".":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"docs":{}}},"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"方":{"docs":{},"法":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}},"非":{"docs":{},"线":{"docs":{},"程":{"docs":{},"安":{"docs":{},"全":{"docs":{},"问":{"docs":{},"题":{"docs":{},"是":{"docs":{},"如":{"docs":{},"何":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"1":{"docs":{},".":{"1":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}},"docs":{}}},"docs":{}}},"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}},"公":{"docs":{},"平":{"docs":{},"锁":{"docs":{},"：":{"docs":{},"线":{"docs":{},"程":{"docs":{},"随":{"docs":{},"机":{"docs":{},"获":{"docs":{},"得":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"是":{"docs":{},"一":{"docs":{},"种":{"docs":{},"锁":{"docs":{},"抢":{"docs":{},"占":{"docs":{},"机":{"docs":{},"制":{"docs":{},"，":{"docs":{},"不":{"docs":{},"过":{"docs":{},"可":{"docs":{},"能":{"docs":{},"会":{"docs":{},"造":{"docs":{},"成":{"docs":{},"某":{"docs":{},"些":{"docs":{},"线":{"docs":{},"程":{"docs":{},"一":{"docs":{},"直":{"docs":{},"拿":{"docs":{},"不":{"docs":{},"到":{"docs":{},"锁":{"docs":{},"。":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"递":{"docs":{},"归":{"docs":{},"的":{"docs":{},"获":{"docs":{},"取":{"docs":{},"组":{"docs":{},"内":{"docs":{},"对":{"docs":{},"象":{"docs":{},"（":{"docs":{},"即":{"docs":{},"只":{"docs":{},"取":{"docs":{},"一":{"docs":{},"层":{"docs":{},"的":{"docs":{},"）":{"docs":{},"：":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}},"首":{"docs":{},"先":{"docs":{},"我":{"docs":{},"们":{"docs":{},"先":{"docs":{},"来":{"docs":{},"看":{"docs":{},"看":{"docs":{},"没":{"docs":{},"有":{"docs":{},"非":{"docs":{},"线":{"docs":{},"程":{"docs":{},"安":{"docs":{},"全":{"docs":{},"的":{"docs":{},"程":{"docs":{},"序":{"docs":{},"运":{"docs":{},"行":{"docs":{},"起":{"docs":{},"来":{"docs":{},"会":{"docs":{},"导":{"docs":{},"致":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"，":{"docs":{},"就":{"docs":{},"表":{"docs":{},"示":{"docs":{},"相":{"docs":{},"反":{"docs":{},"的":{"docs":{},"意":{"docs":{},"思":{"docs":{},"了":{"docs":{},"，":{"docs":{},"a":{"docs":{},"s":{"docs":{},"y":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"d":{"docs":{},"：":{"docs":{},"异":{"docs":{},"步":{"docs":{},"。":{"docs":{"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"ref":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","tf":0.0009596928982725527}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"*":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.00683371298405467},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}},"/":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.006134969325153374},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.004555808656036446},"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}},"从":{"docs":{},"内":{"docs":{},"存":{"docs":{},"中":{"docs":{},"取":{"docs":{},"出":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}},"加":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}},"即":{"docs":{},"可":{"docs":{},"解":{"docs":{},"决":{"docs":{},"这":{"docs":{},"个":{"docs":{},"问":{"docs":{},"题":{"docs":{},"。":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}},"从":{"docs":{},"当":{"docs":{},"前":{"docs":{},"时":{"docs":{},"间":{"docs":{},"开":{"docs":{},"始":{"docs":{},"，":{"docs":{},"等":{"docs":{},"待":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}}},"使":{"docs":{},"我":{"docs":{},"们":{"docs":{},"这":{"docs":{},"么":{"docs":{},"写":{"docs":{},"：":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}},"原":{"docs":{},"子":{"docs":{},"性":{"docs":{},"：":{"docs":{},"原":{"docs":{},"子":{"docs":{},"操":{"docs":{},"作":{"docs":{},"是":{"docs":{},"不":{"docs":{},"能":{"docs":{},"分":{"docs":{},"割":{"docs":{},"的":{"docs":{},"整":{"docs":{},"体":{"docs":{},"，":{"docs":{},"没":{"docs":{},"有":{"docs":{},"其":{"docs":{},"他":{"docs":{},"线":{"docs":{},"程":{"docs":{},"能":{"docs":{},"够":{"docs":{},"中":{"docs":{},"断":{"docs":{},"或":{"docs":{},"检":{"docs":{},"查":{"docs":{},"正":{"docs":{},"在":{"docs":{},"原":{"docs":{},"子":{"docs":{},"操":{"docs":{},"作":{"docs":{},"中":{"docs":{},"的":{"docs":{},"变":{"docs":{},"量":{"docs":{},"。":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"类":{"docs":{},"可":{"docs":{},"以":{"docs":{},"在":{"docs":{},"没":{"docs":{},"有":{"docs":{},"锁":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"下":{"docs":{},"做":{"docs":{},"到":{"docs":{},"线":{"docs":{},"程":{"docs":{},"安":{"docs":{},"全":{"docs":{},"，":{"docs":{},"不":{"docs":{},"过":{"docs":{},"原":{"docs":{},"子":{"docs":{},"类":{"docs":{},"中":{"docs":{},"的":{"docs":{},"每":{"docs":{},"个":{"docs":{},"方":{"docs":{},"法":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"原":{"docs":{},"子":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"不":{"docs":{},"过":{"docs":{},"方":{"docs":{},"法":{"docs":{},"和":{"docs":{},"方":{"docs":{},"法":{"docs":{},"之":{"docs":{},"间":{"docs":{},"并":{"docs":{},"不":{"docs":{},"是":{"docs":{},"原":{"docs":{},"子":{"docs":{},"的":{"docs":{},"。":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"：":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{},"i":{"docs":{},"c":{"docs":{},"各":{"docs":{},"种":{"docs":{},"，":{"docs":{},"例":{"docs":{},"如":{"docs":{},"：":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},"，":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"，":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{},"i":{"docs":{},"c":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{},"等":{"docs":{},"。":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"将":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}},"线":{"docs":{},"程":{"docs":{},"归":{"docs":{},"属":{"docs":{},"到":{"docs":{},"线":{"docs":{},"程":{"docs":{},"组":{"docs":{},"中":{"docs":{},"，":{"docs":{},"调":{"docs":{},"用":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}}}},"显":{"docs":{},"然":{"docs":{},"，":{"docs":{},"s":{"docs":{},"y":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}}}}}}},"相":{"docs":{},"同":{"docs":{},"的":{"docs":{},"效":{"docs":{},"果":{"docs":{},"。":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}}},"能":{"docs":{},"加":{"docs":{},"到":{"5":{"0":{"0":{"0":{"0":{"docs":{},"，":{"docs":{},"说":{"docs":{},"明":{"docs":{},"保":{"docs":{},"证":{"docs":{},"了":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"+":{"1":{"docs":{},"的":{"docs":{},"原":{"docs":{},"子":{"docs":{},"性":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}}}},"docs":{}}}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}},"要":{"docs":{},"比":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}},"创":{"docs":{},"建":{"docs":{},"成":{"docs":{},"守":{"docs":{},"护":{"docs":{},"线":{"docs":{},"程":{"docs":{},"：":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}}}}}},"想":{"docs":{},"保":{"docs":{},"证":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"对":{"docs":{},"象":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"要":{"docs":{},"在":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}},"点":{"docs":{},"方":{"docs":{},"法":{"docs":{},"：":{"docs":{},"添":{"docs":{},"加":{"docs":{},"线":{"docs":{},"程":{"docs":{},"组":{"docs":{},"或":{"docs":{},"线":{"docs":{},"程":{"docs":{},"到":{"docs":{},"线":{"docs":{},"程":{"docs":{},"组":{"docs":{},"中":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}}}}}}}}},"计":{"docs":{},"算":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}},"数":{"docs":{},"类":{"1":{"docs":{},".":{"4":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{}}},"docs":{}}},"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}},"输":{"docs":{},"出":{"docs":{},"：":{"docs":{"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"ref":"Ch2-对象及变量的并发访问/02-volatile关键字.html","tf":0.003067484662576687}}}}},"!":{"docs":{},"=":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909},"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.01282051282051282},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0021629416005767843}}}},"一":{"docs":{},"生":{"docs":{},"产":{"docs":{},"一":{"docs":{},"消":{"docs":{},"费":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}}}},"多":{"docs":{},"消":{"docs":{},"费":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}},"定":{"docs":{},"要":{"docs":{},"等":{"docs":{},"待":{"docs":{},"够":{"docs":{},"足":{"docs":{},"够":{"docs":{},"的":{"docs":{},"毫":{"docs":{},"秒":{"docs":{},"数":{"docs":{},"。":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}}}}},"个":{"docs":{},"简":{"docs":{},"单":{"docs":{},"的":{"docs":{},"使":{"docs":{},"用":{"docs":{},"示":{"docs":{},"例":{"1":{"docs":{},".":{"1":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{}}},"docs":{}}},"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}},"标":{"docs":{},"准":{"docs":{},"的":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"使":{"docs":{},"用":{"docs":{},"方":{"docs":{},"法":{"docs":{},"实":{"docs":{},"例":{"1":{"docs":{},".":{"3":{"docs":{},".":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}},"docs":{}}},"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}}}}}}},"线":{"docs":{},"程":{"docs":{},"的":{"docs":{},"状":{"docs":{},"态":{"docs":{},"可":{"docs":{},"以":{"docs":{},"通":{"docs":{},"过":{"docs":{"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":0.02857142857142857}}}}}}}}}}},"会":{"docs":{},"抛":{"docs":{},"出":{"docs":{},"异":{"docs":{},"常":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"类":{"docs":{},"：":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}}}}}}}}}}},"对":{"docs":{},"一":{"docs":{},"交":{"docs":{},"替":{"docs":{},"打":{"docs":{},"印":{"docs":{},"：":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}},"与":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"负":{"docs":{},"责":{"docs":{},"将":{"docs":{},"数":{"docs":{},"据":{"docs":{},"备":{"docs":{},"份":{"docs":{},"到":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}}}}}}}}},"，":{"docs":{},"其":{"docs":{},"中":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}},"用":{"docs":{},"来":{"docs":{},"转":{"docs":{},"换":{"docs":{},"日":{"docs":{},"期":{"docs":{},"，":{"docs":{},"不":{"docs":{},"过":{"docs":{},"，":{"docs":{},"这":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}}}}}},"的":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}}},"比":{"docs":{},"较":{"docs":{},"重":{"docs":{},"要":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"：":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}},"什":{"docs":{},"么":{"docs":{},"是":{"docs":{},"交":{"docs":{},"叉":{"docs":{},"备":{"docs":{},"份":{"docs":{},"：":{"docs":{},"就":{"docs":{},"是":{"docs":{},"创":{"docs":{},"建":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}},"等":{"docs":{},"待":{"docs":{},"/":{"docs":{},"通":{"docs":{},"知":{"docs":{},"机":{"docs":{},"制":{"1":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"docs":{}}},"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}},"追":{"docs":{},"赶":{"docs":{},"执":{"docs":{},"行":{"docs":{},"性":{"docs":{},"：":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}},"以":{"docs":{},"上":{"docs":{},"的":{"docs":{},"过":{"docs":{},"程":{"docs":{},"就":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"等":{"docs":{},"待":{"docs":{},"/":{"docs":{},"通":{"docs":{},"知":{"docs":{},"机":{"docs":{},"制":{"docs":{},"，":{"docs":{},"等":{"docs":{},"待":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"在":{"docs":{},"等":{"docs":{},"待":{"docs":{},"状":{"docs":{},"态":{"docs":{},"不":{"docs":{},"会":{"docs":{},"耗":{"docs":{},"费":{"docs":{},"系":{"docs":{},"统":{"docs":{},"资":{"docs":{},"源":{"docs":{},"，":{"docs":{},"当":{"docs":{},"需":{"docs":{},"要":{"docs":{},"它":{"docs":{},"启":{"docs":{},"动":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"其":{"docs":{},"他":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"会":{"docs":{},"通":{"docs":{},"知":{"docs":{},"它":{"docs":{},"启":{"docs":{},"动":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"也":{"docs":{},"不":{"docs":{},"会":{"docs":{},"错":{"docs":{},"过":{"docs":{},"启":{"docs":{},"动":{"docs":{},"的":{"docs":{},"时":{"docs":{},"机":{"docs":{},"。":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"这":{"docs":{},"些":{"docs":{},"方":{"docs":{},"法":{"docs":{},"都":{"docs":{},"是":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}},"但":{"docs":{},"是":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"其":{"docs":{},"操":{"docs":{},"作":{"docs":{},"的":{"docs":{},"内":{"docs":{},"容":{"docs":{},"也":{"docs":{},"有":{"docs":{},"不":{"docs":{},"同":{"docs":{},"的":{"docs":{},"选":{"docs":{},"择":{"docs":{},"，":{"docs":{},"如":{"docs":{},"：":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}},"决":{"docs":{},"定":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"到":{"docs":{},"管":{"docs":{},"道":{"docs":{},"流":{"docs":{},"，":{"docs":{},"另":{"docs":{},"一":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"再":{"docs":{},"将":{"docs":{},"数":{"docs":{},"据":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}},"这":{"docs":{},"里":{"docs":{},"才":{"docs":{},"结":{"docs":{},"束":{"docs":{},"w":{"docs":{},"a":{"docs":{},"i":{"docs":{},"t":{"docs":{},"，":{"docs":{},"说":{"docs":{},"明":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"i":{"docs":{},"f":{"docs":{},"y":{"docs":{},"执":{"docs":{},"行":{"docs":{},"后":{"docs":{},"不":{"docs":{},"会":{"docs":{},"立":{"docs":{},"刻":{"docs":{},"释":{"docs":{},"放":{"docs":{},"锁":{"docs":{},"，":{"docs":{},"而":{"docs":{},"是":{"docs":{},"等":{"docs":{},"到":{"docs":{},"其":{"docs":{},"线":{"docs":{},"程":{"docs":{},"退":{"docs":{},"出":{"docs":{},"s":{"docs":{},"y":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"d":{"docs":{},"代":{"docs":{},"码":{"docs":{},"块":{"docs":{},"后":{"docs":{},"才":{"docs":{},"释":{"docs":{},"放":{"docs":{},"锁":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"前":{"docs":{},"调":{"docs":{},"用":{"docs":{},"了":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}},"唤":{"docs":{},"醒":{"docs":{},"它":{"docs":{},"，":{"docs":{},"就":{"docs":{},"提":{"docs":{},"前":{"docs":{},"唤":{"docs":{},"醒":{"docs":{},"。":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}},"必":{"docs":{},"须":{"docs":{},"先":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}},"回":{"docs":{},"来":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"可":{"docs":{},"以":{"docs":{},"实":{"docs":{},"现":{"docs":{},"不":{"docs":{},"同":{"docs":{},"线":{"docs":{},"程":{"docs":{},"间":{"docs":{},"的":{"docs":{},"通":{"docs":{},"信":{"docs":{},"而":{"docs":{},"无":{"docs":{},"需":{"docs":{},"借":{"docs":{},"用":{"docs":{},"临":{"docs":{},"时":{"docs":{},"文":{"docs":{},"件":{"docs":{},"值":{"docs":{},"类":{"docs":{},"的":{"docs":{},"东":{"docs":{},"西":{"docs":{},"，":{"docs":{},"感":{"docs":{},"觉":{"docs":{},"像":{"docs":{},"一":{"docs":{},"个":{"docs":{},"寄":{"docs":{},"存":{"docs":{},"信":{"docs":{},"箱":{"docs":{},"。":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"大":{"docs":{},"体":{"docs":{},"有":{"docs":{},"如":{"docs":{},"下":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0018709073900841909}}}}}}},"循":{"docs":{},"环":{"docs":{},"，":{"docs":{},"时":{"docs":{},"刻":{"docs":{},"监":{"docs":{},"控":{"docs":{},"另":{"docs":{},"一":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"的":{"docs":{},"动":{"docs":{},"向":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"是":{"docs":{},"十":{"docs":{},"分":{"docs":{},"耗":{"docs":{},"费":{"docs":{},"系":{"docs":{},"统":{"docs":{},"资":{"docs":{},"源":{"docs":{},"的":{"docs":{},"。":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"恢":{"docs":{},"复":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"挺":{"docs":{},"像":{"docs":{},"的":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}},"改":{"docs":{},"成":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"教":{"docs":{},"程":{"docs":{},"进":{"docs":{},"行":{"docs":{},"，":{"docs":{},"不":{"docs":{},"会":{"docs":{},"出":{"docs":{},"什":{"docs":{},"么":{"docs":{},"差":{"docs":{},"错":{"docs":{},"。":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}},"机":{"docs":{},"制":{"docs":{},"可":{"docs":{},"以":{"docs":{},"实":{"docs":{},"现":{"docs":{},"一":{"docs":{},"种":{"docs":{},"比":{"docs":{},"较":{"docs":{},"节":{"docs":{},"约":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}},"，":{"docs":{},"只":{"docs":{},"给":{"docs":{},"一":{"docs":{},"个":{"docs":{},"很":{"docs":{},"小":{"docs":{},"的":{"docs":{},"部":{"docs":{},"分":{"docs":{},"设":{"docs":{},"计":{"docs":{},"成":{"docs":{},"同":{"docs":{},"步":{"docs":{},"的":{"docs":{},"，":{"docs":{},"来":{"docs":{},"解":{"docs":{},"决":{"docs":{},"这":{"docs":{},"个":{"docs":{},"问":{"docs":{},"题":{"docs":{},"：":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"毫":{"docs":{},"秒":{"docs":{},"内":{"docs":{},"是":{"docs":{},"否":{"docs":{},"有":{"docs":{},"线":{"docs":{},"程":{"docs":{},"对":{"docs":{},"其":{"docs":{},"进":{"docs":{},"行":{"docs":{},"了":{"docs":{},"唤":{"docs":{},"醒":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"超":{"docs":{},"过":{"docs":{},"这":{"docs":{},"个":{"docs":{},"时":{"docs":{},"间":{"docs":{},"则":{"docs":{},"自":{"docs":{},"动":{"docs":{},"唤":{"docs":{},"醒":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"添":{"docs":{},"加":{"docs":{},"了":{"1":{"0":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}},"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}},"2":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}},"3":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}},"4":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}},"5":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}},"6":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}},"7":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}},"8":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}},"9":{"docs":{},"个":{"docs":{},"元":{"docs":{},"素":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}},"docs":{}}}},"生":{"docs":{},"产":{"docs":{},"者":{"docs":{},"/":{"docs":{},"消":{"docs":{},"费":{"docs":{},"者":{"docs":{},"模":{"docs":{},"式":{"docs":{},"实":{"docs":{},"现":{"1":{"docs":{},".":{"6":{"docs":{},".":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"docs":{}}},"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"是":{"docs":{},"等":{"docs":{},"待":{"docs":{},"通":{"docs":{},"知":{"docs":{},"最":{"docs":{},"经":{"docs":{},"典":{"docs":{},"的":{"docs":{},"案":{"docs":{},"例":{"docs":{},"。":{"docs":{},"有":{"docs":{},"如":{"docs":{},"下":{"docs":{},"几":{"docs":{},"种":{"docs":{},"模":{"docs":{},"式":{"docs":{},"：":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}}}},"和":{"docs":{},"消":{"docs":{},"费":{"docs":{},"者":{"docs":{},"操":{"docs":{},"作":{"docs":{},"的":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}},"变":{"docs":{},"量":{"docs":{},"，":{"docs":{},"比":{"docs":{},"如":{"docs":{},"一":{"docs":{},"个":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"。":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}},"程":{"docs":{},"序":{"docs":{},"调":{"docs":{},"用":{"docs":{},"了":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}},"等":{"docs":{},"待":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954},"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}},"/":{"docs":{},"通":{"docs":{},"知":{"docs":{},"机":{"docs":{},"制":{"docs":{},"涉":{"docs":{},"及":{"docs":{},"的":{"docs":{},"主":{"docs":{},"要":{"docs":{},"方":{"docs":{},"法":{"1":{"docs":{},".":{"2":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"docs":{}}},"docs":{}}},"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}},"的":{"docs":{},"实":{"docs":{},"现":{"1":{"docs":{},".":{"2":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"docs":{}}},"docs":{}}},"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}},"的":{"docs":{},"条":{"docs":{},"件":{"docs":{},"发":{"docs":{},"生":{"docs":{},"了":{"docs":{},"变":{"docs":{},"化":{"docs":{},"的":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"这":{"docs":{},"时":{"docs":{},"我":{"docs":{},"们":{"docs":{},"要":{"docs":{},"采":{"docs":{},"用":{"docs":{},"将":{"docs":{},"判":{"docs":{},"断":{"docs":{},"当":{"docs":{},"前":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}},"线":{"docs":{},"程":{"docs":{},"是":{"docs":{},"无":{"docs":{},"视":{"docs":{},"中":{"docs":{},"断":{"docs":{},"操":{"docs":{},"作":{"docs":{},"的":{"docs":{},"，":{"docs":{},"就":{"docs":{},"是":{"docs":{},"说":{"docs":{},"不":{"docs":{},"能":{"docs":{},"通":{"docs":{},"过":{"docs":{},"中":{"docs":{},"断":{"docs":{},"然":{"docs":{},"这":{"docs":{},"个":{"docs":{},"等":{"docs":{},"待":{"docs":{},"中":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"抛":{"docs":{},"异":{"docs":{},"常":{"docs":{},"停":{"docs":{},"止":{"docs":{},"。":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"通":{"docs":{},"知":{"docs":{},"机":{"docs":{},"制":{"1":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"docs":{}}},"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":5.000935453695042}}}}}},"一":{"docs":{},"定":{"docs":{},"时":{"docs":{},"间":{"docs":{},"，":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}},"管":{"docs":{},"道":{"docs":{},"流":{"docs":{},"（":{"docs":{},"p":{"docs":{},"i":{"docs":{},"p":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},"）":{"docs":{},"是":{"docs":{},"一":{"docs":{},"种":{"docs":{},"很":{"docs":{},"特":{"docs":{},"殊":{"docs":{},"的":{"docs":{},"流":{"docs":{},"，":{"docs":{},"可":{"docs":{},"以":{"docs":{},"用":{"docs":{},"于":{"docs":{},"在":{"docs":{},"不":{"docs":{},"同":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"之":{"docs":{},"间":{"docs":{},"传":{"docs":{},"递":{"docs":{},"数":{"docs":{},"据":{"docs":{},"，":{"docs":{},"一":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"将":{"docs":{},"数":{"docs":{},"据":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"通":{"docs":{},"知":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}},"到":{"docs":{},"的":{"docs":{},"呢":{"docs":{},"？":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}},"过":{"docs":{},"早":{"1":{"docs":{},".":{"4":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"docs":{}}},"docs":{}}},"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"一":{"docs":{},"个":{"docs":{},"再":{"docs":{},"启":{"docs":{},"动":{"docs":{},"，":{"docs":{},"不":{"docs":{},"通":{"docs":{},"知":{"docs":{},"另":{"docs":{},"一":{"docs":{},"个":{"docs":{},"，":{"docs":{},"看":{"docs":{},"程":{"docs":{},"序":{"docs":{},"是":{"docs":{},"否":{"docs":{},"会":{"docs":{},"结":{"docs":{},"束":{"docs":{},"，":{"docs":{},"即":{"docs":{},"看":{"docs":{},"看":{"docs":{},"线":{"docs":{},"程":{"docs":{},"能":{"docs":{},"不":{"docs":{},"能":{"docs":{},"分":{"docs":{},"类":{"docs":{},"通":{"docs":{},"知":{"docs":{},"是":{"docs":{},"否":{"docs":{},"启":{"docs":{},"动":{"docs":{},"。":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"等":{"docs":{},"待":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"执":{"docs":{},"行":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}},"所":{"docs":{},"有":{"docs":{},"等":{"docs":{},"待":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"执":{"docs":{},"行":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}},"过":{"docs":{},"管":{"docs":{},"道":{"docs":{},"进":{"docs":{},"行":{"docs":{},"线":{"docs":{},"程":{"docs":{},"间":{"docs":{},"的":{"docs":{},"通":{"docs":{},"信":{"1":{"docs":{},".":{"6":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}},"docs":{}}},"docs":{}}},"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}},"这":{"docs":{},"个":{"docs":{},"变":{"docs":{},"量":{"docs":{},"进":{"docs":{},"行":{"docs":{},"标":{"docs":{},"记":{"docs":{},"，":{"docs":{},"实":{"docs":{},"现":{"docs":{},"交":{"docs":{},"替":{"docs":{},"打":{"docs":{},"印":{"docs":{},"，":{"docs":{},"要":{"docs":{},"用":{"docs":{},"v":{"docs":{},"o":{"docs":{},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"保":{"docs":{},"证":{"docs":{},"其":{"docs":{},"可":{"docs":{},"见":{"docs":{},"性":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"代":{"docs":{},"码":{"docs":{},"演":{"docs":{},"示":{"docs":{},"如":{"docs":{},"下":{"docs":{},"：":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}},"只":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"类":{"docs":{},"型":{"docs":{},"的":{"docs":{},"枚":{"docs":{},"举":{"docs":{},"类":{"docs":{},"实":{"docs":{},"现":{"docs":{},"单":{"docs":{},"例":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"s":{"docs":{},"获":{"docs":{},"取":{"docs":{},"s":{"docs":{},"i":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"都":{"docs":{},"实":{"docs":{},"现":{"docs":{},"了":{"docs":{},"w":{"docs":{},"a":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},"和":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"i":{"docs":{},"f":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},"方":{"docs":{},"法":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"这":{"docs":{},"些":{"docs":{},"方":{"docs":{},"法":{"docs":{},"是":{"docs":{},"通":{"docs":{},"过":{"docs":{},"s":{"docs":{},"y":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"问":{"docs":{},"题":{"docs":{},"出":{"docs":{},"现":{"docs":{},"的":{"docs":{},"原":{"docs":{},"因":{"docs":{},"：":{"docs":{},"我":{"docs":{},"们":{"docs":{},"这":{"docs":{},"里":{"docs":{},"通":{"docs":{},"过":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"i":{"docs":{},"f":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},"来":{"docs":{},"通":{"docs":{},"知":{"docs":{},"其":{"docs":{},"他":{"docs":{},"线":{"docs":{},"程":{"docs":{},"启":{"docs":{},"动":{"docs":{},"，":{"docs":{},"每":{"docs":{},"次":{"docs":{},"只":{"docs":{},"启":{"docs":{},"动":{"docs":{},"一":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"，":{"docs":{},"不":{"docs":{},"过":{"docs":{},"我":{"docs":{},"们":{"docs":{},"没":{"docs":{},"法":{"docs":{},"控":{"docs":{},"制":{"docs":{},"启":{"docs":{},"动":{"docs":{},"的":{"docs":{},"是":{"docs":{},"同":{"docs":{},"类":{"docs":{},"线":{"docs":{},"程":{"docs":{},"还":{"docs":{},"是":{"docs":{},"异":{"docs":{},"类":{"docs":{},"线":{"docs":{},"程":{"docs":{},"，":{"docs":{},"也":{"docs":{},"就":{"docs":{},"是":{"docs":{},"说":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"有":{"docs":{},"一":{"docs":{},"定":{"docs":{},"概":{"docs":{},"率":{"docs":{},"一":{"docs":{},"直":{"docs":{},"处":{"docs":{},"于":{"docs":{},"生":{"docs":{},"产":{"docs":{},"者":{"docs":{},"唤":{"docs":{},"醒":{"docs":{},"生":{"docs":{},"产":{"docs":{},"者":{"docs":{},"，":{"docs":{},"消":{"docs":{},"费":{"docs":{},"者":{"docs":{},"唤":{"docs":{},"醒":{"docs":{},"消":{"docs":{},"费":{"docs":{},"者":{"docs":{},"的":{"docs":{},"状":{"docs":{},"态":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"所":{"docs":{},"有":{"docs":{},"线":{"docs":{},"程":{"docs":{},"将":{"docs":{},"一":{"docs":{},"直":{"docs":{},"处":{"docs":{},"在":{"docs":{"Ch3-线程间通信/01-等待通知机制.html":{"ref":"Ch3-线程间通信/01-等待通知机制.html","tf":0.0009354536950420954}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"又":{"docs":{},"有":{"docs":{},"什":{"docs":{},"么":{"docs":{},"区":{"docs":{},"别":{"docs":{},"呢":{"docs":{},"？":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}},"模":{"docs":{},"块":{"docs":{},"：":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}},"被":{"docs":{},"异":{"docs":{},"常":{"docs":{},"停":{"docs":{},"止":{"docs":{},"后":{"docs":{},"，":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},"和":{"docs":{},"、":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}}}}}}}},"中":{"docs":{},"断":{"docs":{},"了":{"docs":{},"。":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}},"还":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"带":{"docs":{},"参":{"docs":{},"数":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"：":{"docs":{},"j":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{},"，":{"docs":{},"这":{"docs":{},"个":{"docs":{},"方":{"docs":{},"法":{"docs":{},"是":{"docs":{},"等":{"docs":{},"待":{"docs":{},"传":{"docs":{},"入":{"docs":{},"的":{"docs":{},"参":{"docs":{},"数":{"docs":{},"的":{"docs":{},"毫":{"docs":{},"秒":{"docs":{},"数":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"计":{"docs":{},"时":{"docs":{},"过":{"docs":{},"程":{"docs":{},"中":{"docs":{},"等":{"docs":{},"待":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"执":{"docs":{},"行":{"docs":{},"完":{"docs":{},"了":{"docs":{},"，":{"docs":{},"就":{"docs":{},"接":{"docs":{},"着":{"docs":{},"往":{"docs":{},"下":{"docs":{},"执":{"docs":{},"行":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"计":{"docs":{},"时":{"docs":{},"结":{"docs":{},"束":{"docs":{},"等":{"docs":{},"待":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"还":{"docs":{},"没":{"docs":{},"有":{"docs":{},"执":{"docs":{},"行":{"docs":{},"完":{"docs":{},"，":{"docs":{},"就":{"docs":{},"不":{"docs":{},"再":{"docs":{},"继":{"docs":{},"续":{"docs":{},"等":{"docs":{},"待":{"docs":{},"，":{"docs":{},"而":{"docs":{},"是":{"docs":{},"往":{"docs":{},"下":{"docs":{},"执":{"docs":{},"行":{"docs":{},"。":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"预":{"docs":{},"计":{"docs":{},"结":{"docs":{},"果":{"docs":{},"：":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"b":{"docs":{"Ch3-线程间通信/02-join方法.html":{"ref":"Ch3-线程间通信/02-join方法.html","tf":0.0035971223021582736}}}}}}}}}}}}}},"k":{"docs":{},",":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}},"e":{"docs":{},"y":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}},"内":{"docs":{},"部":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}},"类":{"docs":{},"实":{"docs":{},"现":{"docs":{},"的":{"docs":{},"单":{"docs":{},"例":{"docs":{},"对":{"docs":{},"象":{"docs":{},"，":{"docs":{},"我":{"docs":{},"们":{"docs":{},"进":{"docs":{},"行":{"docs":{},"如":{"docs":{},"下":{"docs":{},"操":{"docs":{},"作":{"docs":{},"：":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}}}}},"变":{"docs":{},"量":{"docs":{},"，":{"docs":{},"这":{"docs":{},"样":{"docs":{},"这":{"docs":{},"个":{"docs":{},"类":{"docs":{},"中":{"docs":{},"的":{"docs":{},"每":{"docs":{},"个":{"docs":{},"对":{"docs":{},"象":{"docs":{},"都":{"docs":{},"会":{"docs":{},"共":{"docs":{},"享":{"docs":{},"这":{"docs":{},"个":{"docs":{},"变":{"docs":{},"量":{"docs":{},"，":{"docs":{},"现":{"docs":{},"在":{"docs":{},"我":{"docs":{},"们":{"docs":{},"想":{"docs":{},"要":{"docs":{},"对":{"docs":{},"这":{"docs":{},"个":{"docs":{},"共":{"docs":{},"享":{"docs":{},"进":{"docs":{},"行":{"docs":{},"划":{"docs":{},"分":{"docs":{},"，":{"docs":{},"划":{"docs":{},"分":{"docs":{},"的":{"docs":{},"原":{"docs":{},"则":{"docs":{},"是":{"docs":{},"：":{"docs":{},"同":{"docs":{},"一":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"共":{"docs":{},"享":{"docs":{},"一":{"docs":{},"个":{"docs":{},"变":{"docs":{},"量":{"docs":{},"，":{"docs":{},"不":{"docs":{},"同":{"docs":{},"的":{"docs":{},"线":{"docs":{},"程":{"docs":{},"共":{"docs":{},"享":{"docs":{},"另":{"docs":{},"一":{"docs":{},"个":{"docs":{},"变":{"docs":{},"量":{"docs":{},"。":{"docs":{},"想":{"docs":{},"要":{"docs":{},"实":{"docs":{},"现":{"docs":{},"这":{"docs":{},"样":{"docs":{},"的":{"docs":{},"功":{"docs":{},"能":{"docs":{},"要":{"docs":{},"用":{"docs":{},"到":{"docs":{},"：":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"所":{"docs":{},"以":{"docs":{},"想":{"docs":{},"要":{"docs":{},"一":{"docs":{},"个":{"docs":{},"带":{"docs":{},"初":{"docs":{},"始":{"docs":{},"值":{"docs":{},"的":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}}},"来":{"docs":{},"自":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"方":{"docs":{},"法":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}}}}}}}}},"判":{"docs":{},"断":{"docs":{},"并":{"docs":{},"抛":{"docs":{},"异":{"docs":{},"常":{"docs":{},"，":{"docs":{},"线":{"docs":{},"程":{"docs":{},"也":{"docs":{},"是":{"docs":{},"不":{"docs":{},"会":{"docs":{},"停":{"docs":{},"的":{"docs":{},"，":{"docs":{},"只":{"docs":{},"是":{"docs":{},"有":{"docs":{},"个":{"docs":{},"标":{"docs":{},"记":{"docs":{},"而":{"docs":{},"已":{"docs":{},"，":{"docs":{},"而":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}}}}}},"获":{"docs":{},"得":{"docs":{},"。":{"docs":{"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":0.02857142857142857}}}}}},"第":{"docs":{},"一":{"docs":{},"次":{"docs":{},"使":{"docs":{},"用":{"docs":{},"时":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"为":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{"Ch3-线程间通信/03-ThreadLocal类.html":{"ref":"Ch3-线程间通信/03-ThreadLocal类.html","tf":0.004273504273504274}}}}}}}}}}}},"调":{"docs":{},"用":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"时":{"docs":{},"，":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{},"为":{"docs":{},"空":{"docs":{},"，":{"docs":{},"这":{"docs":{},"时":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"新":{"docs":{},"对":{"docs":{},"象":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"&":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},"d":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"(":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},"：":{"docs":{},"查":{"docs":{},"询":{"docs":{},"是":{"docs":{},"否":{"docs":{},"有":{"docs":{},"线":{"docs":{},"程":{"docs":{},"在":{"docs":{},"等":{"docs":{},"待":{"docs":{},"获":{"docs":{},"取":{"docs":{},"此":{"docs":{},"锁":{"docs":{},"。":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0021629416005767843}}}}}},"w":{"docs":{},"a":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}},"类":{"1":{"docs":{},".":{"4":{"docs":{},".":{"3":{"docs":{},".":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{}}},"docs":{}}},"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}},"互":{"docs":{},"斥":{"docs":{},"操":{"docs":{},"作":{"docs":{},"：":{"docs":{},"写":{"docs":{},"写":{"docs":{},"，":{"docs":{},"读":{"docs":{},"写":{"docs":{},"，":{"docs":{},"写":{"docs":{},"读":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}},"仍":{"docs":{},"然":{"docs":{},"好":{"docs":{},"好":{"docs":{},"运":{"docs":{},"行":{"docs":{},"着":{"docs":{},"呢":{"docs":{},"，":{"docs":{},"接":{"docs":{},"下":{"docs":{},"来":{"docs":{},"我":{"docs":{},"们":{"docs":{},"把":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}},"例":{"docs":{},"如":{"docs":{},"：":{"docs":{},"文":{"docs":{},"件":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}},"公":{"docs":{},"平":{"docs":{},"锁":{"docs":{},"与":{"docs":{},"非":{"docs":{},"公":{"docs":{},"平":{"docs":{},"锁":{"1":{"docs":{},".":{"4":{"docs":{},".":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{}}},"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}},"：":{"docs":{},"线":{"docs":{},"程":{"docs":{},"获":{"docs":{},"取":{"docs":{},"锁":{"docs":{},"的":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"按":{"docs":{},"照":{"docs":{},"线":{"docs":{},"程":{"docs":{},"加":{"docs":{},"锁":{"docs":{},"的":{"docs":{},"顺":{"docs":{},"序":{"docs":{},"分":{"docs":{},"配":{"docs":{},"，":{"docs":{},"即":{"docs":{},"先":{"docs":{},"进":{"docs":{},"先":{"docs":{},"出":{"docs":{},"(":{"docs":{},"f":{"docs":{},"i":{"docs":{},"f":{"docs":{},"o":{"docs":{},")":{"docs":{},"。":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"共":{"docs":{},"享":{"docs":{},"操":{"docs":{},"作":{"docs":{},"：":{"docs":{},"读":{"docs":{},"读":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}},"型":{"docs":{},"参":{"docs":{},"数":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}},"条":{"docs":{},"件":{"docs":{},"。":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}},"标":{"docs":{},"准":{"docs":{},"使":{"docs":{},"用":{"docs":{},"示":{"docs":{},"例":{"1":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"docs":{}}},"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}},"比":{"docs":{},"较":{"docs":{},"标":{"docs":{},"准":{"docs":{},"的":{"docs":{},"使":{"docs":{},"用":{"docs":{},"方":{"docs":{},"法":{"docs":{},"是":{"docs":{},"：":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}},"没":{"docs":{},"有":{"docs":{},"线":{"docs":{},"程":{"docs":{},"通":{"docs":{},"知":{"docs":{},"b":{"docs":{},"线":{"docs":{},"程":{"docs":{},"结":{"docs":{},"束":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"程":{"docs":{},"序":{"docs":{},"不":{"docs":{},"会":{"docs":{},"停":{"docs":{},"止":{"docs":{},"，":{"docs":{},"而":{"docs":{},"是":{"docs":{},"一":{"docs":{},"直":{"docs":{},"处":{"docs":{},"于":{"docs":{},"运":{"docs":{},"行":{"docs":{},"状":{"docs":{},"态":{"docs":{},"，":{"docs":{},"因":{"docs":{},"为":{"docs":{},"b":{"docs":{},"线":{"docs":{},"程":{"docs":{},"还":{"docs":{},"在":{"docs":{},"a":{"docs":{},"w":{"docs":{},"a":{"docs":{},"i":{"docs":{},"t":{"docs":{},"中":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"简":{"docs":{},"单":{"docs":{},"使":{"docs":{},"用":{"docs":{},"示":{"docs":{},"例":{"docs":{},"：":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}}}}},"获":{"docs":{},"得":{"docs":{},"写":{"docs":{},"锁":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"读":{"docs":{},"锁":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}},"取":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}},"线":{"docs":{},"程":{"docs":{},"组":{"docs":{},"中":{"docs":{},"活":{"docs":{},"动":{"docs":{},"线":{"docs":{},"程":{"docs":{},"的":{"docs":{},"数":{"docs":{},"量":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}},"线":{"docs":{},"程":{"docs":{},"组":{"docs":{},"的":{"docs":{},"数":{"docs":{},"量":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}},"的":{"docs":{},"父":{"docs":{},"线":{"docs":{},"程":{"docs":{},"组":{"docs":{},"的":{"docs":{},"名":{"docs":{},"称":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}},"组":{"docs":{},"名":{"docs":{},"称":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}},"释":{"docs":{},"放":{"docs":{},"写":{"docs":{},"锁":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}},"读":{"docs":{},"锁":{"docs":{"Ch4-Lock的使用/01-ReentrantLock类.html":{"ref":"Ch4-Lock的使用/01-ReentrantLock类.html","tf":0.0007209805335255948}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}},"区":{"docs":{},"别":{"docs":{},"：":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}},"周":{"docs":{},"期":{"docs":{},"执":{"docs":{},"行":{"docs":{},"：":{"docs":{},"s":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.012345679012345678}}}}}}}}}}}}}}}}}}}}}}}}},"无":{"docs":{},"追":{"docs":{},"赶":{"docs":{},"执":{"docs":{},"行":{"docs":{},"性":{"docs":{},"：":{"docs":{},"s":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}}}}}}}}},"限":{"docs":{},"期":{"docs":{},"的":{"docs":{},"等":{"docs":{},"待":{"docs":{},"另":{"docs":{},"一":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"的":{"docs":{},"操":{"docs":{},"作":{"docs":{},"，":{"docs":{},"如":{"docs":{},"调":{"docs":{},"用":{"docs":{},"了":{"docs":{},"w":{"docs":{},"a":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{},"j":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},"后":{"docs":{"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":0.02857142857142857}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"特":{"docs":{},"别":{"docs":{},"耗":{"docs":{},"时":{"docs":{},"导":{"docs":{},"致":{"docs":{},"在":{"docs":{},"它":{"docs":{},"后":{"docs":{},"面":{"docs":{},"执":{"docs":{},"行":{"docs":{},"的":{"docs":{},"任":{"docs":{},"务":{"docs":{},"过":{"docs":{},"期":{"docs":{},"了":{"docs":{},"，":{"docs":{},"那":{"docs":{},"么":{"docs":{},"到":{"docs":{},"它":{"docs":{},"后":{"docs":{},"面":{"docs":{},"的":{"docs":{},"任":{"docs":{},"务":{"docs":{},"执":{"docs":{},"行":{"docs":{},"时":{"docs":{},"，":{"docs":{},"这":{"docs":{},"个":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"追":{"docs":{},"赶":{"docs":{},"执":{"docs":{},"行":{"docs":{},"性":{"docs":{},"体":{"docs":{},"现":{"docs":{},"在":{"docs":{},"任":{"docs":{},"务":{"docs":{},"给":{"docs":{},"定":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"过":{"docs":{},"期":{"docs":{},"了":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"，":{"docs":{},"有":{"docs":{},"追":{"docs":{},"赶":{"docs":{},"执":{"docs":{},"行":{"docs":{},"性":{"docs":{},"的":{"docs":{},"任":{"docs":{},"务":{"docs":{},"会":{"docs":{},"把":{"docs":{},"从":{"docs":{},"给":{"docs":{},"定":{"docs":{},"的":{"docs":{},"时":{"docs":{},"间":{"docs":{},"到":{"docs":{},"当":{"docs":{},"前":{"docs":{},"时":{"docs":{},"间":{"docs":{},"中":{"docs":{},"漏":{"docs":{},"执":{"docs":{},"行":{"docs":{},"的":{"docs":{},"任":{"docs":{},"务":{"docs":{},"的":{"docs":{},"全":{"docs":{},"都":{"docs":{},"补":{"docs":{},"执":{"docs":{},"行":{"docs":{},"完":{"docs":{},"成":{"docs":{},"，":{"docs":{},"再":{"docs":{},"开":{"docs":{},"始":{"docs":{},"按":{"docs":{},"周":{"docs":{},"期":{"docs":{},"执":{"docs":{},"行":{"docs":{},"，":{"docs":{},"而":{"docs":{},"无":{"docs":{},"追":{"docs":{},"赶":{"docs":{},"执":{"docs":{},"行":{"docs":{},"性":{"docs":{},"的":{"docs":{},"任":{"docs":{},"务":{"docs":{},"只":{"docs":{},"补":{"docs":{},"执":{"docs":{},"行":{"docs":{},"一":{"docs":{},"次":{"docs":{},"的":{"docs":{},"，":{"docs":{},"就":{"docs":{},"开":{"docs":{},"始":{"docs":{},"按":{"docs":{},"周":{"docs":{},"期":{"docs":{},"执":{"docs":{},"行":{"docs":{},"。":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"锁":{"docs":{},"而":{"docs":{},"取":{"docs":{},"消":{"docs":{},"不":{"docs":{},"成":{"docs":{},"功":{"docs":{},"。":{"docs":{},"(":{"docs":{},"见":{"docs":{},"c":{"docs":{},"h":{"5":{"docs":{},".":{"docs":{},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"l":{"docs":{},".":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"l":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},")":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}},"需":{"docs":{},"要":{"docs":{},"用":{"docs":{},"到":{"docs":{},"的":{"docs":{},"类":{"docs":{},"和":{"docs":{},"一":{"docs":{},"些":{"docs":{},"方":{"docs":{},"法":{"docs":{},"技":{"docs":{},"术":{"1":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}},"docs":{}}},"docs":{"Ch5-定时器Timer/01-定时器Timer.html":{"ref":"Ch5-定时器Timer/01-定时器Timer.html","tf":0.006172839506172839}}}}}}}}}}}}}}},"单":{"docs":{},"例":{"docs":{},"模":{"docs":{},"式":{"docs":{},"与":{"docs":{},"多":{"docs":{},"线":{"docs":{},"程":{"1":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}},"docs":{}}},"docs":{"Ch6-单例模式与多线程/":{"ref":"Ch6-单例模式与多线程/","tf":5},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":5.002277904328018}}}}}},"的":{"docs":{},"序":{"docs":{},"列":{"docs":{},"化":{"docs":{},"和":{"docs":{},"反":{"docs":{},"序":{"docs":{},"列":{"docs":{},"化":{"1":{"docs":{},".":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}},"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}},"：":{"docs":{},"就":{"docs":{},"是":{"docs":{},"一":{"docs":{},"个":{"docs":{},"类":{"docs":{},"，":{"docs":{},"它":{"docs":{},"只":{"docs":{},"可":{"docs":{},"以":{"docs":{},"创":{"docs":{},"建":{"docs":{},"出":{"docs":{},"来":{"docs":{},"一":{"docs":{},"个":{"docs":{},"对":{"docs":{},"象":{"docs":{},"，":{"docs":{},"它":{"docs":{},"不":{"docs":{},"允":{"docs":{},"许":{"docs":{},"我":{"docs":{},"们":{"docs":{},"自":{"docs":{},"己":{"docs":{},"创":{"docs":{},"建":{"docs":{},"对":{"docs":{},"象":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"我":{"docs":{},"们":{"docs":{},"首":{"docs":{},"先":{"docs":{},"要":{"docs":{},"把":{"docs":{},"它":{"docs":{},"的":{"docs":{},"构":{"docs":{},"造":{"docs":{},"函":{"docs":{},"数":{"docs":{},"私":{"docs":{},"有":{"docs":{},"化":{"docs":{},"：":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"对":{"docs":{},"象":{"docs":{},"的":{"docs":{},"时":{"docs":{},"候":{"docs":{},"有":{"docs":{},"线":{"docs":{},"程":{"docs":{},"安":{"docs":{},"全":{"docs":{},"问":{"docs":{},"题":{"docs":{},"，":{"docs":{},"当":{"docs":{},"我":{"docs":{},"们":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}},"线":{"docs":{},"程":{"docs":{},"单":{"docs":{},"例":{"docs":{},"模":{"docs":{},"式":{"docs":{},"的":{"docs":{},"实":{"docs":{},"现":{"1":{"docs":{},".":{"1":{"docs":{},".":{"1":{"docs":{},".":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}},"docs":{}}},"docs":{}}},"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}},"完":{"docs":{},"了":{"docs":{},"单":{"docs":{},"例":{"docs":{},"对":{"docs":{},"象":{"docs":{},"之":{"docs":{},"后":{"docs":{},"就":{"docs":{},"不":{"docs":{},"涉":{"docs":{},"及":{"docs":{},"线":{"docs":{},"程":{"docs":{},"安":{"docs":{},"全":{"docs":{},"问":{"docs":{},"题":{"docs":{},"了":{"docs":{},"，":{"docs":{},"这":{"docs":{},"时":{"docs":{},"候":{"docs":{},"多":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"来":{"docs":{},"取":{"docs":{},"对":{"docs":{},"象":{"docs":{},"是":{"docs":{},"不":{"docs":{},"会":{"docs":{},"发":{"docs":{},"生":{"docs":{},"问":{"docs":{},"题":{"docs":{},"的":{"docs":{},"，":{"docs":{},"可":{"docs":{},"是":{"docs":{},"这":{"docs":{},"个":{"docs":{},"时":{"docs":{},"候":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"序":{"docs":{},"列":{"docs":{},"化":{"docs":{},"前":{"docs":{},"后":{"docs":{},"对":{"docs":{},"象":{"docs":{},"的":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"不":{"docs":{},"变":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}},"改":{"docs":{},"变":{"docs":{},"了":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}}}},"延":{"docs":{},"迟":{"docs":{},"加":{"docs":{},"载":{"docs":{},"：":{"docs":{},"懒":{"docs":{},"汉":{"docs":{},"模":{"docs":{},"式":{"1":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}},"docs":{}}},"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}},"懒":{"docs":{},"汉":{"docs":{},"模":{"docs":{},"式":{"docs":{},"不":{"docs":{},"能":{"docs":{},"保":{"docs":{},"证":{"docs":{},"单":{"docs":{},"例":{"docs":{},"的":{"docs":{},"主":{"docs":{},"要":{"docs":{},"原":{"docs":{},"因":{"docs":{},"在":{"docs":{},"这":{"docs":{},"里":{"docs":{},"：":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}},"与":{"docs":{},"线":{"docs":{},"程":{"docs":{},"安":{"docs":{},"全":{"docs":{},"问":{"docs":{},"题":{"1":{"docs":{},".":{"3":{"docs":{},".":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}},"docs":{}}},"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}},"成":{"docs":{},"员":{"docs":{},"变":{"docs":{},"量":{"docs":{},"：":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}},"枚":{"docs":{},"举":{"docs":{},"中":{"docs":{},"只":{"docs":{},"有":{"docs":{},"一":{"docs":{},"个":{"docs":{},"类":{"docs":{},"型":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}},"直":{"docs":{},"接":{"docs":{},"在":{"docs":{},"调":{"docs":{},"用":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"方":{"docs":{},"法":{"docs":{},"前":{"docs":{},"就":{"docs":{},"把":{"docs":{},"这":{"docs":{},"个":{"docs":{},"对":{"docs":{},"象":{"docs":{},"创":{"docs":{},"建":{"docs":{},"出":{"docs":{},"来":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"真":{"docs":{},"正":{"docs":{},"需":{"docs":{},"要":{"docs":{},"同":{"docs":{},"步":{"docs":{},"执":{"docs":{},"行":{"docs":{},"就":{"docs":{},"是":{"docs":{},"这":{"docs":{},"句":{"docs":{},"！":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}}}}}},"立":{"docs":{},"即":{"docs":{},"加":{"docs":{},"载":{"docs":{},"：":{"docs":{},"饿":{"docs":{},"汉":{"docs":{},"模":{"docs":{},"式":{"1":{"docs":{},".":{"1":{"docs":{},".":{"2":{"docs":{},".":{"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}},"docs":{}}},"docs":{}}},"docs":{"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"ref":"Ch6-单例模式与多线程/01-单例模式与多线程.html","tf":0.002277904328018223}}}}}}}}}}},"拾":{"docs":{},"遗":{"docs":{},"增":{"docs":{},"补":{"docs":{"Ch7-拾遗增补/":{"ref":"Ch7-拾遗增补/","tf":5}}}}}},"下":{"docs":{},"面":{"docs":{},"是":{"docs":{},"线":{"docs":{},"程":{"docs":{},"状":{"docs":{},"态":{"docs":{},"在":{"docs":{},"一":{"docs":{},"些":{"docs":{},"线":{"docs":{},"程":{"docs":{},"相":{"docs":{},"关":{"docs":{},"的":{"docs":{},"方":{"docs":{},"法":{"docs":{},"调":{"docs":{},"用":{"docs":{},"后":{"docs":{},"的":{"docs":{},"状":{"docs":{},"态":{"docs":{},"示":{"docs":{},"意":{"docs":{},"图":{"docs":{},"：":{"docs":{"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":0.02857142857142857}}}}}}}}}}}}}}}}}}}}}}}}}}},"通":{"docs":{},"过":{"docs":{},"一":{"docs":{},"个":{"docs":{},"实":{"docs":{},"例":{"docs":{},"来":{"docs":{},"说":{"docs":{},"明":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}},"正":{"docs":{},"在":{"docs":{},"等":{"docs":{},"待":{"docs":{},"某":{"docs":{},"个":{"docs":{},"监":{"docs":{},"视":{"docs":{},"器":{"docs":{},"锁":{"docs":{"Ch7-拾遗增补/01-线程的状态.html":{"ref":"Ch7-拾遗增补/01-线程的状态.html","tf":0.02857142857142857}}}}}}}}}}}},"准":{"docs":{},"备":{"docs":{},"工":{"docs":{},"作":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}},"批":{"docs":{},"量":{"docs":{},"停":{"docs":{},"止":{"docs":{},"组":{"docs":{},"内":{"docs":{},"线":{"docs":{},"程":{"1":{"docs":{},".":{"3":{"docs":{},".":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}},"docs":{}}},"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}},"效":{"docs":{},"果":{"docs":{},"和":{"docs":{},"下":{"docs":{},"一":{"docs":{},"句":{"docs":{},"也":{"docs":{},"是":{"docs":{},"一":{"docs":{},"样":{"docs":{},"的":{"docs":{},"，":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}}},"新":{"docs":{},"建":{"docs":{},"线":{"docs":{},"程":{"docs":{},"组":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{},"并":{"docs":{},"把":{"docs":{},"它":{"docs":{},"加":{"docs":{},"入":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"线":{"docs":{},"程":{"docs":{},"组":{"docs":{},"，":{"docs":{},"新":{"docs":{},"建":{"docs":{},"线":{"docs":{},"程":{"docs":{},"并":{"docs":{},"加":{"docs":{},"入":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"演":{"docs":{},"示":{"docs":{},"线":{"docs":{},"程":{"docs":{},"组":{"docs":{},"的":{"docs":{},"各":{"docs":{},"种":{"docs":{},"操":{"docs":{},"作":{"docs":{},"方":{"docs":{},"法":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}}}},"递":{"docs":{},"归":{"docs":{},"与":{"docs":{},"非":{"docs":{},"递":{"docs":{},"归":{"docs":{},"取":{"docs":{},"得":{"docs":{},"组":{"docs":{},"内":{"docs":{},"对":{"docs":{},"象":{"1":{"docs":{},".":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}},"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}},"的":{"docs":{},"获":{"docs":{},"取":{"docs":{},"组":{"docs":{},"内":{"docs":{},"对":{"docs":{},"象":{"docs":{},"：":{"docs":{"Ch7-拾遗增补/02-线程组.html":{"ref":"Ch7-拾遗增补/02-线程组.html","tf":0.00625}}}}}}}}}}}},"供":{"docs":{},"给":{"docs":{},"多":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"使":{"docs":{},"用":{"docs":{},"的":{"docs":{},"话":{"docs":{},"，":{"docs":{},"极":{"docs":{},"易":{"docs":{},"出":{"docs":{},"现":{"docs":{},"日":{"docs":{},"期":{"docs":{},"转":{"docs":{},"换":{"docs":{},"错":{"docs":{},"误":{"docs":{},"的":{"docs":{},"情":{"docs":{},"况":{"docs":{},"。":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}}}}}}}}}}}}}}}}}}}}},"再":{"docs":{},"把":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"日":{"docs":{},"期":{"docs":{},"转":{"docs":{},"换":{"docs":{},"成":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}}}}}}}}}},"检":{"docs":{},"查":{"docs":{},"转":{"docs":{},"换":{"docs":{},"回":{"docs":{},"来":{"docs":{},"的":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"和":{"docs":{},"原":{"docs":{},"字":{"docs":{},"符":{"docs":{},"串":{"docs":{},"是":{"docs":{},"否":{"docs":{},"相":{"docs":{},"等":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"有":{"docs":{},"转":{"docs":{},"换":{"docs":{},"错":{"docs":{},"的":{"docs":{},"就":{"docs":{},"打":{"docs":{},"印":{"docs":{},"出":{"docs":{},"来":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.003676470588235294}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"转":{"docs":{},"换":{"docs":{},"成":{"docs":{},"了":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.007352941176470588}}}},"错":{"docs":{},"误":{"docs":{},"，":{"docs":{},"把":{"docs":{"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"ref":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","tf":0.007352941176470588}}}}}}}},"应":{"docs":{},"用":{"docs":{},"：":{"docs":{},"实":{"docs":{},"现":{"docs":{},"一":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"组":{"docs":{},"中":{"docs":{},"的":{"docs":{},"一":{"docs":{},"个":{"docs":{},"线":{"docs":{},"程":{"docs":{},"出":{"docs":{},"现":{"docs":{},"了":{"docs":{},"异":{"docs":{},"常":{"docs":{},"后":{"docs":{},"组":{"docs":{},"内":{"docs":{},"线":{"docs":{},"程":{"docs":{},"全":{"docs":{},"部":{"docs":{},"停":{"docs":{},"止":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"测":{"docs":{},"试":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.010526315789473684}}}},"该":{"docs":{},"线":{"docs":{},"程":{"docs":{},"组":{"docs":{},"会":{"docs":{},"调":{"docs":{},"用":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"u":{"docs":{},"p":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},"，":{"docs":{},"就":{"docs":{},"中":{"docs":{},"断":{"docs":{},"了":{"docs":{},"自":{"docs":{},"己":{"docs":{},"组":{"docs":{},"内":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"线":{"docs":{},"程":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"语":{"docs":{},"句":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"有":{"docs":{},"则":{"docs":{},"不":{"docs":{},"会":{"docs":{},"执":{"docs":{},"行":{"docs":{"Ch7-拾遗增补/04-线程中的异常处理.html":{"ref":"Ch7-拾遗增补/04-线程中的异常处理.html","tf":0.005263157894736842}}}}}}}}}}}}}},"length":2700},"corpusTokens":["!=","\"","\");","\",","\"2000","\":","\"a\";","\"aa\");","\"aa\";","\"bb\");","\"c\";","\"cc\";","\"newgroup\");","\"runnablea\");","\"runnableb\");","\"thread","\"thread1\");","\"thread2\");","\"threada\");","\"threadb\");","\"我是新的默认初始值，有了我以后，第一次调用get()就不会返回null了\";","\"没获得锁\");","\"获得锁\");","\"非线程安全\"是我们要考虑的一个问题，\"非线程安全\"可能会导致数据的脏读，使得程序运行产生错误的结果。","\"非线程安全\"问题一般存在于\"实例变量\"中，因为实例变量是有可能被多个线程所共享的，而方法内部的私有变量对于每个线程都是有一个副本的，因此不存在\"非线程安全\"问题，也就是说只有共享资源的读写问题才需要我们通过\"同步化\"去解决线程安全问题。","&","(!hasvalue)","(!ispreva)","(!newdatestring.equals(datestring))","(a","(anystring)","(assign赋值)","(class)","(classnotfoundexcept","(e","(except","(false)。","(filenotfoundexcept","(hasvalue)","(int","(int)","(interruptedexcept","(ioexcept","(ispreva)","(list)","(list.getsize()","(list.size()","(load)","(lock)","(lock.trylock())","(lock1)","(lock2)","(map","(math.random()","(milli","(nextprint","(parseexcept","(readlen","(runflag)","(service.class)","(simpledateformat","(singleton","(singleton)","(singleton.class)","(t)e.value;","(this)","(true)","(true)，还是非公平锁","(use)","(username.equals(\"a\"))","(username.equals(\"b\"))","(valueobject.list.size()","(x)","(因为它会将私有内存和公共内存中的数据做同步)。","(强烈建议不使用，要作废了，还不安全)","(比较温和，不会强行终止一个正在运行的线程)","(等待)","(见","(见ch5.fixrate.scheduletest.java)*","(通知)","(锁对象)修饰在代码块前面","(非","(非this对象)","(非this对象)的三个结论","(非this对象)的三个结论1.5.","*","*/","+","...","/","/*","/**","//","0","0\":","0)","0,","01","01\",","02\",","03\",","04\",","05\",","06\",","07\",","08\",","09\",","0;","0，则再次进入","0，则执行","0，此时","1","1\"","1\":","1)","1.","1.1","1.1.","1.1.1.","1.1.2.","1.2.","1.2.1.","1.2.2.","1.2.3.","1.3.","1.3.1.","1.3.2.","1.3.3.","1.3.4.","1.4.","1.4.1.","1.4.2.","1.4.3.","1.4.4.","1.4.5.","1.5","1.5.","1.5.1.","1.5.2.","1.5.3.","1.6.","1.6.1.","1.6.2.","1.7.","1.7.1.","1.7.2.","1.8.","1.加锁","10","10\"};","10);","10000);","10;","10个线程用的都是这个simpledateformat对象","13428","14852","16868","1;","1~10，如果不在这个范围会抛出","1，这个操作虽然只有一行，不过是一个典型的非原子操作，它的操作步骤分解如下：","2","2)","2.","2.1.","2.2.","2.等待","2.通知","2664","2;","3","3)","3.","3.1.","3.2.","3.3.","3.放锁","312714112","3783","3;","3，note","4","4.","4.1.","49997","49998","49999","5","5)","5.","5.1.","50000","5;","6.","6.1.","668386784","7","7.","7.1.","7.2.","7.3.","7.4.","=","==","===================================================",">",">lock1",">lock1\");",">lock2",">lock2\");","@overrid","@suppresswarnings(\"unchecked\")","[id值]，查看结果","\\\\","a\");","aa","above:","acquireinterruptibly(abstractqueuedsynchronizer.java:1220)","add","add()","add(lock);","add(object","add(str","add)","add.add();","add.java","add;","addcountthread","addcountthread();","addcountthread.java","addservicemethod(myonelist","anystr","args)","arraylist();","arraylist<>();","arraylist，我们要保证这个","atomicinteg","atomicinteger(0);","await","await()","await()方法的增强版","await()方法的增强版1.5.","await(long","await_a()","await_a,","await_b()","await_b,","awaituninterruptibly()","awaituninterruptibly()：","awaituninterruptibly()：不能被中断的","awaituntil(d","await中interrupt线程，抛异常！","a线程接到main线程发送通知再次启动","a获得锁","b","b\");","backupa","backupa()","backupa(dbtool","backupa.java","backupb","backupb()","backupb(dbtool","backupb.java","base","begin","begin\");","begin,","begin.","begin.\");","block","blocked,","boolean","buffer","byte[20];","byte[]","b交叉运行","b没获得锁","c","c:\\users\\bean\\ideaprojects\\learnspring>jp","c:\\users\\bean\\ideaprojects\\learnspring>jstack","calendar","calendar.getinstance();","calendarref","calendarref.get(calendar.second)","calendarref.gettime();","calendarref.set(calendar.second,","cancel()","catch","catch\");","catch）。","ch2.deadlock.deadlock.run(deadlock.java:23)","ch2.deadlock.deadlock.run(deadlock.java:36)","ch3.change.subtract.subtrack(subtract.java:19)","ch3.change.threadsubtract.run(threadsubtract.java:13)","ch3.join.interrupt.threadb.run(threadb.java:9)","ch4.lockinterrupt.myservice.waitmethod(myservice.java:10)","ch4.lockinterrupt.run$1.run(run.java:9)","ch7.enumerate.run.java)","ch7.interrupt.run.java)","ch7.simpledateformat.controller;","ch7.simpledateformat.formaterror;","ch7.simpledateformat.resolveerror;","ch7.simpledateformat.stopgroup;","ch7.threadgroup;","childvalue(object","class","condit","condition)：查询是否有线程在等待与此锁有关的","condition)：返回等待与此锁有关的的给定","condition.await();","condition.signal();","condition.signalall();","conditiona","conditiona.await();","conditiona.signalall();","conditiona，conditionb，conditionc","conditionb","conditionb.await();","conditionb.signalall();","conditionc","conditionc.await();","conditionc.signalall();","condition中的方法","condition实现生产者/消费者模式","condition实现生产者/消费者模式1.3.","condition类实现等待/通知","condition类实现等待/通知1.2.1.","condition类的方法介绍","condition类的方法介绍1.2.2.","condition：","count","countoper","countoperate()","countoperate();","countoperate.java","countoperatemain","countoperatemain.java","countthread","cpu","createmap(t,","currentthread()","currentthread()1.4.2.","data","data)","dataread","datareader.java","datareader.readmethod(in);","datawrit","datawriter.java","datawriter.writemethod(out);","date","date().gettime();","datepattern)","dateref","datestr","datestring)","datestring;","datetool","datetools.getsimpledateformat(\"yyyi","dbtool","dbtools();","dbtools)","dbtools.backupa();","dbtools.backupb();","dbtools.java","dbtools;","dcl","dcl双检查锁机制","dcl双检查锁机制1.3.2.","dd\").","dd\").parse(datestring);","dd\");","deadlin","deadline)：等待到","deadlock","deadlock();","deadlock.","deadlock.java","deadlock.setusername(\"a\");","deadlock.setusername(\"b\");","defaultuncaughtexceptionhandletest","delay","delay)","delay,","delay设置任务开始执行的时间","delay设置任务开始执行的时间1.5.","e","e)","e);","e.printstacktrace();","end","end\");","end\"就会被卡住。这是为什么呢？因为：程序被停在了","end\"，然后卡住，如果加了","end,","end.","end.\");","ended,","ending,","entri","entry(threadloc","enum","enumsingleton","enumsingleton();","enum数据类型","enum数据类型1.4.","errorthread","errorthread();","errorthread.setdefaultuncaughtexceptionhandler(new","ex","except","extend","fair)","fals","false);","false;","false。","false，是","false，第二次调用就为","fi","file(\"multithread/src/ch6/staticclass/singletonfile.txt\"));","fileinputstream","fileinputstream(","fileoutputstream","fileoutputstream(","final","finally块中放锁","firsttim","firsttime)","firsttime,","firsttime设置任务开始执行的时间","firsttime设置任务开始执行的时间1.4.","fis.close();","fo","format(dateref).tostring();","fos.close();","found","get()","get()：获取当前线程的值。","getbytes()","getholdcount()：查询当前线程线程保持此锁定的个数，就是调用","getid()","getid()1.5.","getinst","getinstance()","getmap(t);","getpassword()","getqueuelength()：返回正在争夺此锁的估计数。","getsimpledateformat(str","getsize()","getusername()","getvalu","getvalue()","getwaitqueuelength(condit","group","hasqueuedthread(thread","hasqueuedthreads()：查询是否有线程在等待获取此锁。","hasvalu","haswaiters(condit","has类","has类1.4.3.","i++","i++的非原子性","i++的非原子性1.5.","i++，就是","i=104430","i=104431","i=104432","id","illegalargumentexcept","implement","in)","in.close();","in.read(buffer);","in;","index:","inform","inheritablethreadloc","inheritablethreadlocalext","inheritablethreadlocal类","inheritablethreadlocal类1.","initialvalue()","initialvalue();","inperrupt方法遇到wait","inperrupt方法遇到wait1.4.","input","inputstream","int","interrupt()","interrupted()","interruptedexcept","introduct","io","isalive()","isalive()1.4.3.","isfair","isfair()：判断此锁是不是公平锁。","isheldbycurrentthread()：查询当前线程是否保持此锁。","islocked()：查询此锁是否由任意线程保持。","ispreva","isrunflag()","java","java.lang.indexoutofboundsexception:","java.lang.interruptedexcept","java.lang.object)","java.lang.object.wait(n","java.lang.thread.join(thread.java:1252)","java.lang.thread.join(thread.java:1326)","java.lang.thread.run(thread.java:748)","java.lang.threaddeath","java.util.arraylist.rangecheck(arraylist.java:653)","java.util.arraylist.remove(arraylist.java:492)","java.util.concurrent.locks.abstractqueuedsynchronizer.","java.util.concurrent.locks.reentrantlock.lockinterruptibly(reentrantlock.java:335)","javamultithread","javamultithread1.","java多线程技能","java多线程概述","java多线程概述1.1.","java多线程编程","java的线程状态转换说明","java的线程状态转换说明1.2.3.","jdk","join","join()","join()后面的代码提前运行的意外","join()后面的代码提前运行的意外1.","join()方法的功能","join()方法的功能1.2.","join(0)，所以我们只看","join(long","join(long)","join(long)和sleep(long)的区别","join(long)和sleep(long)的区别1.4.","join方法","join方法1.1.","join过程中线程被中断","join过程中线程被中断1.3.","jp","jstack","jvm","k,","key","l","launcher","list","list)","list,","list.add(data);","list.add(new","list.getsize());","list.size();","list.size()=0","list;","listgroupfals","listgrouptru","listsize=2","list，比如一个","lock","lock()","lock()方法的各种增强版方法（重要）","lock()方法的各种增强版方法（重要）1.4.5.","lock)","lock)).start();","lock.lock();","lock.lock()，这相当于只能在","lock.newcondition();","lock.notifyall();","lock.readlock().lock();","lock.readlock().unlock();","lock.unlock();","lock.wait();","lock.writelock().lock();","lock.writelock().unlock();","lock1","lock2","lock2)","lock;","lockinterruptibly()","lockinterruptibly()，如果拿到这个锁的线程已经被打上了中断标记，就会直接抛出","lockinterruptibly()：","lockinterruptibly()：如果当前线程未被中断，获取锁定，如果当前线程已有中断标记，则抛出异常。","lock的使用","lock的方法们","lock的方法们1.4.1.","long","main","main(string[]","main.java","maingroup.enumerate(listgroupfalse,","maingroup.enumerate(listgrouptrue,","main的父线程组名称：system","main线程发送a线程再次启动的通知","map","map.getentry(this);","map.set(this,","max_priorti","method","method\"","method()","method)","method1()","method2()","method3()","methoda()","methodb()","millis)","min_priorti","mm","myenumsingleton","myenumsingleton()","myenumsingleton.singletonfactory.getinstance();","mylist","mylist();","mylist.java","myonelist","myonelist();","myonelist.java","myservic","myservice();","myservice.java","mytask","mytask(num);","mythread","mythread#run()","mythread();","mythread(simpledateformat","mythread(str","mythread.java","mythread.join();","mythread.start();","mythread1","mythread1(list);","mythread1(myonelist","mythread1.java","mythread2","mythread2(list);","mythread2(myonelist","mythread2.java","mythread[10];","mythread[]","mythreadgroup","mythreadgroup(str","mythreadmain","mythreadmain.java","mythread执行完了，我再执行一下","n","n/2","name)","name);","new","new,","newdatestr","newdatestring);","newgroup的父线程组名称：main","newline();","newpriorty)，可以设置为","nextprint","norm_priorti","note","note0","note1","note1:","note2:","note3:","note4:","notea1","notea2","notea3","noteb1","noteb2","noteb3","notec1","notec2","notec3","notifi","notifuall()","notify()","notify()：随机唤醒等待队列中等待锁的一个线程，使该线程退出等待队列，进入可运行状态","notifyall();","notifyall()：使所有线程退出等待队列，进入可运行状态，执行的顺序由","notify，会导致被","notify，它才会被选中进入就绪队列，等待被","now","null)","null;","object","object());","object();","object()，同时要注意：只要对象不变，既使该对象的属性改变了，结果还是同步的，比如我们使用一个us","object.getpassword());","object.printstring(\"b\",","objectinputstream","objectinputstream(fis);","objectoutputstream","objectoutputstream(fos);","objectstreamexcept","oi","ois.close();","ois.readobject();","oo","oos.close();","oos.writeobject(singleton);","out)","out;","output","outputstream","outputstream.connect(inputstream);","output：","packag","parentvalu","parentvalue)","password","password)","password);","password;","password=\"","password=aa","password=bb","password=cc","period)","pipedinputstream","pipedinputstream();","pipedoutputstream","pipedoutputstream();","print(x);","println","println(int","printstring(str","printsuspendthread","printsuspendthread();","printsuspendthread.java","printsuspendthread.start();","printsuspendthread.suspend();","printsuspendthreadmain","printsuspendthreadmain.java","privat","protect","public","publicvar","publicvar();","publicvar)","publicvar.getvalue();","publicvar.java","publicvar.setvalue(\"a\",","publicvar.setvalue(\"b\",","publicvar;","queue","readlen","readlen);","readmethod(pipedinputstream","readresolve()","reentrantlock","reentrantlock();","reentrantlock()中","reentrantlock(boolean","reentrantlock类","reentrantlock类1.1.","reentrantlock类的使用简介","reentrantlock类的使用简介1.1.1.","reentrantreadwritelock","reentrantreadwritelock();","reentrantreadwritelock操作方法","reentrantreadwritelock操作方法1.","reentrantreadwritelock的操作特点","reentrantreadwritelock的操作特点2.2.","reentrantreadwritelock类","reentrantreadwritelock类2.1.","remov","remove\");","remove()：移除当前线程的值。","result","result;","resum","resume()：恢复线程","return","run","run()","run.java","rundat","rundate);","runflag","runflag)","runflag;","runmethod()","runnabl","runnable()","runnable,","runnablea","runnablea,","runnableb","runnableb,","runnable（可运行）状态，不过这个是一个准备运行的状态，当这个线程抢占到","running\");","running（运行）状态。","runtimeexception，不用","saveandread","schedul","scheduleatfixedrate()和schedule()的区别","scheduleatfixedrate()和schedule()的区别1.","secondvalu","servic","service();","service)","service.addservicemethod(list,","service.await_a();","service.await_b();","service.get();","service.java","service.method1();","service.method2();","service.method3();","service.runflag","service.runflag，而这个问题也正是由于公共堆栈和私有堆栈中的值不同步造成的。","service.runmethod();","service.set();","service.signalall_a();","service.stopmethod();","service.testmethod();","service.waitmethod();","service1","service1()","service2","service2()","service2();","service2，这样","service;","set","set()","set()：设置当前线程的值。","setdefaultuncaughtexceptionhandle()：对一个线程类的所有对象设置异常处理器。","setdefaultuncaughtexceptionhandle：","setinitialvalue()","setinitialvalue();","setpassword(str","setrunflag(boolean","setuncaughtexceptionhandle()：给指定线程对象设置异常处理器。","setuncaughtexceptionhandle：","setusername(str","setvalu","setvalue(str","signal","signal()","signalal","signalall()","signalall_a()","signalall_a,","signalall_b()","simpledataformat类的非线程安全处理","simpledataformat类的非线程安全处理1.","simpledateformat","simpledateformat(\"yyyi","simpledateformat(datepattern);","simpledateformat,","simpledateformat.format(dateref).tostring();","simpledateformat.parse(datestring);","simpledateformat;","simpledateformat：","singleton","singleton()","singleton();","singleton.getinstance();","singleton;","singletonfactory;","singletonhandl","singletonhandle.singleton;","size()","size:","sleep","sleep()","sleep(long)","sleep(毫秒数)","sleep(毫秒数)1.4.4.","sleep中停止","sleep时，thb改变了username的值，出现了数据不同步的问题","someth","stack","start()","state","static","static代码块","static代码块1.3.4.","static内部类（不适用于序列化）","static内部类（不适用于序列化）1.3.3.","stop()","stopmethod()","stop暴力停止线程的弊端","stop暴力停止线程的弊端1.6.","string","string();","string(buffer,","string[]","subtrack()","subtract","subtract(lock);","subtract(object","subtract)","subtract.java","subtract.subtrack();","subtract;","super();","super(k);","super(name);","super.run();","super.uncaughtexception(t,","suspend","suspend()","suspend()（这个方法极易导致死锁，不建议使用）","suspend()：暂停线程","sybchron","synchron","synchronizedobject","synchronizedobject();","synchronizedobject.java","synchronizedobjectmain","synchronizedobjectmain.java","synchronized使用方式","synchronized使用方式1.3.","synchronized修饰在方法前面，此时锁对象为当前对象本身，也就是thi","synchronized关键字","synchronized关键字1.2.1.","synchronized关键字1.4.","synchronized同步","synchronized同步1.1.","synchronized同步方法","synchronized的可见性功能","synchronized的可见性功能1.4.","synchronized的特性","synchronized的特性1.2.2.","synchronized，但只能用来修饰变量，而","synchronized：同步，加个前缀","system.currenttimemillis()","system.currenttimemillis());","system.currenttimemillis();","system.out.print(\"main的父线程组名称：\");","system.out.print(\"newgroup的父线程组名称：\");","system.out.print(\"线程组中活动线程的数量：\");","system.out.print(\"线程组的名称：\");","system.out.print(data);","system.out.println(\"","system.out.println(\"a","system.out.println(\"b","system.out.println(\"begin","system.out.println(\"countoper","system.out.println(\"end","system.out.println(\"get\");","system.out.println(\"list.size()=\"","system.out.println(\"listsize=\"","system.out.println(\"lock","system.out.println(\"main","system.out.println(\"method","system.out.println(\"mythread\");","system.out.println(\"mythread执行完了，我再执行一下\");","system.out.println(\"read:\");","system.out.println(\"run","system.out.println(\"service1\");","system.out.println(\"service2\");","system.out.println(\"set\");","system.out.println(\"signalall_a,","system.out.println(\"signalall_b,","system.out.println(\"this.getname()=\"","system.out.println(\"this.isalive()=\"","system.out.println(\"thread.currentthread().getname()=\"","system.out.println(\"thread.currentthread().isalive()=\"","system.out.println(\"thread:","system.out.println(\"threada\");","system.out.println(\"threadb\");","system.out.println(\"threadb被中断，抛了个异常被catch了\");","system.out.println(\"threadb运行结束了\");","system.out.println(\"threadc\");","system.out.println(\"threadname=\"","system.out.println(\"username=\"","system.out.println(\"wait","system.out.println(\"wait()","system.out.println(\"write:\");","system.out.println(\"停止成功\");","system.out.println(\"已经发起停止命令\");","system.out.println(\"执行任务\");","system.out.println(\"线程","system.out.println(\"调用了readresolve方法\");","system.out.println();","system.out.println(group.getparent().getname());","system.out.println(i);","system.out.println(object.getusername()","system.out.println(secondvalue);","system.out.println(singleton.hashcode());","system.out.println(thread.currentthread().getname()","system.out.println(thread.currentthread().getname());","system.out.println(thread.currentthread().getthreadgroup().activecount());","system.out.println(thread.currentthread().getthreadgroup().getname());","system.out.println(thread.currentthread().getthreadgroup().getparent().getname());","system.out.println(usernam","system.out.println(username.hashcode());","t","t,","t.getname()","t1","t1.isalive());","t1.isalive()=\"","t1.isalive()=fals","t1.isalive()=tru","t1.setname(\"at1\");","t1.start();","tag","tag，如果打上了","tag，我们有以下两种方法可以进行检测：","tag，我们要在线程中不时检查它是不是已经被打上","targer)构造函数的缘故，而且","target","target);","target,","target;","target，这样我们就不用写","task","task,","terminated;","testmethod()","th1","th1.start();","th1：lock1","th2","th2)，两个锁(lock1,","th2.start();","th2：lock2","tha","tha.setname(\"thread","tha.start();","thb","thb.setname(\"thread","thb.start();","this.add","this.datestr","this.dbtool","this.getname());","this.getname()=thread","this.in","this.interrupt();","this.interrupted()：测试当前线程是否已经是中断状态，执行后将状态标志清除为","this.isalive());","this.isalive()=fals","this.isinterrupted()：测试当前线程是否已经是中断状态，执行后不状态清除状态标志，不是","this.list","this.lock","this.out","this.password","this.password);","this.publicvar","this.runflag","this.servic","this.setname(\"threada\");","this.setname(\"threadb\");","this.simpledateformat","this.subtract","this.threadb","this.usernam","this。","this？","thread","thread#getstate()","thread()","thread();","thread(countoperate);","thread(deadlock);","thread(group,","thread(new","thread(runn","thread(runnable);","thread(runnable,","thread(str","thread(tha).start();","thread)：查询","thread.currentthread()","thread.currentthread().getname()","thread.currentthread().getname());","thread.currentthread().getname()=at1","thread.currentthread().getname()=main","thread.currentthread().isalive());","thread.currentthread().isalive()=tru","thread.currentthread();","thread.interrupt();","thread.sleep(100);","thread.sleep(1000);","thread.sleep(10000);","thread.sleep(100000);","thread.sleep(2000);","thread.sleep(3000);","thread.sleep(50);","thread.sleep(500);","thread.sleep(5000);","thread.sleep(6000);","thread.sleep(secondvalue);","thread.start();","thread.stop();","thread.uncaughtexceptionhandler()","thread1","thread1.setname(\"thread1\");","thread1.setuncaughtexceptionhandler(new","thread1.start();","thread2","thread2.setname(\"thread2\");","thread2.start();","thread3","thread3.setname(\"thread3\");","thread3.start();","thread:","thread[5];","thread[]","threada","threada();","threada(list,","threada(mylist","threada(myservic","threada(publicvar","threada(publicvar);","threada(servic","threada(service).start();","threada(service);","threada.java","threada.join();","threada.setname(\"a\");","threada.start();","threadadd","threadadd(add","threadadd(add)).start();","threadadd.java","threada，并等待","threada：一个执行任务的线程。","threadb","threadb();","threadb(list,","threadb(mylist","threadb(myservic","threadb(publicvar","threadb(publicvar);","threadb(service).start();","threadb)","threadb.interrupt();","threadb.java","threadb.setname(\"b\");","threadb.start();","threadb;","threadb被中断，抛了个异常被catch了","threadb：负责创建并启动","threadc","threadc(threadb","threadc(threadb);","threadc.java","threadc.start();","threadc：负责中断","threadgroup","threadgroup#interrupt()","threadgroup(\"newgroup\");","threadgroup(thread.currentthread().getthreadgroup(),","threadgroup[]","threadgroup[maingroup.activegroupcount()];","threadloc","threadlocal.threadlocalmap","threadlocal.threadlocalmap，然后根据要获得的这个","threadlocal<>();","threadlocalext","threadlocalmap","threadlocalmap.entri","threadlocalmap：","threadlocal的作用","threadlocal的作用1.2.","threadlocal的原理","threadlocal的原理1.3.","threadlocal类","threadlocal类1.1.","threadlocal，我们通过一个","threadlocal，我们需要写一个","threadname=\"","threadname=main","threadname=threada","threadname=threadb","threadread","threadreader(inputstream)).start();","threadreader(pipedinputstream","threadreader.java","threadsubtract","threadsubtract(subtract","threadsubtract(subtract)).start();","threadsubtract.java","threadwrit","threadwriter(outputstream)).start();","threadwriter(pipedoutputstream","threadwriter.java","thread中的4个方法","thread中的4个方法1.4.1.","thread，然后用","thread：threada，threadb，threadc，使三个线程按照","throw","throwabl","time","time)","time)：等待","time,","time=\"","time=1533963611003,","time=1533963611014,","time=1533963614014,","timed_waiting,","timeout,","timer","timer(true);","timer(true)。","timer.schedule(task,","timertask","timeunit","tl","tl.get();","tl.set(simpledateformat);","tri","true","true);","true;","trylock()时，lock被a持有，b就无法获得锁了","trylock()：","trylock()：调用时如果锁并没有被其他线程保持，才获取该锁。","trylock(long","try块中加锁","uncaughtexception(thread","uncaughtexceptionhandletest","unit)","unit)：在给定的时间中，锁也没有被其他线程保持，才获取该锁。就是说我想拿这个锁，这个锁现在也没人拿，不过我也不拿，我要等一会，如果等够了时间锁还没人拿，我在把锁拿走。","usernam","username)","username);","username,","username;","username=\"","username=a","username=b","user作为锁，即使我们改变了user.username的值，结果仍是同步的。","v)","v;","valu","value);","value;","valueobject","valueobject\");","valueobject.java","valueobject.list","valueobject.list.add(\"anystring\");","valueobject.list.remove(0);","valueobject.list.size());","void","volatil","volatile关键字","volatile关键字1.1.","volatile关键字介绍","volatile关键字介绍1.2.","volatile和synchronized的对比","volatile和synchronized的对比1.3.","wait","wait()","wait();","wait()等待的条件发生了变化","wait()等待的条件发生了变化1.5.","wait()：使调用该方法的线程释放锁，从运行状态中退出，进入等待队列，直到接到通知或者被中断","wait(long","wait(long)","wait/notify机制导致的程序逻辑混乱","wait/notify机制导致的程序逻辑混乱1.4.1.","waiting,","waitmethod()","wait，没人通知它可以不","while，这样当","write","writemethod(pipedoutputstream","x","x)","x)进行同步时，x","yield方法","yield方法1.8.","{","{\"2000","{...}","{...}中的lock来调用的，比如：lock.wait()，lock.notify()等，所以这些方法必须在","{}","{}同步代码块时呈同步效果","}","});","};","一个会抛出异常的线程类：","一个标准的timer使用方法实例","一个标准的timer使用方法实例1.3.","一个简单的使用示例","一个简单的使用示例1.1.2.","一个线程的状态可以通过","一定要等待够足够的毫秒数。","一对一交替打印：","一生产一消费","一生产多消费","三个","下面是线程状态在一些线程相关的方法调用后的状态示意图：","下面通过一个实例来说明","不会再计时了，而是往下执行，而","不会发生阻塞，而","不会放开锁。","不会释放锁，原因是","不加","不存在，实例化该字符串并放入池中","不用volatile修饰","不过","不过为了保证“职责单一原则”，我们要把这个enum用class包装一下","不过可能有多个线程都进入了上一个if块，作用这里要再加一层判断","不过当我们在一个程序中对单例对象进行了序列化和反序列化操（必须是一个程序中，如果一个程序进行序列化，另一个程序进行反序列化是肯定不一样的），序列化前后的单例对象并不是同一个对象一个。","不过要注意！！！使用synchron","与","个比较重要的方法：","个线程用来转换日期，不过，这","个线程用的是一个","个线程负责将数据备份到","个线程，其中","中","中一起给出。","中具有","中只有一个元素，这时会涉及到上一节中讲到的","中存的值，不过如果在子线程取得值的同时，父线程修改了","中寻找值并返回。","中新增加的。我们知道可以使用","中有以下","中的","中的service.stopmethod();并没有修改正在运行的","中的值，那么子线程只能取得旧值。","中的方法：","中的线程被中断了就立即会抛异常，然后线程就真的断了，用","中通知了所有等待线程，两个","中通过","中预设的优先级等级：","中（thread.state）：","中，从而实现有选择地进行线程通知，这样可以更灵活的调度线程。","为了提高性能减小内存开销，在实例化字符串常量的时候进行了如下优化：","为什么说等待/通知机制可以节约系统资源呢，因为如果没有等待/通知机制，两个线程之间想要进行通信的话，只能用一个","为什么需要锁不是","为字符串开辟一个字符串常量池","为每个","为：","之后在调用getinstance就直接返回singleton就可以了","之后线程并不会停止，因为","之后通过一个","也可以指定锁对象为其他自定义的对象，注意：如果要进行同步的多个代码块，那么这些需要进行同步的多个同步代码块的锁必须是同一个对象，即synchron","也可以进入","也在作废方法的范围中。使用不当会导致如下两个问题：","也就是说","也就是说是用","也就是说，volatil","也就是说，对于共享数据，其读写必须是同步的，多个线程可以同时读取，但是只要有一个线程在执行写入操作，其他线程就不能再进行任何读写操作了，必须等待执行写入操作的线程执行完才行。(在这里我们先不考虑效率问题，只保证结果正确)","也就是说：synchron","也是需要锁的，如果线程无法再次获得锁，那么它将永远无法执行","了(就是在","了)，它就会一直卡在那，还不放开锁，导致其他线程无法访问公共同步对象。","了。","了，然后程序就卡住了……，不过如果在调用","互斥操作：写写，读写，写读","产生数据不同步问题","产生死锁","产生死锁1.7.1.","产生死锁的本质：两个线程在需要对方掌握的资源同时又不肯放开自己手中的资源，由此陷入的胶着状态","产生死锁的程序：","什么是交叉备份：就是创建","什么是等待/通知机制","什么是等待/通知机制1.2.","什么是追赶执行性：","介绍了优先级，有一个感觉类似于达到降低自己的优先级的方法：yield()。","仍然好好运行着呢，接下来我们把","从内存中取出","代码)","代码为：","代码块中，就会导致","代码块是异步的。","代码块的作用是一样的。","代码如下：","代码如下：线程调用这两个方法都是同步的。","以上的过程就是一个等待/通知机制，等待的线程在等待状态不会耗费系统资源，当需要它启动的时候其他的线程会通知它启动，这样也不会错过启动的时机。","以上这些方法都是","优先级具有随机性：优先级高只是抢","优先级的特性","优先级的特性1.7.2.","会出现阻塞。","会发现这个任务过期了，并立刻执行它，不过这会导致这个任务执行的时间和设定的不一样。","会导致怎样的异常呢？我们来看下面这个例子：","会抛出","会放开锁，sleep","会继续执行。","会被按照调用","会返回initial的结果","会遇到的问题：全部线程进入","会释放锁，sleep(long)","传入一个已经创建好的线程对象，这是因为","但是","作为锁，只要我们对两个","作为锁，而用其他对象，比如new","作用","使用","使用condition实现线程的顺序执行","使用condition实现线程的顺序执行2.","使用jps命令得到","使用一个主内存来保存变量当前值，而每个线程则有其独立的工作内存。线程访问变量的时候会将变量的值拷贝到自己的工作内存中，这样，当线程对自己工作内存中的变量进行操作之后，就造成了工作内存中的变量拷贝的值与主内存中的变量值不同。","使用原子类进行i++操作","使用原子类进行i++操作1.","使用等待/通知机制的程序","使用等待/通知机制的程序1.3.","使用饿汉模式，倒是没有线程安全问题，不够要是我们从头到尾都用不到","例如：文件","供给多个线程使用的话，极易出现日期转换错误的情况。","修改为","修改文件","修改这里：if","修饰之后：(修改文件","修饰的变量，为了获得最佳速度，允许线程保存共享成员变量的私有拷贝，而且只当线程进入或者离开同步代码块时才与共享成员变量的原始值对比，也就是说，java","修饰的部分的","修饰，然后在这个方法里面调用thread.currentthread.suspend();即可，不过有一些比较隐蔽的同步块，也可能会导致独占公共同步对象，使得程序卡住。例子如下：","假设","假设有","停止线程","停止线程1.5.1.","先把字符串日期转换成date","先搭建环境如下：","先说结论：synchron","公平锁与非公平锁","公平锁与非公平锁1.4.","公平锁：线程获取锁的顺序按照线程加锁的顺序分配，即先进先出(fifo)。","共享操作：读读","关键字","关键字加到","关键字可以用来修饰任意对象和方法，作用就是给它们加上锁，这样当多个线程要使用这个对象或调用这个方法时，要以排队的方式进行，也就是在同一时刻只能有一个线程拿到这把锁，其他线程在尝试拿到这把锁。","关键字可以解决变量在多个线程之间的可见性问题，它可以让多线程读取共享变量时可以获得该变量的最新值。","关键字实现线程间的互斥，使用","关键字，synchron","其操作的内容也有不同的选择，如：","内部有一个","内部类实现的单例对象，我们进行如下操作：","再把date日期转换成字符串","决定","准备工作","出现了异常\");","出现这个错误的主要原因是：在文件","出错原因：myservice.java","则是给对象上锁。","创建一个线程之后，再调用它的","创建字符串常量时，首先检查字符串常量池是否存在该字符串","判断处，两个","判断当前线程是否处在活动状态。","判断线程是否为停止状态","判断线程是否为停止状态1.5.2.","到管道流，另一个线程再将数据","到这里才结束wait，说明notify执行后不会立刻释放锁，而是等到其线程退出synchronized代码块后才释放锁","前唤醒它，就提前唤醒。","前必须先","前调用了","加","包裹着另一个线程对象","区别：","单例对象的时候有线程安全问题，当我们","单例模式与多线程","单例模式与多线程1.1.","单例模式的序列化和反序列化","单例模式的序列化和反序列化1.","单例模式：就是一个类，它只可以创建出来一个对象，它不允许我们自己创建对象，所以我们首先要把它的构造函数私有化：","单线程单例模式的实现","单线程单例模式的实现1.1.1.","即从当前时间开始，等待","即使我们这么写：","即可解决这个问题。","原子性：原子操作是不能分割的整体，没有其他线程能够中断或检查正在原子操作中的变量。","原子类可以在没有锁的情况下做到线程安全，不过原子类中的每个方法是一个原子操作，不过方法和方法之间并不是原子的。","原子类：atomic各种，例如：atomicinteger，atomicintegerarray，atomicboolean等。","又有什么区别呢？","取值时的线程安全问题(脏读)","取值时的线程安全问题(脏读)1.2.","取得线程的唯一标识。","取消任务执行","取消任务执行1.7.","受制于","变量，这样这个类中的每个对象都会共享这个变量，现在我们想要对这个共享进行划分，划分的原则是：同一个线程共享一个变量，不同的线程共享另一个变量。想要实现这样的功能要用到：threadloc","只是给","只是给线程打上了一个终止的","只有一个添加线程","只能保证数据的可见性，不能保证数据的原子性，而","只输出一行就永远卡住了，即使在await中，线程也不会被interrupt中断掉","可以保证数据的原子性，并可以间接保证数据的可见性","可以发现","可以发现，b","可以发现，b仍然好好运行着呢","可以在子线程中取得父线程在","可以将任一个对象作为锁，所以","可以指定锁对象为当前对象本身，即synchron","可以用一个","可以用来修饰方法和代码块。","可以看出，我们不仅可以创建一个全新的","可以达到与","可以选择创建公平锁","可以通过","可以通过如下代码证明：","同时子线程还可以通过覆盖","同步代码块使用用相同的字符串做锁，这两个","同步代码块就是同步的，这会比较容易带来问题，所以我们一般都不使用","同步代码块放在非同步方法中执行产生的脏读问题","同步代码块放在非同步方法中执行产生的脏读问题1.4.","同步代码块，只要证明这两部分是同步的，就可以说明","同步方法时呈同步效果","后会将状态标志设为","后就会进入阻塞队列，等待又其他线程调用了","后，我们用","启动线程：","启动还是要依靠thread类的","周期执行：schedule(timertask","和","和遇到","回来，这样可以实现不同线程间的通信而无需借用临时文件值类的东西，感觉像一个寄存信箱。","因为实例化一个线程组时，如果不指定所属的线程组，就自动归到当前线程对象所属的线程组","因为是对一个线程类的所有对象设置异常处理器，所以是线程类在调用","因为是给指定线程对象设置异常处理器，所以是线程对象在调用","因为这样可以提高程序的运行效率，如果在一个类中有很多个","在","在tha","在了","在用一些其他办法终止线程，所以我们要能判断一个线程是否是停止状态，即检查线程是否被","在设置完","在调用getinstance方法前先不创建对象","在这种情况下，如果我们运行如下结构的的代码程序将永远不会停止：","在这里运行stopmethod()并没有修改正在运行的tha中的service.runflag的值！","在重写的uncaughtexception方法中处理组内线程的中断操作，这样组内有一个线程跑出来异常，","在静态代码块中实例化对象，感觉和饿汉模式没啥区别","块中","块中进行一些回滚操作的，而用","块会捕捉到异常，threadb","块，并清楚停止状态值使之为","型参数","声明的方法或者代码块一定同步的，也就是是排队运行的。","处理就可以直接写入。","处理线程中的异常","处理线程中的异常1.2.","处理线程组中的异常","处理线程组中的异常1.","处的","处的condition.await();替换成condition.awaituninterruptibly();，得到如下结果：","处的lock.lock();替换成lock.lockinterruptibly();，可以得到如下运行结果：","处，当","处，是方法的关键)","处，调用了","多个condition实现部分线程通知","多个condition实现部分线程通知1.2.3.","多个线程执行synchron","多个进入if代码块的线程都会运行这一行，就产生了多个singleton对象","多生产一消费","多生产多消费","多线程单例模式的实现","多线程单例模式的实现1.3.1.","多线程访问","大体有如下","如下代码会抛出异常，因为它试图在从一个长度为","如下代码的作用是：run","如下面这段代码，我们启动了","如何产生死锁","如何产生死锁1.7.2.","如何创建公平锁与非公平锁：","如何检测死锁","如何检测死锁1.","如果","如果一个线程在同步块中","如果不加","如果不可锁重入的话，会造成死锁，造成死锁的原因如下：","如果在","如果我们在这里加一个延时，那么线程一进入到if代码块时，","如果等待的方法提前结束，join(long)","字符串常量池实现的基础：","字符串是不可变的，可以不用担心数据冲突进行共享","字符流和字节流的操作差不多，就是","字符流：pipedwriter&pipedread","字符流：pipedwriter&pipedreader1.7.","字节流：pipedoutputstream&pipedinputstream","字节流：pipedoutputstream&pipedinputstream1.6.2.","存在每个线程中的，当一个线程它要获得","存在该字符串，返回引用实例","它的作用是放弃当前的","守护线程","守护线程1.","安全停止线程的方法","安全停止线程的方法1.5.3.","完了单例对象之后就不涉及线程安全问题了，这时候多个线程来取对象是不会发生问题的，可是这个时候","定义：一种特殊的线程，当进程中不存在非守护线程了，守护线程自动销毁。","定时器timer","定时器timer1.1.","实例，线程对象可以注册在指定的","实战：交叉备份","实战：交叉备份1.","实现runnable接口(常用)","实现runnable接口(常用)1.3.","实现交替打印","实现多线程的基本方法","实现多线程的基本方法1.2.1.","实现机制是这样的：每个锁对象都又两个队列，一个是就绪队列，一个是阻塞队列。就绪队列中存储了将要获得锁的线程，阻塞队列中存储了被阻塞的线程。一个线程被唤醒后，才会进入就绪队列，等待","实现：","对于操作栈，也存在程序假死的问题，这里也可以通过修改notify()为notifyall()来解决问题。","对于没有","对于通过","对应object中的方法","对象","对象中","对象中synchron","对象中存储的值时，它会调用这个","对象作为","对象去","对象及变量的并发访问","对象启动它。","对象的","对象的一个最大的好处就是我们可以实现多路通知功能了，即我们可以创建多个","对象的同步方法呢？","对象的方法。","对象，也可给","对象，通过","对象，那么有以下三个结论：","对象：","将","将线程归属到线程组中，调用","就是说这个方法如果调用两次，第一次为","就永远不会结束，它也永远不会放开锁，程序的运行陷入死循环，导致死锁。","已发出通知","已经可以调用","常量池缓存的功能，这里我们先简单的介绍以下字符串常量池：","序列化前后对象的hashcode不变","序列化前后对象的hashcode改变了","应用：实现一个线程组中的一个线程出现了异常后组内线程全部停止","延迟加载：懒汉模式","延迟加载：懒汉模式1.2.","异常。","异常法","异常，不过该异常不需要显式捕捉。","异常，否则就算是打上了标记，不自己在程序中用","强制终止了线程，导致了用户名和密码的不一致，这种事务性问题是需要在","强大很多，它们之间有如下几点区别：","当jvm从内存中反序列化地组装一个新对象时，会自动调用这个方法返回我们的指定对象","当一个线程执行出现异常时，其所持有的锁会自动释放","当其他线程执行","当存在父子类继承关系时，子类是可以通过\"可重入锁\"调用父类的同步方法的","当我们把","影响是一样的。","得到的是","得到的根本就是不同的两个线程，thread.currentthread()","得到线程优先级：getpriorty()","得到运行结果如下：","循环，时刻监控另一个线程的动向，这样是十分耗费系统资源的。","必须是同一个对象，就是说基本上应该是成员变量而非局部变量，*锁不同的","恢复","想要了解","想要安全的停止一个线程，用","想要实现带初始值的","想要解决多线程不能保证单例的问题，使用同步技术肯定时第一个想到的，可是如果先这样给整个","懒汉模式不能保证单例的主要原因在这里：","懒汉模式与线程安全问题","懒汉模式与线程安全问题1.3.","成员变量：","我们主要采取的解决问题方式就是：借助","我们先实现一个","我们可以创建一个","我们可以在类中定义","我们知道","我们通过如下程序来验证一下：","我是在子线程后加的！\";","所以想要一个带初始值的","打上","执行任务时发现给定的时间已经过期了，会立即执行相和歌任务。","执行到时延时，list","执行完毕后继续执行。","执行时间，不过刚放弃就立刻又抢到了","批量停止组内线程","批量停止组内线程1.3.","把","把if用synchronized代码块包起来，因为这里只有一个list对象，用其做锁很合适","把单例对象放在静态内部类中","把真正的单例对象放在枚举类中","拥有锁重入的功能，即当一个线程得到一个对象锁后，此时这个线程也是可以调用该对象其他被","拾遗增补","按照如下顺序希求锁，两个线程在得到一个锁后都有相同时间的时延","挺像的，就是","换成","接口的抽象类，我们要新建","接口的，所以我们甚至可以将一个","操作。","操作值","操作栈","操作线程组的常用方法","操作线程组的常用方法1.2.","操作，如果为","操作，正确的做法是把","改成","效果和下一句也是一样的，","教程进行，不会出什么差错。","数据不同步","数据不同步1.7.","数据不同步的原因和","数据库中，两个线程的备份操作必须交叉进行。","数据库中，另外","文件","文件。","文件为：","新建线程组newgroup并把它加入main线程组，新建线程并加入newgroup","方法。","方法一样，也就是说在调用","方法上是给","方法中不能有","方法中断线程","方法中线程被中断的效果","方法中线程被中断的效果。因为","方法中编写我们要计划执行的任务，然后新建","方法了，因此","方法了，直接调用","方法交给其他线程调用。","方法会去这个线程中取得","方法使用的锁是","方法依旧是同步方法，同一时刻到来的线程仍需要排队执行，所以我们通过","方法内部就是用","方法内部是用","方法可以发现：当第一次使用","方法可以帮我们省去判断中断标记抛异常这些步骤。","方法和","方法实现的。","方法对父线程设置的值进行修改：","方法导致数据不同步的原因即可，把那的","方法就好，感觉上像是实现了线程本身与","方法差不多，都是会抛出inperruptedexception异常，感觉","方法已经返回，阻塞方法执行完毕","方法并没有结束，说明线程不会放开锁，可以执行","方法强制退出","方法或代码块中调用。如果调用它们时没有持有适当锁，会抛出illegalmonitorstateexception异常（是个","方法或同步代码块中调用","方法执行完之后自动退出","方法执行的内容的分离。","方法拿不到锁，因此无法执行。","方法改成同步的：","方法时，最终得到的值是","方法来获取这个唯一的实例化对象。","方法没有争抢到","方法的同步块中，它会一直拿着锁不释放，main","方法的影响很像，直接看","方法经过指定休眠时间结束","方法结束后就进入了销毁阶段，线程任务执行完毕。","方法而已，countoper","方法都加上锁：","方法里面，println","方法，get","方法，使其返回新的初始值即可。","方法，可将组内正在运行的线程批量停止。","方法，在方法返回前","方法，它会进入","方法，我们创建的单例对象的资源就浪费掉了，所以为了节省资源我们还是想要使用懒汉模式的，不过在多线程的情况下，懒汉模式是不能保证单例的。","方法，我们需要写一个","方法，正常在","方法，此时","方法，这时虽然能实现同步，但是由于线程阻塞的原因，运行效率大大降低，如果我们根据同步需求将其分成需要进行同步几部分，每一部分用一个锁，这样就不会有这么多的方法的运行都需要抢夺一个锁，大大提高运行效率。","方法：","方法：只要写一段代码，里面有一个同步方法，另一个方法中有一个","方法：将任务队列中的全部任务清空。","方法：将自身从任务队列中清除。","方法：新写一个","无追赶执行性：schedule()","无限期的等待另一个线程的操作，如调用了wait(),join()后","时执行任务。","时间片也是又可能的。","时间片时抢到的概率高而已，并不一定就执行的比优先级低的快。","时间，然后执行任务。","时，如果没有持有适当的锁，就会抛出","时，没有处于阻塞状态的线程，那么这个通知命令会被忽略，不会有什么影响。","是一个实现了","是一个非","是同步的，和","是同步的，它内部有一个同步锁，当","是异步的。","是最好的方法，不过调用了","是死的，countoper","是活的，而","是用来指定","是线程不安全的，想要保证线程安全，我们必须给每一个线程准备一个","是线程同步的轻量级实现，性能要好于","是这样的：","显然，synchron","普通同步方法","普通执行：schedule(timertask","普通的例子很好举，只要在一个方法前加上","暂停线程","暂停线程1.6.1.","有","有一个thread(runn","有两个remove线程","有两个线程(th1,","有两种使用方式：","有关lock的属性类","有关lock的属性类1.4.4.","有可能会导致数据不同步。","有如下","有如下两类执行任务的方式。","有带","有时会因为","有线程安全问题的代码：","有追赶执行性：scheduleatfixedrate()","有限期的等待另一个线程的操作，如sleep(time),wait(time),join(time)后","机制可以实现一种比较节约","机制，只给一个很小的部分设计成同步的，来解决这个问题：","条件。","来判断并抛异常，线程也是不会停的，只是有个标记而已，而","来自initialvalue()方法","来获得。","枚举中只有一个类型","标准使用示例","标准使用示例1.2.","根据当前时间获取date类的方法：","根本就没有","检查转换回来的字符串和原字符串是否相等，如果有转换错的就打印出来","概念","概念1.2.","模块：","正在等待某个监视器锁","死锁的产生方法：","比较标准的使用方法是：","毫秒内是否有线程对其进行了唤醒，如果超过这个时间则自动唤醒","没有线程通知b线程结束，所以程序不会停止，而是一直处于运行状态，因为b线程还在await中","注意事项","注意事项1.6.","注意：使用","注意：使用这种方法，组内的每个线程对象中的","注意：如果其他线程调用","注意：实例化一个线程组时，如果不指定所属的线程组，就自动归到当前线程对象所属的线程组。","测试","添加了10个元素","添加了1个元素","添加了2个元素","添加了3个元素","添加了4个元素","添加了5个元素","添加了6个元素","添加了7个元素","添加了8个元素","添加了9个元素","演示线程组的各种操作方法","然后在","然后添加一个存储这个对象本身的","然后进入","特别耗时导致在它后面执行的任务过期了，那么到它后面的任务执行时，这个","状态。修改如下：","状态下停止线程，会","状态可相互切换，线程进入","状态和","状态，使用","状态，即假死状态。","状态，在","状态，程序陷入假死状态。","状态，表示阻塞状态，线程进入","独占公共同步对象","独占公共同步对象1.6.2.","生产者/消费者模式实现","生产者/消费者模式实现1.6.","生产者/消费者模式是等待通知最经典的案例。有如下几种模式：","生产者和消费者操作的是一个","生产者和消费者操作的是一个变量，比如一个字符串。","用","用date","用long","用string做锁的坑","用string做锁的坑1.7.","用当前类的class类作为锁的同步代码块","用起来还是十分危险的，所以","由于这个特性，如果我们用","的","的。","的不同！！！","的主要作用是使变量在多个线程间可见，它强制这个变量从公共内存中取得变量的值，而不是从线程的私有数据栈中取得变量的值。","的作用，我们要先来介绍一下","的值","的值写道内存中","的内存机制原理图如下：","的内存机制，java","的内部实现原理就是","的内部实现原理：","的内部类","的单位","的单继承机制，并不是十分灵活。","的子类并在","的子类，然后覆盖它的","的子类，覆盖","的实现原理就好。","的意思为：易变的，不稳定的。","的执行，这些","的新类，通过观察","的方式解决问题。","的方法时，还是异步调用。","的时候不用将数据进行","的时间，如果没人唤醒它就自己唤醒，如果有线程在","的构造器：","的次数。","的源码如下：","的私有堆栈中的","的线程一直在","的线程是如何被其对应的","的线程的估计数。","的线程调用了","的结果，尤其是","的自带工具jps和jstack来检测死锁。步骤如下：","的返回值。","的长度仍为","的长度的","的长度，如果不为","的顺序执行，如果中间有一个","的顺序执行：(注意代码中的","直接在调用getinstance方法前就把这个对象创建出来","相同的效果。","真正需要同步执行就是这句！","示例：","示例：两个线程处于","示例：典型的守护线程是垃圾回收线程，当进程中没有非守护线程了，垃圾回收线程就没有存在的必要了，会自动销毁。","种删除元素。","种情况：","种构造函数，比较常用的有以下几种：","种终止正在运行的线程的方法：","程序调用了","立即加载：饿汉模式","立即加载：饿汉模式1.1.2.","第一次使用时map为nul","第一次调用getinstance时，singleton为空，这时new新对象","等待","等待/通知机制涉及的主要方法","等待/通知机制涉及的主要方法1.2.2.","等待/通知机制的实现","等待/通知机制的实现1.2.1.","等待一定时间，timeunit","等待的条件发生了变化的问题，这时我们要采用将判断当前","等待的线程是无视中断操作的，就是说不能通过中断然这个等待中的线程抛异常停止。","等待通知机制","等待通知机制1.1.","简单使用示例：","管道流（pipestream）是一种很特殊的流，可以用于在不同的线程之间传递数据，一个线程将数据","类。","类上锁，而加到非","类中加入这样一个方法：","类中有一个：","类中的","类中的一个内部枚举类","类主要负责日期转换与格式化，但是它是非线程安全的，如果只用一个","类也可以达到相同的效果，并且具有嗅探锁定，多路分支通知等扩展功能，使用起来也更为灵活。","类也是实现了","类内部有一个","类型的成员变量。","类来解决这个问题：","类的","类的作用就是设置计划任务，不过它是不能单独使用的，它只负责按照要求启动任务，我们需要把要执行的任务提供给它，负责提供任务的就是","类的子类：","类的方法，因为","类，timertask","类，这就用到了","类：可重入锁，jdk","线程","线程中的","线程中的异常处理","线程中的异常处理1.1.","线程优先级有继承的特性：子线程和父线程具有相同的优先级。","线程在等待某个通知","线程在等待的通知发起了通知给它","线程安全包括原子性和可见性两个方面。","线程实例化后还未执行start()方法","线程对象，thi","线程对象，thread","线程已经停止，准备退出","线程成功地获得了锁","线程提供了","线程是否在等待获取此锁。","线程状态转换示意图如下：","线程的","线程的优先级","线程的优先级1.7.1.","线程的执行，在它执行完之后再执行一下再结束。","线程的状态","线程的状态1.","线程的状态的表示方法放在","线程组","线程组1.1.","线程组中活动线程的数量：2","线程组中活动线程的数量：4","线程组的作用：批量管理线程或者线程组，线程组中既可以有线程对象也可以有线程组对象。","线程组的名称：main","线程被","线程被销毁时的状态","线程要等待","线程试图获得一个锁，但该锁正被其他线程持有","线程调用的阻塞","线程进入运行状态，可能真的在执行，也可能在抢cpu的时间片","线程都被唤醒向下执行，然而只添加了一个元素，两个线程却执行了两次","线程都进入了，并进入了","线程间通信","线程：在进程中独立运行的子任务，被调用的时机是随机的。","终止一个线程是一个复杂的问题，java","终止线程并不能给我们这样的机会，所以","结束之后，它们会再判断一次","结果：","继承thread类","继承thread类1.2.2.","而后程序运行停止，不再向下执行，陷入死锁，可以通过下一节的方法进行检测","能加到50000，说明保证了count+1的原子性","获取","获取线程组中活动线程的数量","获取线程组中线程组的数量","获取线程组的父线程组的名称","获取线组名称","获得写锁","获得读锁","被中断了。","被异常停止后，threada和、","要创建成守护线程：timer","要想保证是一个对象，我们要在","要比","要点方法：添加线程组或线程到线程组中","观察运行结果可知，thread2","解决方法：修改","解决方法：把","解决方法：把通知线程启动的notify()换成notifyall()，这样异类的线程一定会被启动。","解决第一次使用get()方法返回null问题","解决第一次使用get()方法返回null问题1.4.","计数类","计数类1.4.2.","计算","让“正在执行的线程”即","设置创建守护线程","设置多个","设置方法：thread.setdaemon(true);","设置线程优先级：setpriorty(int","该线程组会调用this.interrupt()，就中断了自己组内的所有线程","语句，如果有则不会执行","调度。","调度；反之，一个线程被","调用","调用了readresolve方法","调用阻塞式","资源后，他就会变成","资源的线程间的通信机制。","资源，将它让给其他任务去占用","赋值时的线程安全问题","赋值时的线程安全问题1.1.2.","转换成了","转换错误，把","输出：","过。","运行如上代码，运行结果如下：","运行时，实例创建的全局字符串常量池中有一个表，总是为池中每个唯一的字符串对象维护一个引用,这就意味着它们一直引用着字符串常量池中的对象，所以，在常量池中的这些字符串不会被垃圾收集器回收","运行结构：","运行结果如下：","运行结果：","返回为null，所以初始值为nul","返回代码段正在被哪个线程调用的信息。","返回的线程，休眠指定的毫秒数。","还有一个带参数的方法：join(long)，这个方法是等待传入的参数的毫秒数，如果计时过程中等待的方法执行完了，就接着往下执行，如果计时结束等待的方法还没有执行完，就不再继续等待，而是往下执行。","这三步是典型的非原子操作，在多线程的环境中运行很容易出现问题。","这两个方法，尤其","这两个问题的详细说明如下：","这个","这个时候生产出来就会被消费，set","这个错误出现的主要是因为","这些对象都是lock","这时singleton依旧为null，这个时候线程二也可以进入if代码块，","这是因为","这是因为我们通过","这样就会有多个线程进入if代码块","这样程序的运行效率会大打折扣，因为我们只有在","这种不同源自于","这里发出了通知","这里可以引申出一个问题：如何判断","这里有一个关于thread.currentthread().getname()和this.getname()结果的不同的问题，详细的例子和下面的","这里用一个厨师和服务员之间在菜品传递台上传递菜品的例子来说明什么是等待/通知机制。","进入mythread.java的catch块","进程：受操作系统管理的基本运行单元，可以理解成运行在内存中的","进行了两次","追赶执行性体现在任务给定的时间过期了的时候，有追赶执行性的任务会把从给定的时间到当前时间中漏执行的任务的全都补执行完成，再开始按周期执行，而无追赶执行性的任务只补执行一次的，就开始按周期执行。","递归与非递归取得组内对象","递归与非递归取得组内对象1.","递归的获取组内对象：","通知","通知一个再启动，不通知另一个，看程序是否会结束，即看看线程能不能分类通知是否启动。","通知一个等待的线程执行","通知到的呢？","通知所有等待的线程执行","通知过早","通知过早1.4.2.","通过datetools获取simpledateformat","通过代码演示如下：","通过只有一个类型的枚举类实现单例","通过管道进行线程间的通信","通过管道进行线程间的通信1.6.1.","通过这个变量进行标记，实现交替打印，要用volatile保证其可见性","那么","那行，程序会输出：\"main","那行，程序根本无法输出\"main","都实现了wait()和notify()方法，因为这些方法是通过synchron","释放写锁","释放读锁","重点在于观察","锁而取消不成功。(见ch5.cancel.timercanceltest.java)","问题出现的原因：我们这里通过notify()来通知其他线程启动，每次只启动一个线程，不过我们没法控制启动的是同类线程还是异类线程，也就是说，我们有一定概率一直处于生产者唤醒生产者，消费者唤醒消费者的状态，这样所有线程将一直处在","需要用到的类和一些方法技术","需要用到的类和一些方法技术1.2.","静态同步synchronized方法与synchronized(class)代码块","静态同步synchronized方法与synchronized(class)代码块1.6.","静态同步方法","非公平锁：线程随机获得锁，是一种锁抢占机制，不过可能会造成某些线程一直拿不到锁。","非线程安全问题是如何出现的","非线程安全问题是如何出现的1.1.1.","非递归的获取组内对象（即只取一层的）：","预计结果：threadb","首先我们先来看看没有非线程安全的程序运行起来会导致的问题。","，就表示相反的意思了，asynchronized：异步。"],"pipeline":["stopWordFilter","stemmer"]},"store":{"./":{"url":"./","title":"Introduction","keywords":"","body":"1. JavaMultiThread1. JavaMultiThread\nJava多线程编程\n"},"Ch1-Java多线程技能/":{"url":"Ch1-Java多线程技能/","title":"1. Java多线程技能","keywords":"","body":""},"Ch1-Java多线程技能/Java多线程概述.html":{"url":"Ch1-Java多线程技能/Java多线程概述.html","title":"1.1 Java多线程概述","keywords":"","body":"1. Java多线程概述1.1. 概念1.2. 实现多线程的基本方法1.2.1. 继承Thread类1.2.2. 实现Runnable接口(常用)1.3. synchronized关键字1.4. Thread中的4个方法1.4.1. currentThread()1.4.2. isAlive()1.4.3. sleep(毫秒数)1.4.4. getId()1.5. 停止线程1.5.1. 判断线程是否为停止状态1.5.2. 安全停止线程的方法1.5.3. stop暴力停止线程的弊端1.6. 暂停线程1.6.1. 独占公共同步对象1.6.2. 数据不同步1.7. 线程的优先级1.7.1. 优先级的特性1.7.2. yield方法1.8. 守护线程1. Java多线程概述\n1.1. 概念\n进程：受操作系统管理的基本运行单元，可以理解成运行在内存中的 exe 文件。\n线程：在进程中独立运行的子任务，被调用的时机是随机的。\n1.2. 实现多线程的基本方法\n1.2.1. 继承Thread类\n受制于 Java 的单继承机制，并不是十分灵活。\n实现：\npublic class MyThread extends Thread {\n    @Override\n    public void run() {\n        super.run();\n        System.out.println(\"MyThread\");\n    }\n}\n\n启动线程：\nMyThread myThread = new MyThread();\nmyThread.start();\n\n1.2.2. 实现Runnable接口(常用)\n实现：\npublic class MyThread implements Runnable {\n    @Override\n    public void run() {\n        super.run();\n        System.out.println(\"MyThread\");\n    }\n}\n\n启动线程：\nRunnable runnable = new MyThread();\nThread thread = new Thread(runnable); // 启动还是要依靠Thread类的\nthread.start();\n\n这是因为 Thread 有一个Thread(Runnable targer)构造函数的缘故，而且 Thread 类也是实现了 Runnable 接口的，所以我们甚至可以将一个 Thread 对象的 run() 方法交给其他线程调用。\n1.3. synchronized关键字\nsynchronized 关键字可以用来修饰任意对象和方法，作用就是给它们加上锁，这样当多个线程要使用这个对象或调用这个方法时，要以排队的方式进行，也就是在同一时刻只能有一个线程拿到这把锁，其他线程在尝试拿到这把锁。\n1.4. Thread中的4个方法\n1.4.1. currentThread()\n返回代码段正在被哪个线程调用的信息。\nThread 有 7 种构造函数，比较常用的有以下几种：\npublic Thread();\npublic Thread(String name);\npublic Thread(Runnable target);\npublic Thread(Runnable target, String name);\n\n可以看出，我们不仅可以创建一个全新的 Thread 对象，也可给 Thread 传入一个已经创建好的线程对象，这是因为 Thread 类中有一个：\nprivate Runnable target;\n\n我们可以创建一个 Thread 对象 thread，然后用 thread 包裹着另一个线程对象 target，这样我们就不用写 thread 的 run 方法了，直接调用 target 的 run 方法就好，感觉上像是实现了线程本身与 run 方法执行的内容的分离。\n这里有一个关于Thread.currentThread().getName()和this.getName()结果的不同的问题，详细的例子和下面的 isAlive() 中一起给出。\n1.4.2. isAlive()\n判断当前线程是否处在活动状态。\n示例：\nCountOperate.java\npublic class CountOperate extends Thread {\n    public CountOperate() {\n        System.out.println(\"CountOperate---begin\");\n        System.out.println(\"Thread.currentThread().getName()=\" + Thread.currentThread().getName());\n        System.out.println(\"Thread.currentThread().isAlive()=\" + Thread.currentThread().isAlive());\n        System.out.println(\"this.getName()=\" + this.getName());\n        System.out.println(\"this.isAlive()=\" + this.isAlive());\n        System.out.println(\"CountOperate---end\");\n        System.out.println(\"-------------------------------------------------\");\n    }\n\n    @Override\n    public void run() {\n        System.out.println(\"run---begin\");\n        System.out.println(\"Thread.currentThread().getName()=\" + Thread.currentThread().getName());\n        System.out.println(\"Thread.currentThread().isAlive()=\" + Thread.currentThread().isAlive());\n        System.out.println(\"this.getName()=\" + this.getName());\n        System.out.println(\"this.isAlive()=\" + this.isAlive());\n        System.out.println(\"run---end\");\n        System.out.println(\"-------------------------------------------------\");\n    }\n}\n\nCountOperateMain.java\npublic class CountOperateMain {\n    public static void main(String[] args) throws InterruptedException {\n        CountOperate countOperate = new CountOperate();\n        Thread t1 = new Thread(countOperate);\n        System.out.println(\"main is begin, t1.isAlive()=\" + t1.isAlive());\n        t1.setName(\"At1\");\n        t1.start();\n        System.out.println(\"main is ending, t1.isAlive()=\" + t1.isAlive());\n        System.out.println(\"-------------------------------------------------\");\n        Thread.sleep(5000);\n        System.out.println(\"main is ended, t1.isAlive()=\" + t1.isAlive());\n        System.out.println(\"-------------------------------------------------\");\n    }\n}\n\nOutput：\nCountOperate---begin\nThread.currentThread().getName()=main\nThread.currentThread().isAlive()=true\nthis.getName()=Thread-0\nthis.isAlive()=false\nCountOperate---end\n-------------------------------------------------\nmain is begin, t1.isAlive()=false\nmain is ending, t1.isAlive()=true\n-------------------------------------------------\nrun---begin\nThread.currentThread().getName()=At1  // Note 1\nThread.currentThread().isAlive()=true  // Note 2\nthis.getName()=Thread-0  // Note 3\nthis.isAlive()=false  // Note 4\nrun---end\n-------------------------------------------------\nmain is ended, t1.isAlive()=false\n-------------------------------------------------\n重点在于观察 Output 的结果，尤其是 Note 1 和 Note 3，Note 2 和 Note 4 的不同！！！\n这种不同源自于 Thread.currentThread() 和 this 得到的根本就是不同的两个线程，Thread.currentThread() 得到的是 thread 线程对象，this 得到的是 countOperate 线程对象，thread 是活的，而 countOperate 是死的，countOperate 只是给 thread 线程提供了 run 方法而已，countOperate 根本就没有 start() 过。\n1.4.3. sleep(毫秒数)\n让“正在执行的线程”即 Thread.currentThread() 返回的线程，休眠指定的毫秒数。\n1.4.4. getId()\n取得线程的唯一标识。\n1.5. 停止线程\n终止一个线程是一个复杂的问题，Java 中有以下 3 种终止正在运行的线程的方法：\n\nrun() 方法执行完之后自动退出\n用 stop() 方法强制退出 (强烈建议不使用，要作废了，还不安全)\n用 interrupt() 方法中断线程 (比较温和，不会强行终止一个正在运行的线程)\n\n1.5.1. 判断线程是否为停止状态\n想要安全的停止一个线程，用 interrupt() 是最好的方法，不过调用了 interrupt() 之后线程并不会停止，因为 interrupt() 只是给线程打上了一个终止的 tag，我们要在线程中不时检查它是不是已经被打上 tag，如果打上了 tag 在用一些其他办法终止线程，所以我们要能判断一个线程是否是停止状态，即检查线程是否被 interrupt() 打上 tag，我们有以下两种方法可以进行检测：\n\nthis.interrupted()：测试当前线程是否已经是中断状态，执行后将状态标志清除为 false，是 static 的。\n就是说这个方法如果调用两次，第一次为 true 后会将状态标志设为 false，第二次调用就为 false 了。\n\n\nthis.isInterrupted()：测试当前线程是否已经是中断状态，执行后不状态清除状态标志，不是 static 的。\n\n1.5.2. 安全停止线程的方法\n异常法\nMyThread.java\npublic class MyThread extends Thread {\n    @Override\n    public void run() {\n        super.run();\n        try {\n            for (int i = 0; i \nMyThreadMain.java\npublic class MyThreadMain {\n    public static void main(String[] args) {\n        try {\n            MyThread thread = new MyThread();\n            thread.start();\n            thread.sleep(2000);\n            thread.interrupt();\n        } catch (InterruptedException e) {\n            System.out.println(\"main catch\");\n        }\n        System.out.println(\"main end\");\n    }\n}\n\nOutput：\n...\ni=104430\ni=104431\ni=104432\nmain end\n线程已经停止，准备退出\n进入MyThread.java的catch块\nsleep中停止\n如果在 sleep 状态下停止线程，会 catch InterruptedException 然后进入 catch 块，并清楚停止状态值使之为 false。\nMyThread.java\npublic class MyThread extends Thread {\n    @Override\n    public void run() {\n        super.run();\n        try {\n            for (int i = 0; i \nMyThreadMain.java\npublic class MyThreadMain {\n    public static void main(String[] args) {\n        try {\n            MyThread thread = new MyThread();\n            thread.start();\n            thread.sleep(2000);\n            thread.interrupt();\n        } catch (InterruptedException e) {\n            System.out.println(\"main catch\");\n        }\n        System.out.println(\"main end\");\n    }\n}\n\nOutput：\n...\ni=104430\ni=104431\ni=104432\nmain end\n线程已经停止，准备退出\n进入MyThread.java的catch块\n1.5.3. stop暴力停止线程的弊端\n调用 stop() 会抛出 java.lang.ThreadDeath 异常，不过该异常不需要显式捕捉。\n使用 stop() 会导致怎样的异常呢？我们来看下面这个例子：\nSynchronizedObject.java\npublic class SynchronizedObject {\n    private String username = \"a\";\n    private String password = \"aa\";\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    synchronized public void printString(String username, String password) {\n        try {\n            this.username = username;\n            Thread.sleep(100000);\n            this.password = password;\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\nSynchronizedObjectMain.java\npublic class SynchronizedObjectMain {\n    public static void main(String[] args) throws InterruptedException {\n        SynchronizedObject object = new SynchronizedObject();\n        Thread thread = new Thread() {\n            @Override\n            public void run() {\n                object.printString(\"b\", \"bb\");\n            }\n        };\n        thread.start();\n        Thread.sleep(500);\n        thread.stop();\n        System.out.println(object.getUsername() + \" \" + object.getPassword());\n    }\n}\n\nOutput：\nb aa\n在设置完 username 后，我们用 stop() 强制终止了线程，导致了用户名和密码的不一致，这种事务性问题是需要在 catch 块中进行一些回滚操作的，而用 stop() 终止线程并不能给我们这样的机会，所以 stop() 有可能会导致数据不同步。\n1.6. 暂停线程\n\nsuspend()：暂停线程\nresume()：恢复线程\n\n这两个方法，尤其 suspend() 用起来还是十分危险的，所以 suspend() 也在作废方法的范围中。使用不当会导致如下两个问题：\n\n独占公共同步对象\n数据不同步\n\n这两个问题的详细说明如下：\n1.6.1. 独占公共同步对象\n如果一个线程在同步块中 suspend 了(就是在 synchronized 块中 suspend 了)，它就会一直卡在那，还不放开锁，导致其他线程无法访问公共同步对象。\n普通的例子很好举，只要在一个方法前加上 synchronized 修饰，然后在这个方法里面调用Thread.currentThread.suspend();即可，不过有一些比较隐蔽的同步块，也可能会导致独占公共同步对象，使得程序卡住。例子如下：\nPrintSuspendThread.java\npublic class PrintSuspendThread extends Thread {\n    private long i = 0;\n\n    @Override\n    public void run() {\n        while (true) {\n            i++\n            System.out.println(i);  // Note 1\n        }\n    }\n}\n\nPrintSuspendThreadMain.java\npublic class PrintSuspendThreadMain {\n    public static void main(String[] args) throws InterruptedException {\n        PrintSuspendThread printSuspendThread = new PrintSuspendThread();\n        printSuspendThread.start();\n        Thread.sleep(1000);\n        printSuspendThread.suspend();\n        System.out.println(\"main end\");\n    }\n}\n\n如果不加 Note 1 那行，程序会输出：\"main end\"，然后卡住，如果加了 Note 1 那行，程序根本无法输出\"main end\"就会被卡住。这是为什么呢？因为：程序被停在了 println 方法里面，println 的源码如下：\npublic void println(int x) {\n    synchronized (this) {\n        print(x);\n        newLine();\n    }\n}\n\n也就是说 println 是同步的，它内部有一个同步锁，当 printSuspendThread 线程被 suspend 在了 println 方法的同步块中，它会一直拿着锁不释放，main 线程中的 println 方法拿不到锁，因此无法执行。\n1.6.2. 数据不同步\n数据不同步的原因和 stop() 方法的影响很像，直接看 stop() 方法导致数据不同步的原因即可，把那的 stop() 换成 suspend() 影响是一样的。\n1.7. 线程的优先级\n1.7.1. 优先级的特性\n设置线程优先级：setPriorty(int newPriorty)，可以设置为 1~10，如果不在这个范围会抛出 IllegalArgumentException 异常。\n得到线程优先级：getPriorty()\n三个 Thread 中预设的优先级等级：\npublic final static int MIN_PRIORTY = 1;\npublic final static int NORM_PRIORTY = 5;\npublic final static int MAX_PRIORTY = 10;\n\n线程优先级有继承的特性：子线程和父线程具有相同的优先级。\n优先级具有随机性：优先级高只是抢 CPU 时间片时抢到的概率高而已，并不一定就执行的比优先级低的快。\n1.7.2. yield方法\n介绍了优先级，有一个感觉类似于达到降低自己的优先级的方法：yield()。\n它的作用是放弃当前的 CPU 资源，将它让给其他任务去占用 CPU 执行时间，不过刚放弃就立刻又抢到了 CPU 时间片也是又可能的。\n1.8. 守护线程\n定义：一种特殊的线程，当进程中不存在非守护线程了，守护线程自动销毁。\n示例：典型的守护线程是垃圾回收线程，当进程中没有非守护线程了，垃圾回收线程就没有存在的必要了，会自动销毁。\n设置方法：thread.setDaemon(true);\n"},"Ch2-对象及变量的并发访问/":{"url":"Ch2-对象及变量的并发访问/","title":"2. 对象及变量的并发访问","keywords":"","body":""},"Ch2-对象及变量的并发访问/01-synchronized同步方法.html":{"url":"Ch2-对象及变量的并发访问/01-synchronized同步方法.html","title":"2.1. synchronized同步方法","keywords":"","body":"1. synchronized同步1.1. 非线程安全问题是如何出现的1.1.1. 赋值时的线程安全问题1.1.2. 取值时的线程安全问题(脏读)1.2. synchronized关键字1.2.1. synchronized的特性1.2.2. synchronized使用方式1.3. 同步代码块放在非同步方法中执行产生的脏读问题1.4. synchronized (非this对象)的三个结论1.5. 静态同步synchronized方法与synchronized(class)代码块1.6. 用String做锁的坑1.7. 产生死锁1.7.1. 如何产生死锁1.7.2. 如何检测死锁1. synchronized同步\n\"非线程安全\"是我们要考虑的一个问题，\"非线程安全\"可能会导致数据的脏读，使得程序运行产生错误的结果。\n\"非线程安全\"问题一般存在于\"实例变量\"中，因为实例变量是有可能被多个线程所共享的，而方法内部的私有变量对于每个线程都是有一个副本的，因此不存在\"非线程安全\"问题，也就是说只有共享资源的读写问题才需要我们通过\"同步化\"去解决线程安全问题。\n线程安全包括原子性和可见性两个方面。\nsynchronized：同步，加个前缀 a-，就表示相反的意思了，asynchronized：异步。\n首先我们先来看看没有非线程安全的程序运行起来会导致的问题。\n1.1. 非线程安全问题是如何出现的\n先搭建环境如下：\n文件 PublicVar.java 代码如下：\npublic class PublicVar {\n    public String username = \"C\";\n    public String password = \"CC\";\n\n    public void setValue(String username, String password) {\n        try {\n            if (username.equals(\"A\")) {\n                this.username = username;\n                Thread.sleep(10000); // 在tha sleep时，thb改变了username的值，出现了数据不同步的问题\n                this.password = password;\n            } else {\n                this.username = username;\n                this.password = password;\n            }\n            System.out.println(\"Thread: \" + Thread.currentThread().getName() + \" setValue method\" +\n                    \" username=\" + this.username + \" password=\" + this.password);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void getValue() {\n        System.out.println(\"Thread: \" + Thread.currentThread().getName() + \" getValue method\" +\n                \" username=\" + username + \" password=\" + password);\n    }\n}\n\n文件 ThreadA.java 代码如下：\npublic class ThreadA extends Thread {\n    private PublicVar publicVar;\n\n    public ThreadA(PublicVar publicVar) {\n        super();\n        this.publicVar = publicVar;\n    }\n\n    @Override\n    public void run() {\n        super.run();\n        publicVar.setValue(\"A\", \"AA\");\n    }\n}\n\n文件 ThreadB.java 代码如下：\npublic class ThreadB extends Thread {\n    private PublicVar publicVar;\n\n    public ThreadB(PublicVar publicVar) {\n        super();\n        this.publicVar = publicVar;\n    }\n\n    @Override\n    public void run() {\n        super.run();\n        publicVar.setValue(\"B\", \"BB\");\n    }\n}\n\n文件 Main.java 代码如下：\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        PublicVar publicVar = new PublicVar();\n        ThreadA tha = new ThreadA(publicVar);\n        tha.setName(\"Thread A\");\n        tha.start();\n        Thread.sleep(5000);\n        ThreadB thb = new ThreadB(publicVar);\n        thb.setName(\"Thread B\");\n        thb.start();\n    }\n}\n\n1.1.1. 赋值时的线程安全问题\n运行如上代码，运行结果如下：\nThread: Thread B setValue method username=B password=BB\nThread: Thread A setValue method username=B password=AA \\\\ 产生数据不同步问题\n解决方法：把 setValue 方法改成同步的：\nsynchronized public void setValue(String username, String password) {...}\n\n1.1.2. 取值时的线程安全问题(脏读)\n修改文件 ThreadB.java 为：\npublic class ThreadB extends Thread {\n    private PublicVar publicVar;\n\n    public ThreadB(PublicVar publicVar) {\n        super();\n        this.publicVar = publicVar;\n    }\n\n    @Override\n    public void run() {\n        super.run();\n        publicVar.getValue();\n    }\n}\n\n得到运行结果如下：\nThread: Thread B getValue method username=A password=CC\nThread: Thread A setValue method username=A password=AA\n解决方法：把 getValue 方法改成同步的：\nsynchronized public void getValue() {...}\n\n也就是说，对于共享数据，其读写必须是同步的，多个线程可以同时读取，但是只要有一个线程在执行写入操作，其他线程就不能再进行任何读写操作了，必须等待执行写入操作的线程执行完才行。(在这里我们先不考虑效率问题，只保证结果正确)\n我们主要采取的解决问题方式就是：借助 synchronized 关键字，synchronized 声明的方法或者代码块一定同步的，也就是是排队运行的。\n1.2. synchronized关键字\n1.2.1. synchronized的特性\n\nsynchronized 拥有锁重入的功能，即当一个线程得到一个对象锁后，此时这个线程也是可以调用该对象其他被 synchronized 修饰的部分的\n\n如果不可锁重入的话，会造成死锁，造成死锁的原因如下：\n  public class Service {\n      synchronized public void service1() {\n          System.out.println(\"service1\");\n          service2(); // Note1\n      }\n\n      synchronized public void service2() {\n          System.out.println(\"service2\");\n\n      }\n  }\n\n  在 Note1 处，调用了 service2 方法，此时 service1 方法并没有结束，说明线程不会放开锁，可以执行 service2 也是需要锁的，如果线程无法再次获得锁，那么它将永远无法执行 service2，这样 service1 就永远不会结束，它也永远不会放开锁，程序的运行陷入死循环，导致死锁。\n\n当存在父子类继承关系时，子类是可以通过\"可重入锁\"调用父类的同步方法的\n\n\n\n当一个线程执行出现异常时，其所持有的锁会自动释放\n\n\n1.2.2. synchronized使用方式\nsynchronized 有两种使用方式：\n\nsynchronized修饰在方法前面，此时锁对象为当前对象本身，也就是this\n  synchronized public void getValue() {...}\n\n\nsynchronized (锁对象)修饰在代码块前面\n\n可以指定锁对象为当前对象本身，即synchronized (this)\n也可以指定锁对象为其他自定义的对象，注意：如果要进行同步的多个代码块，那么这些需要进行同步的多个同步代码块的锁必须是同一个对象，即synchronized (非this对象)\n\n\n\n\n这里可以引申出一个问题：如何判断 synchronized 方法使用的锁是 this？\n方法：只要写一段代码，里面有一个同步方法，另一个方法中有一个 synchronized (this) 同步代码块，只要证明这两部分是同步的，就可以说明 synchronized 方法使用的锁是 this。\n\n为什么需要锁不是 this 对象的同步方法呢？\n因为这样可以提高程序的运行效率，如果在一个类中有很多个 synchronized 方法，这时虽然能实现同步，但是由于线程阻塞的原因，运行效率大大降低，如果我们根据同步需求将其分成需要进行同步几部分，每一部分用一个锁，这样就不会有这么多的方法的运行都需要抢夺一个锁，大大提高运行效率。\n不过要注意！！！使用synchronized (非 this 对象 x)进行同步时，x 必须是同一个对象，就是说基本上应该是成员变量而非局部变量，*锁不同的 synchronized 代码块是异步的。\n1.3. 同步代码块放在非同步方法中执行产生的脏读问题\n有线程安全问题的代码：\n文件 MyOneList.java 代码如下：\npublic class MyOneList {\n    private List list = new ArrayList<>();\n\n    synchronized public void add(String data) {\n        list.add(data);\n    }\n\n    synchronized int getSize() {\n        return list.size();\n    }\n}\n\n文件 MyService.java 代码如下：\npublic class MyService {\n    public void addServiceMethod(MyOneList list, String data) {\n        try {\n            synchronized (list) {\n                if (list.getSize() \n文件 MyThread1.java 代码如下：\npublic class MyThread1 extends Thread {\n    private MyOneList list;\n\n    public MyThread1(MyOneList list) {\n        super();\n        this.list = list;\n    }\n\n    @Override\n    public void run() {\n        MyService service = new MyService();\n        service.addServiceMethod(list, \"thread1\");\n    }\n}\n\n文件 MyThread2.java 代码如下：\npublic class MyThread2 extends Thread {\n    private MyOneList list;\n\n    public MyThread2(MyOneList list) {\n        super();\n        this.list = list;\n    }\n\n    @Override\n    public void run() {\n        MyService service = new MyService();\n        service.addServiceMethod(list, \"thread2\");\n    }\n}\n\n文件 Main.java 代码如下：\npublic class Main {\n    public static void main(String[] args) throws InterruptedException {\n        MyOneList list = new MyOneList();\n        MyThread1 thread1 = new MyThread1(list);\n        thread1.setName(\"thread1\");\n        thread1.start();\n        MyThread2 thread2 = new MyThread2(list);\n        thread2.setName(\"thread2\");\n        thread2.start();\n        Thread.sleep(6000);\n        System.out.println(\"listSize=\" + list.getSize());\n    }\n}\n\n运行结果如下：\nlistSize=2\n出错原因：MyService.java Note1 处，当 thread1 执行到时延时，list 的长度仍为 0，此时 thread2 已经可以调用 getSize() 方法了，因此 thread2 也可以进入 if 代码块中，就会导致 list 进行了两次 add 操作。\n解决方法：修改 MyService.java 文件为：\npublic class MyService {\n    public void addServiceMethod(MyOneList list, String data) {\n        try {\n            synchronized (list) { // 把if用synchronized代码块包起来，因为这里只有一个list对象，用其做锁很合适\n                if (list.getSize() \n1.4. synchronized (非this对象)的三个结论\n假设 x 是一个非 this 对象，那么有以下三个结论：\n\n多个线程执行synchronized (x) {}同步代码块时呈同步效果\n当其他线程执行 x 对象中 synchronized 同步方法时呈同步效果\n当其他线程执行 x 对象中synchronized (this) {}同步代码块时呈同步效果\n\n注意：如果其他线程调用 x 不加 synchronized 的方法时，还是异步调用。\n1.5. 静态同步synchronized方法与synchronized(class)代码块\n先说结论：synchronized 关键字加到 static 方法上是给 Class 类上锁，而加到非 static 则是给对象上锁。\n也就是说：synchronized 关键字加到 static 方法和 synchronized (class) 代码块的作用是一样的。\n可以通过如下代码证明：\n文件 Service.java 代码如下：\npublic class Service {\n    synchronized public void method1() { // 普通同步方法\n        System.out.println(Thread.currentThread().getName() + \" begin.\");\n        System.out.println(Thread.currentThread().getName() + \" end.\");\n    }\n\n    synchronized public static void method2() { // 静态同步方法\n        try {\n            System.out.println(Thread.currentThread().getName() + \" begin.\");\n            Thread.sleep(3000);\n            System.out.println(Thread.currentThread().getName() + \" end.\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void method3() {\n        synchronized (Service.class) { // 用当前类的class类作为锁的同步代码块\n            System.out.println(Thread.currentThread().getName() + \" begin.\");\n            System.out.println(Thread.currentThread().getName() + \" end.\");\n        }\n    }\n}\n\n文件 Run.java 代码如下：\npublic class Run {\n    public static void main(String[] args) {\n        Service service = new Service();\n        Thread thread2 = new Thread() {\n            @Override\n            public void run() {\n                service.method2();\n            }\n        };\n        thread2.setName(\"thread2\");\n        thread2.start();\n\n        Thread thread1 = new Thread() {\n            @Override\n            public void run() {\n                service.method1();\n            }\n        };\n        thread1.setName(\"thread1\");\n        thread1.start();\n\n        Thread thread3 = new Thread() {\n            @Override\n            public void run() {\n                service.method3();\n            }\n        };\n        thread3.setName(\"thread3\");\n        thread3.start();\n    }\n}\n\n运行结果：\nthread2 begin.\nthread1 begin.\nthread1 end.\nthread2 end.\nthread3 begin.\nthread3 end.\n观察运行结果可知，thread2 和 thread3 是同步的，和 thread1 是异步的。\n1.6. 用String做锁的坑\n我们知道 JVM 中具有 String 常量池缓存的功能，这里我们先简单的介绍以下字符串常量池：\n\nJVM 为了提高性能减小内存开销，在实例化字符串常量的时候进行了如下优化：\n\n为字符串开辟一个字符串常量池\n创建字符串常量时，首先检查字符串常量池是否存在该字符串\n存在该字符串，返回引用实例\n不存在，实例化该字符串并放入池中\n\n\n\n字符串常量池实现的基础：\n\n字符串是不可变的，可以不用担心数据冲突进行共享\n运行时，实例创建的全局字符串常量池中有一个表，总是为池中每个唯一的字符串对象维护一个引用,这就意味着它们一直引用着字符串常量池中的对象，所以，在常量池中的这些字符串不会被垃圾收集器回收 \n\n\n由于这个特性，如果我们用 String 作为锁，只要我们对两个 synchronized 同步代码块使用用相同的字符串做锁，这两个 synchronized 同步代码块就是同步的，这会比较容易带来问题，所以我们一般都不使用 String 作为锁，而用其他对象，比如new Object()，同时要注意：只要对象不变，既使该对象的属性改变了，结果还是同步的，比如我们使用一个User user作为锁，即使我们改变了user.username的值，结果仍是同步的。\n1.7. 产生死锁\n1.7.1. 如何产生死锁\n死锁的产生方法：\n\n有两个线程(th1, th2)，两个锁(lock1, lock2)\nth1 和 th2 按照如下顺序希求锁，两个线程在得到一个锁后都有相同时间的时延\nth1：lock1->lock2\nth2：lock2->lock1\n\n\n\n产生死锁的本质：两个线程在需要对方掌握的资源同时又不肯放开自己手中的资源，由此陷入的胶着状态\n产生死锁的程序：\n文件 DeadLock.java 代码如下：\npublic class DeadLock implements Runnable {\n    private String username;\n    private Object lock1 = new Object();\n    private Object lock2 = new Object();\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    @Override\n    public void run() {\n        if (username.equals(\"a\")) {\n            synchronized (lock1) {\n                try {\n                    System.out.println(\"username=\" + username);\n                    Thread.sleep(2000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                synchronized (lock2) {\n                    System.out.println(username + \": lock1->lock2\");\n                }\n            }\n        }\n        if (username.equals(\"b\")) {\n            synchronized (lock2) {\n                try {\n                    System.out.println(\"username=\" + username);\n                    Thread.sleep(2000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                synchronized (lock1) {\n                    System.out.println(username + \": lock2->lock1\");\n                }\n            }\n        }\n    }\n}\n\n文件 Run.java 代码如下：\npublic class Run {\n    public static void main(String[] args) throws InterruptedException {\n        DeadLock deadLock = new DeadLock();\n        Thread th1 = new Thread(deadLock);\n        deadLock.setUsername(\"a\");\n        th1.start();\n        Thread.sleep(100);\n        Thread th2 = new Thread(deadLock);\n        deadLock.setUsername(\"b\");\n        th2.start();\n    }\n}\n\n结果：\nusername=a\nusername=b\n// 而后程序运行停止，不再向下执行，陷入死锁，可以通过下一节的方法进行检测\n1.7.2. 如何检测死锁\n可以通过 JDK 的自带工具jps和jstack来检测死锁。步骤如下：\n\n使用jps命令得到 Run 线程的 id\n  C:\\Users\\Bean\\IdeaProjects\\LearnSpring>jps\n  13428 Launcher\n  14852 Run\n  16868\n  2664 Jps\n\n\njstack -l [id值]，查看结果\n  C:\\Users\\Bean\\IdeaProjects\\LearnSpring>jstack -l 14852\n  ...\n  Java stack information for the threads listed above:\n  ===================================================\n  \"Thread-1\":\n          at ch2.deadlock.DeadLock.run(DeadLock.java:36)\n          - waiting to lock  (a java.lang.Object)\n          - locked  (a java.lang.Object)\n          at java.lang.Thread.run(Thread.java:748)\n  \"Thread-0\":\n          at ch2.deadlock.DeadLock.run(DeadLock.java:23)\n          - waiting to lock  (a java.lang.Object)\n          - locked  (a java.lang.Object)\n          at java.lang.Thread.run(Thread.java:748)\n\n  Found 1 deadlock.\n\n\n"},"Ch2-对象及变量的并发访问/02-volatile关键字.html":{"url":"Ch2-对象及变量的并发访问/02-volatile关键字.html","title":"2.2. volatile关键字","keywords":"","body":"1. volatile关键字1.1. volatile关键字介绍1.2. volatile和synchronized的对比1.3. synchronized的可见性功能1.4. i++的非原子性1.5. 使用原子类进行i++操作1. volatile关键字\n1.1. volatile关键字介绍\nvolatile 的意思为：易变的，不稳定的。\n关键字 volatile 的主要作用是使变量在多个线程间可见，它强制这个变量从公共内存中取得变量的值，而不是从线程的私有数据栈中取得变量的值。\n想要了解 volatile 的作用，我们要先来介绍一下 Java 的内存机制，Java 的内存机制原理图如下：\n\n对于没有 volatile 修饰的变量，为了获得最佳速度，允许线程保存共享成员变量的私有拷贝，而且只当线程进入或者离开同步代码块时才与共享成员变量的原始值对比，也就是说，Java 使用一个主内存来保存变量当前值，而每个线程则有其独立的工作内存。线程访问变量的时候会将变量的值拷贝到自己的工作内存中，这样，当线程对自己工作内存中的变量进行操作之后，就造成了工作内存中的变量拷贝的值与主内存中的变量值不同。 \n在这种情况下，如果我们运行如下结构的的代码程序将永远不会停止：\n文件 Service.java 代码如下：\npublic class Service {\n    private boolean runFlag = true;\n\n    public boolean isRunFlag() {\n        return runFlag;\n    }\n\n    public void setRunFlag(boolean runFlag) {\n        this.runFlag = runFlag;\n    }\n\n    public void runMethod() {\n        while (runFlag) {\n        }\n        System.out.println(\"停止成功\");\n    }\n\n    public void stopMethod() {\n        runFlag = false;\n    }\n}\n\n文件 ThreadA.java 代码如下：\npublic class ThreadA implements Runnable {\n    private Service service;\n\n    public ThreadA(Service service) {\n        super();\n        this.service = service;\n    }\n\n    @Override\n    public void run() {\n        service.runMethod();\n    }\n}\n\n文件 Run.java 代码如下：\npublic class Run {\n    public static void main(String[] args) throws InterruptedException {\n        Service service = new Service();\n        ThreadA tha = new ThreadA(service);\n        new Thread(tha).start();\n        Thread.sleep(1000);\n        service.stopMethod(); // 在这里运行stopMethod()并没有修改正在运行的tha中的service.runFlag的值！\n        System.out.println(\"已经发起停止命令\");\n    }\n}\n\n这是因为我们通过 Run.java 中的service.stopMethod();并没有修改正在运行的 tha 的私有堆栈中的 service.runFlag，而这个问题也正是由于公共堆栈和私有堆栈中的值不同步造成的。\n当我们把 service.runFlag 用 volatile 修饰之后：(修改文件 Service.java 代码)\nprivate boolean runFlag = true; --> volatile private boolean runFlag = true;\n\n即可解决这个问题。\n也就是说，volatile 关键字可以解决变量在多个线程之间的可见性问题，它可以让多线程读取共享变量时可以获得该变量的最新值。\n1.2. volatile和synchronized的对比\n显然，synchronized 要比 volatile 强大很多，它们之间有如下几点区别：\n\nvolatile 是线程同步的轻量级实现，性能要好于 synchronized，但只能用来修饰变量，而 synchronized 可以用来修饰方法和代码块。\nvolatile 只能保证数据的可见性，不能保证数据的原子性，而 synchronized 可以保证数据的原子性，并可以间接保证数据的可见性 (因为它会将私有内存和公共内存中的数据做同步)。\n多线程访问 volatile 不会发生阻塞，而 synchronized 会出现阻塞。\n\n\n原子性：原子操作是不能分割的整体，没有其他线程能够中断或检查正在原子操作中的变量。\n\n1.3. synchronized的可见性功能\n修改文件 Service.java 代码如下：\npublic class Service {\n    private boolean runFlag = true; // 不用volatile修饰\n\n    public boolean isRunFlag() {\n        return runFlag;\n    }\n\n    public void setRunFlag(boolean runFlag) {\n        this.runFlag = runFlag;\n    }\n\n    public void runMethod() {\n     /* -------------------------------- */\n        String anyString = new String();\n        while (runFlag) {\n            synchronized (anyString) {\n            }\n        }\n     /* -------------------------------- */\n        System.out.println(\"停止成功\");\n    }\n\n    public void stopMethod() {\n        runFlag = false;\n    }\n}\n\n可以达到与 volatile 相同的效果。\n1.4. i++的非原子性\ni++，就是 i = i + 1，这个操作虽然只有一行，不过是一个典型的非原子操作，它的操作步骤分解如下：\n\n从内存中取出 i 的值 (load)\n计算 i 加 1 的值 (use)\n将 i 的值写道内存中 (assign赋值)\n\n这三步是典型的非原子操作，在多线程的环境中运行很容易出现问题。\n1.5. 使用原子类进行i++操作\n原子类：Atomic各种，例如：AtomicInteger，AtomicIntegerArray，AtomicBoolean等。\n原子类可以在没有锁的情况下做到线程安全，不过原子类中的每个方法是一个原子操作，不过方法和方法之间并不是原子的。\n示例：\n文件 AddCountThread.java 代码如下：\npublic class AddCountThread implements Runnable {\n    private AtomicInteger count = new AtomicInteger(0);\n\n    @Override\n    public void run() {\n        for (int i = 0; i \n文件 Run.java 代码如下：\npublic class Run {\n    public static void main(String[] args) {\n        AddCountThread countThread = new AddCountThread();\n        for (int i = 0; i \n输出：\n...\n49997\n49998\n49999\n50000 // 能加到50000，说明保证了count+1的原子性\n"},"Ch3-线程间通信/":{"url":"Ch3-线程间通信/","title":"3. 线程间通信","keywords":"","body":""},"Ch3-线程间通信/01-等待通知机制.html":{"url":"Ch3-线程间通信/01-等待通知机制.html","title":"3.1. 等待通知机制","keywords":"","body":"1. 等待通知机制1.1. 什么是等待/通知机制1.2. 等待/通知机制的实现1.2.1. 等待/通知机制涉及的主要方法1.2.2. Java的线程状态转换说明1.2.3. 使用等待/通知机制的程序1.3. inperrupt方法遇到wait1.4. wait/notify机制导致的程序逻辑混乱1.4.1. 通知过早1.4.2. wait()等待的条件发生了变化1.5. 生产者/消费者模式实现1.6. 通过管道进行线程间的通信1.6.1. 字节流：PipedOutputStream&PipedInputStream1.6.2. 字符流：PipedWriter&PipedReader1.7. 实战：交叉备份1. 等待通知机制\nwait (等待) / notify  (通知) 机制可以实现一种比较节约 CPU 资源的线程间的通信机制。\n为什么说等待/通知机制可以节约系统资源呢，因为如果没有等待/通知机制，两个线程之间想要进行通信的话，只能用一个 while 循环，时刻监控另一个线程的动向，这样是十分耗费系统资源的。\n1.1. 什么是等待/通知机制\n这里用一个厨师和服务员之间在菜品传递台上传递菜品的例子来说明什么是等待/通知机制。\n\n以上的过程就是一个等待/通知机制，等待的线程在等待状态不会耗费系统资源，当需要它启动的时候其他的线程会通知它启动，这样也不会错过启动的时机。\n1.2. 等待/通知机制的实现\n1.2.1. 等待/通知机制涉及的主要方法\n\n等待\nwait()：使调用该方法的线程释放锁，从运行状态中退出，进入等待队列，直到接到通知或者被中断\nwait(long time)：等待 time 毫秒内是否有线程对其进行了唤醒，如果超过这个时间则自动唤醒\n\n\n通知\nnotify()：随机唤醒等待队列中等待锁的一个线程，使该线程退出等待队列，进入可运行状态\nnotifyAll()：使所有线程退出等待队列，进入可运行状态，执行的顺序由 JVM 决定\n\n\n\n以上这些方法都是 Object 类的方法，因为 sybchronized 可以将任一个对象作为锁，所以 Java 为每个 Object 都实现了wait()和notify()方法，因为这些方法是通过synchronized (lock) {...}中的lock来调用的，比如：lock.wait()，lock.notify()等，所以这些方法必须在 synchronized 方法或代码块中调用。如果调用它们时没有持有适当锁，会抛出IllegalMonitorStateException异常（是个 RuntimeException，不用 try-catch）。\n但是 wait 的线程是如何被其对应的 notify 通知到的呢？\n实现机制是这样的：每个锁对象都又两个队列，一个是就绪队列，一个是阻塞队列。就绪队列中存储了将要获得锁的线程，阻塞队列中存储了被阻塞的线程。一个线程被唤醒后，才会进入就绪队列，等待 CPU 调度；反之，一个线程被 wait 后就会进入阻塞队列，等待又其他线程调用了 notify，它才会被选中进入就绪队列，等待被 CPU 调度。\n1.2.2. Java的线程状态转换说明\n线程状态转换示意图如下：\n\n\n创建一个线程之后，再调用它的 start() 方法，它会进入 Runnable（可运行）状态，不过这个是一个准备运行的状态，当这个线程抢占到 CPU 资源后，他就会变成 Running（运行）状态。\nRunnable 状态和 Running  状态可相互切换，线程进入 Runnable 大体有如下 5 种情况：\nsleep() 方法经过指定休眠时间结束\n线程调用的阻塞 IO 方法已经返回，阻塞方法执行完毕\n线程在等待的通知发起了通知给它\nsuspend 的线程调用了 resume 恢复\n线程成功地获得了锁\n\n\nBlocked 状态，表示阻塞状态，线程进入 Blocked 大体有如下 5 种情况：\n调用 sleep()\n调用阻塞式 IO 方法，在方法返回前\n线程在等待某个通知\n程序调用了 suspend()（这个方法极易导致死锁，不建议使用）\n线程试图获得一个锁，但该锁正被其他线程持有\n\n\nrun() 方法结束后就进入了销毁阶段，线程任务执行完毕。\n\n1.2.3. 使用等待/通知机制的程序\n文件 MyList.java 代码如下：\npublic class MyList {\n    private List list = new ArrayList();\n\n    public void add() {\n        list.add(new Object());\n    }\n\n    public int size() {\n        return list.size();\n    }\n}\n\n文件 MyList.java 代码如下：\npublic class ThreadA implements Runnable {\n    private MyList list;\n    private Object lock;\n\n    public ThreadA(MyList list, Object lock) {\n        this.list = list;\n        this.lock = lock;\n    }\n\n    @Override\n    public void run() {\n        try {\n            synchronized (lock) {\n                for (int i = 1; i \n文件 MyList.java 代码如下：\npublic class ThreadB implements Runnable {\n    private MyList list;\n    private Object lock;\n\n    public ThreadB(MyList list, Object lock) {\n        this.list = list;\n        this.lock = lock;\n    }\n\n    @Override\n    public void run() {\n        try {\n            synchronized (lock) {\n                if (list.size() != 5) {\n                    System.out.println(\"wait() begin\");\n                    lock.wait();\n                    System.out.println(\"wait() end\");\n                }\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n文件 MyList.java 代码如下：\npublic class Run {\n    public static void main(String[] args) throws InterruptedException {\n        MyList list = new MyList();\n        Object lock = new Object();\n        new Thread(new ThreadB(list, lock)).start();\n        Thread.sleep(50);\n        new Thread(new ThreadA(list, lock)).start();\n    }\n}\n\n运行结果：\nwait() begin\n添加了1个元素\n添加了2个元素\n添加了3个元素\n添加了4个元素\n已发出通知    // 这里发出了通知\n添加了5个元素\n添加了6个元素\n添加了7个元素\n添加了8个元素\n添加了9个元素\n添加了10个元素\nwait() end   // 到这里才结束wait，说明notify执行后不会立刻释放锁，而是等到其线程退出synchronized代码块后才释放锁\n1.3. inperrupt方法遇到wait\n和遇到 sleep 方法差不多，都是会抛出InperruptedException异常，感觉 wait 和 sleep 挺像的，就是 wait 会放开锁，sleep 不会放开锁。\n1.4. wait/notify机制导致的程序逻辑混乱\n1.4.1. 通知过早\n如果在 wait 前调用了 notify，会导致被 wait 的线程一直在 wait，没人通知它可以不 wait 了，然后程序就卡住了……，不过如果在调用 notify 时，没有处于阻塞状态的线程，那么这个通知命令会被忽略，不会有什么影响。\n1.4.2. wait()等待的条件发生了变化\n如下代码会抛出异常，因为它试图在从一个长度为 0 的 list 种删除元素。\n文件 ValueObject.java 代码如下：\npublic class ValueObject {\n    public static List list = new ArrayList();\n}\n\n文件 Add.java 代码如下：\npublic class Add {\n    private Object lock;\n\n    public Add(Object lock) {\n        super();\n        this.lock = lock;\n    }\n\n    public void add() {\n        synchronized (lock) {\n            ValueObject.list.add(\"anyString\");\n            lock.notifyAll();\n        }\n    }\n}\n\n文件 Subtract.java 代码如下：\npublic class Subtract {\n    private Object lock;\n\n    public Subtract(Object lock) {\n        super();\n        this.lock = lock;\n    }\n\n    public void subtrack() {\n        try {\n            synchronized (lock) {\n                if (ValueObject.list.size() == 0) { // Note1\n                    System.out.println(\"wait add string in ValueObject\");\n                    lock.wait();\n                    System.out.println(\"wait is end, have something to remove\");\n                }\n                ValueObject.list.remove(0);\n                System.out.println(\"list.size()=\" + ValueObject.list.size());\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n文件 ThreadAdd.java 代码如下：\npublic class ThreadAdd implements Runnable {\n    private Add add;\n\n    public ThreadAdd(Add add) {\n        super();\n        this.add = add;\n    }\n\n    @Override\n    public void run() {\n        add.add();\n    }\n}\n\n文件 ThreadSubtract.java 代码如下：\npublic class ThreadSubtract implements Runnable {\n    private Subtract subtract;\n\n    public ThreadSubtract(Subtract subtract) {\n        super();\n        this.subtract = subtract;\n    }\n\n    @Override\n    public void run() {\n        subtract.subtrack();\n    }\n}\n\n文件 Run.java 代码如下：\npublic class Run {\n    public static void main(String[] args) throws InterruptedException {\n        Object lock = new Object();\n        Add add = new Add(lock);\n        Subtract subtract = new Subtract(lock);\n        // 有两个remove线程\n        new Thread(new ThreadSubtract(subtract)).start();\n        new Thread(new ThreadSubtract(subtract)).start();\n        Thread.sleep(1000);\n        // 只有一个添加线程\n        new Thread(new ThreadAdd(add)).start();\n    }\n}\n\n运行结果：\nwait add string in ValueObject\nwait add string in ValueObject\nwait is end, have something to remove\nlist.size()=0\nwait is end, have something to remove\nException in thread \"Thread-1\" java.lang.IndexOutOfBoundsException: Index: 0, Size: 0\n    at java.util.ArrayList.rangeCheck(ArrayList.java:653)\n    at java.util.ArrayList.remove(ArrayList.java:492)\n    at ch3.change.Subtract.subtrack(Subtract.java:19)\n    at ch3.change.ThreadSubtract.run(ThreadSubtract.java:13)\n    at java.lang.Thread.run(Thread.java:748)\n出现这个错误的主要原因是：在文件 Subtract.java 的 Note1 处的 if 判断处，两个 ThreadSubtract 线程都进入了，并进入了 wait 状态，在 Add.java 中通知了所有等待线程，两个 ThreadSubtract 线程都被唤醒向下执行，然而只添加了一个元素，两个线程却执行了两次 remove 操作，正确的做法是把 Note1 处的 if 改成 while，这样当 ThreadSubtract 线程的 wait 结束之后，它们会再判断一次 ValueObject.list 的长度，如果不为 0，则执行 remove 操作，如果为 0，则再次进入 wait 状态。修改如下：\n修改文件 Subtract.java 代码为：\npublic class Subtract {\n    private Object lock;\n\n    public Subtract(Object lock) {\n        super();\n        this.lock = lock;\n    }\n\n    public void subtrack() {\n        try {\n            synchronized (lock) {\n                while (ValueObject.list.size() == 0) { // 修改这里：if --> while\n                    System.out.println(\"wait add string in ValueObject\");\n                    lock.wait();\n                    System.out.println(\"wait is end, have something to remove\");\n                }\n                ValueObject.list.remove(0);\n                System.out.println(\"list.size()=\" + ValueObject.list.size());\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n1.5. 生产者/消费者模式实现\n生产者/消费者模式是等待通知最经典的案例。有如下几种模式：\n\n一生产一消费\n一生产多消费\n多生产一消费\n多生产多消费\n\n其操作的内容也有不同的选择，如：\n操作值\n生产者和消费者操作的是一个变量，比如一个字符串。\n\n一生产一消费\n这个时候生产出来就会被消费，set 与 get 教程进行，不会出什么差错。\n\n\n多生产多消费\n会遇到的问题：全部线程进入 WAITING 状态，即假死状态。\n问题出现的原因：我们这里通过notify()来通知其他线程启动，每次只启动一个线程，不过我们没法控制启动的是同类线程还是异类线程，也就是说，我们有一定概率一直处于生产者唤醒生产者，消费者唤醒消费者的状态，这样所有线程将一直处在 WAITING 状态，程序陷入假死状态。\n解决方法：把通知线程启动的notify()换成notifyAll()，这样异类的线程一定会被启动。\n\n\n\n操作栈\n生产者和消费者操作的是一个 list，比如一个 ArrayList，我们要保证这个 list 中只有一个元素，这时会涉及到上一节中讲到的 wait() 等待的条件发生了变化的问题，这时我们要采用将判断当前 list 的长度的 if 修改为 while 的方式解决问题。\n对于操作栈，也存在程序假死的问题，这里也可以通过修改notify()为notifyAll()来解决问题。\n1.6. 通过管道进行线程间的通信\n管道流（pipeStream）是一种很特殊的流，可以用于在不同的线程之间传递数据，一个线程将数据 Output 到管道流，另一个线程再将数据 Input 回来，这样可以实现不同线程间的通信而无需借用临时文件值类的东西，感觉像一个寄存信箱。\n1.6.1. 字节流：PipedOutputStream&PipedInputStream\n示例：\n文件 DataWriter.java 代码如下：\npublic class DataWriter {\n    public static void writeMethod(PipedOutputStream out) {\n        try {\n            System.out.println(\"write:\");\n            for (int i = 1; i \n文件 DataReader.java 代码如下：\npublic class DataReader {\n    public static void readMethod(PipedInputStream in) {\n        try {\n            System.out.println(\"read:\");\n            byte[] buffer = new byte[20];\n            int readLen = in.read(buffer);\n            while (readLen != -1) {\n                String data = new String(buffer, 0, readLen);\n                System.out.print(data);\n                readLen = in.read(buffer);\n            }\n            System.out.println();\n            in.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n文件 ThreadWriter.java 代码如下：\npublic class ThreadWriter implements Runnable {\n    private PipedOutputStream out;\n\n    public ThreadWriter(PipedOutputStream out) {\n        super();\n        this.out = out;\n    }\n\n    @Override\n    public void run() {\n        DataWriter.writeMethod(out);\n    }\n}\n\n文件 ThreadReader.java 代码如下：\npublic class ThreadReader implements Runnable {\n    private PipedInputStream in;\n\n    public ThreadReader(PipedInputStream in) {\n        super();\n        this.in = in;\n    }\n\n    @Override\n    public void run() {\n        DataReader.readMethod(in);\n    }\n}\n\n文件 Run.java 代码如下：\npublic class Run {\n    public static void main(String[] args) {\n        try {\n            PipedOutputStream outputStream = new PipedOutputStream();\n            PipedInputStream inputStream = new PipedInputStream();\n            outputStream.connect(inputStream);\n\n            new Thread(new ThreadReader(inputStream)).start();\n            Thread.sleep(2000);\n            new Thread(new ThreadWriter(outputStream)).start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n1.6.2. 字符流：PipedWriter&PipedReader\n字符流和字节流的操作差不多，就是 write 的时候不用将数据进行 getBytes() 处理就可以直接写入。\n1.7. 实战：交叉备份\n什么是交叉备份：就是创建 n 个线程，其中 n/2 个线程负责将数据备份到 A 数据库中，另外 n/2 个线程负责将数据备份到 B 数据库中，两个线程的备份操作必须交叉进行。\n实现：\n文件 DBTools.java 代码如下：\npublic class DBTools {\n    volatile private boolean isPrevA = false; // 通过这个变量进行标记，实现交替打印，要用volatile保证其可见性\n\n    synchronized public void backupA() {\n        try {\n            while (isPrevA) {\n                wait();\n            }\n            System.out.println(\"A running\");\n            isPrevA = true;\n            notifyAll();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    synchronized public void backupB() {\n        try {\n            while (!isPrevA) {\n                wait();\n            }\n            System.out.println(\"B running\");\n            isPrevA = false;\n            notifyAll();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n文件 BackupA.java 代码如下：\npublic class BackupA implements Runnable {\n    private DBTools dbTools;\n\n    public BackupA(DBTools dbTools) {\n        super();\n        this.dbTools = dbTools;\n    }\n\n    @Override\n    public void run() {\n        dbTools.backupA();\n    }\n}\n\n文件 BackupB.java 代码如下：\npublic class BackupB implements Runnable {\n    private DBTools dbTools;\n\n    public BackupB(DBTools dbTools) {\n        super();\n        this.dbTools = dbTools;\n    }\n\n    @Override\n    public void run() {\n        dbTools.backupB();\n    }\n}\n\n文件 Run.java 代码如下：\npublic class Run {\n    public static void main(String[] args) {\n        DBTools dbTools = new DBTools();\n        for (int i = 0; i \n运行结果：\n...\nA running\nB running\nA running\nB running\n... // A B交叉运行\n"},"Ch3-线程间通信/02-join方法.html":{"url":"Ch3-线程间通信/02-join方法.html","title":"3.2. join方法","keywords":"","body":"1. join方法1.1. join()方法的功能1.2. join过程中线程被中断1.3. join(long)和sleep(long)的区别1.4. join()后面的代码提前运行的意外1. join方法\n1.1. join()方法的功能\n如下代码的作用是：Run 中的 main 线程要等待 myThread 线程的执行，在它执行完之后再执行一下再结束。\n文件 MyThread.java 代码如下：\npublic class MyThread extends Thread {\n    @Override\n    public void run() {\n        try {\n            int secondValue = (int) (Math.random() * 10000);\n            System.out.println(secondValue);\n            Thread.sleep(secondValue);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n文件 Run.java 代码如下：\npublic class Run {\n    public static void main(String[] args) {\n        try {\n            MyThread myThread = new MyThread();\n            myThread.start();\n            myThread.join();\n            System.out.println(\"myThread执行完了，我再执行一下\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n运行结果：\n3783\nmyThread执行完了，我再执行一下\n1.2. join过程中线程被中断\n使用 join 方法中线程被中断的效果 = 使用 wait 方法中线程被中断的效果。因为 join 方法内部就是用 wait 方法实现的。\n我们通过如下程序来验证一下：\n模块：\n\nThreadA：一个执行任务的线程。\nThreadB：负责创建并启动 ThreadA，并等待 ThreadA 执行完毕后继续执行。\nThreadC：负责中断 ThreadB 线程\n\n预计结果：ThreadB 线程的 catch 块会捕捉到异常，ThreadB 被异常停止后，ThreadA和、 会继续执行。\n文件 ThreadA.java 代码如下：\npublic class ThreadA extends Thread {\n    @Override\n    public void run() {\n        for (int i = 0; i \n文件 ThreadB.java 代码如下：\npublic class ThreadB extends Thread {\n    @Override\n    public void run() {\n        try {\n            ThreadA threadA = new ThreadA();\n            threadA.start();\n            threadA.join();\n            System.out.println(\"ThreadB运行结束了\");\n        } catch (InterruptedException e) {\n            System.out.println(\"ThreadB被中断，抛了个异常被catch了\");\n            e.printStackTrace();\n        }\n    }\n}\n\n文件 ThreadC.java 代码如下：\npublic class ThreadC extends Thread {\n    private ThreadB threadB;\n\n    public ThreadC(ThreadB threadB) {\n        super();\n        this.threadB = threadB;\n    }\n\n    @Override\n    public void run() {\n        threadB.interrupt();\n    }\n}\n\n文件 Run.java 代码如下：\npublic class Run {\n    public static void main(String[] args) throws InterruptedException {\n        ThreadB threadB = new ThreadB();\n        threadB.start();\n        Thread.sleep(500);\n        ThreadC threadC = new ThreadC(threadB);\n        threadC.start();\n    }\n}\n\n运行结果：\nThreadB被中断，抛了个异常被catch了\njava.lang.InterruptedException\n    at java.lang.Object.wait(Native Method)\n    at java.lang.Thread.join(Thread.java:1252)\n    at java.lang.Thread.join(Thread.java:1326)\n    at ch3.join.interrupt.ThreadB.run(ThreadB.java:9)\n1.3. join(long)和sleep(long)的区别\njoin 还有一个带参数的方法：join(long)，这个方法是等待传入的参数的毫秒数，如果计时过程中等待的方法执行完了，就接着往下执行，如果计时结束等待的方法还没有执行完，就不再继续等待，而是往下执行。\n那么 join(long) 和 sleep(long) 又有什么区别呢？\n\n如果等待的方法提前结束，join(long) 不会再计时了，而是往下执行，而 sleep(long) 一定要等待够足够的毫秒数。\njoin(long) 会释放锁，sleep(long) 不会释放锁，原因是 join(long) 方法内部是用 wait(long) 方法实现的。\n\njoin(long) 的内部实现原理：\njoin() 的内部实现原理就是 join(0)，所以我们只看 join(long) 的实现原理就好。\npublic final synchronized void join(long millis) throws InterruptedException {\n    long base = System.currentTimeMillis();\n    long now = 0;\n\n    if (millis \n1.4. join()后面的代码提前运行的意外\n"},"Ch3-线程间通信/03-ThreadLocal类.html":{"url":"Ch3-线程间通信/03-ThreadLocal类.html","title":"3.3. ThreadLocal类","keywords":"","body":"1. ThreadLocal类1.1. ThreadLocal的作用1.2. ThreadLocal的原理1.3. 解决第一次使用get()方法返回null问题1.4. InheritableThreadLocal类1. ThreadLocal类\n1.1. ThreadLocal的作用\n我们可以在类中定义 static 变量，这样这个类中的每个对象都会共享这个变量，现在我们想要对这个共享进行划分，划分的原则是：同一个线程共享一个变量，不同的线程共享另一个变量。想要实现这样的功能要用到：ThreadLocal 类。\nThreadLocal 有如下 3 个比较重要的方法：\n\nget()：获取当前线程的值。\nset()：设置当前线程的值。\nremove()：移除当前线程的值。\n\n1.2. ThreadLocal的原理\nThreadLocal 内部有一个 static 的内部类 ThreadLocalMap：\nstatic class ThreadLocalMap {...}\n\n在 Thread 类内部有一个 ThreadLocal.ThreadLocalMap 类型的成员变量。\nThreadLocal.ThreadLocalMap threadLocals = null;\n\n这个 Map 的 Entry 是这样的：\nEntry(ThreadLocal k, Object v) {\n    super(k);\n    value = v;\n}\n\n也就是说是用 ThreadLocal 对象作为 key 存在每个线程中的，当一个线程它要获得 threadLocal 对象中存储的值时，它会调用这个 threadLocal 对象的 get 方法，get 方法会去这个线程中取得 threadLocals 这个 ThreadLocal.ThreadLocalMap，然后根据要获得的这个 threadLocal 对象去 map 中寻找值并返回。\n1.3. 解决第一次使用get()方法返回null问题\n想要实现带初始值的 ThreadLocal，我们需要写一个 extends ThreadLocal 的新类，通过观察 ThreadLocal 中的 get() 方法和 setInitialValue() 方法可以发现：当第一次使用 ThreadLocal 类的 get() 方法时，最终得到的值是 initialValue() 的返回值。\npublic T get() {\n    Thread t = Thread.currentThread();\n    ThreadLocalMap map = getMap(t); // 第一次使用时map为null\n    if (map != null) {\n        ThreadLocalMap.Entry e = map.getEntry(this);\n        if (e != null) {\n            @SuppressWarnings(\"unchecked\")\n            T result = (T)e.value;\n            return result;\n        }\n    }\n    return setInitialValue(); // 会返回Initial的结果\n}\n\nprivate T setInitialValue() {\n    T value = initialValue(); // 来自initialValue()方法\n    Thread t = Thread.currentThread();\n    ThreadLocalMap map = getMap(t);\n    if (map != null)\n        map.set(this, value);\n    else\n        createMap(t, value);\n    return value;\n}\n\nprotected T initialValue() {\n    return null; // 返回为null，所以初始值为null\n}\n\n所以想要一个带初始值的 ThreadLocal 方法，我们需要写一个 ThreadLocal 的子类，然后覆盖它的 initialValue() 方法，使其返回新的初始值即可。\npublic class ThreadLocalExt extends ThreadLocal {\n    @Override\n    protected T initialValue() {\n        return \"我是新的默认初始值，有了我以后，第一次调用get()就不会返回null了\";\n    }\n}\n\n1.4. InheritableThreadLocal类\n使用 InheritableThreadLocal 可以在子线程中取得父线程在 ThreadLocal 中存的值，不过如果在子线程取得值的同时，父线程修改了 InheritableThreadLocal 中的值，那么子线程只能取得旧值。\n同时子线程还可以通过覆盖 InheritableThreadLocal 的 childValue(Object parentValue) 方法对父线程设置的值进行修改：\npublic class InheritableThreadLocalExt extends InheritableThreadLocal {\n    @Override\n    protected T initialValue() {\n        return new Date().getTime();\n    }\n\n    @Override\n    protected Object childValue(Object parentValue) {\n        return parentValue + \" 我是在子线程后加的！\";\n    }\n}\n\n"},"Ch4-Lock的使用/":{"url":"Ch4-Lock的使用/","title":"4. Lock的使用","keywords":"","body":""},"Ch4-Lock的使用/01-ReentrantLock类.html":{"url":"Ch4-Lock的使用/01-ReentrantLock类.html","title":"4.1. ReentrantLock类","keywords":"","body":"1. ReentrantLock类1.1. ReentrantLock类的使用简介1.1.1. 一个简单的使用示例1.1.2. 标准使用示例1.2. Condition类实现等待/通知1.2.1. Condition类的方法介绍1.2.2. 多个Condition实现部分线程通知1.2.3. Condition实现生产者/消费者模式1.3. 公平锁与非公平锁1.4. Lock的方法们1.4.1. 计数类1.4.2. has类1.4.3. 有关lock的属性类1.4.4. lock()方法的各种增强版方法（重要）1.4.5. await()方法的增强版1.5. 使用Condition实现线程的顺序执行2. ReentrantReadWriteLock类2.1. ReentrantReadWriteLock的操作特点2.2. ReentrantReadWriteLock操作方法1. ReentrantLock类\nReentrantLock 类：可重入锁，JDK 1.5 中新增加的。我们知道可以使用 synchronized 关键字实现线程间的互斥，使用 ReentrantLock 类也可以达到相同的效果，并且具有嗅探锁定，多路分支通知等扩展功能，使用起来也更为灵活。\n1.1. ReentrantLock类的使用简介\n1.1.1. 一个简单的使用示例\nprivate Lock lock = new ReentrantLock();\n...\npublic void method() {\n    lock.lock();\n    for (int i = 0; i \n1.1.2. 标准使用示例\n比较标准的使用方法是：\nprivate Lock lock = new ReentrantLock();\n...\npublic void method() {\n    try {\n        lock.lock(); // try块中加锁\n        ...\n    } catch (Exception e) {\n        ...\n    } finally {\n        lock.unlock(); // finally块中放锁\n    }\n}\n\n例如：文件 MyService.java 代码如下：线程调用这两个方法都是同步的。\npublic class MyService {\n    private Lock lock = new ReentrantLock();\n\n    public void methodA() {\n        try {\n            lock.lock();\n            System.out.println(\"Method A begin, ThreadName=\" + Thread.currentThread().getName()\n                    + \", time=\" + System.currentTimeMillis());\n            Thread.sleep(5000);\n            System.out.println(\"Method A end, ThreadName=\" + Thread.currentThread().getName()\n                    + \", time=\" + System.currentTimeMillis());\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    public void methodB() {\n        try {\n            lock.lock();\n            System.out.println(\"Method B begin, ThreadName=\" + Thread.currentThread().getName()\n                    + \", time=\" + System.currentTimeMillis());\n            Thread.sleep(5000);\n            System.out.println(\"Method B end, ThreadName=\" + Thread.currentThread().getName()\n                    + \", time=\" + System.currentTimeMillis());\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            lock.unlock();\n        }\n    }\n}\n\n1.2. Condition类实现等待/通知\n1.2.1. Condition类的方法介绍\n\n\n\nCondition中的方法\n对应Object中的方法\n作用\n\n\n\n\nawait()\nwait()\n等待\n\n\nawait(long time, TimeUnit unit)\nwait(long time)\n等待一定时间，TimeUnit 是用来指定 time 的单位\n\n\nsignal()\nnotify()\n通知一个等待的线程执行\n\n\nsignalAll()\nnotifuAll()\n通知所有等待的线程执行\n\n\n\n简单使用示例：\npublic class MyService {\n    private Lock lock = new ReentrantLock();\n    private Condition condition = lock.newCondition();\n\n    public void await() {\n        try {\n            lock.lock(); // 1.加锁\n            condition.await(); // 2.等待\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            lock.unlock(); // 3.放锁\n        }\n    }\n\n    public void signal() {\n        try {\n            lock.lock(); // 1.加锁\n            condition.signal(); // 2.通知\n        } finally {\n            lock.unlock(); // 3.放锁\n        }\n    }\n}\n\n注意：使用 await() 和 signal() 前必须先 lock.lock()，这相当于只能在 synchronized 方法或同步代码块中调用 wait() 和 notify() 方法一样，也就是说在调用 await() 和 signal() 时，如果没有持有适当的锁，就会抛出 InterruptedException 异常。\n1.2.2. 多个Condition实现部分线程通知\n使用 Condition 对象的一个最大的好处就是我们可以实现多路通知功能了，即我们可以创建多个 Condition 实例，线程对象可以注册在指定的 Condition 中，从而实现有选择地进行线程通知，这样可以更灵活的调度线程。\n示例：两个线程处于 await 状态，使用 signalAll 通知一个再启动，不通知另一个，看程序是否会结束，即看看线程能不能分类通知是否启动。\n文件 MyService.java 代码如下：\npublic class MyService {\n    private Lock lock = new ReentrantLock();\n    private Condition conditionA = lock.newCondition();\n    private Condition conditionB = lock.newCondition();\n\n    public void await_A() {\n        try {\n            lock.lock();\n            System.out.println(\"begin await_A, time=\" + System.currentTimeMillis()\n                    + \", ThreadName=\" + Thread.currentThread().getName());\n            conditionA.await();\n            System.out.println(\"end await_A, time=\" + System.currentTimeMillis()\n                    + \", ThreadName=\" + Thread.currentThread().getName());\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    public void signalAll_A() {\n        try {\n            lock.lock();\n            System.out.println(\"signalAll_A, time=\" + System.currentTimeMillis()\n                    + \", ThreadName=\" + Thread.currentThread().getName());\n            conditionA.signalAll();\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    public void await_B() {\n        try {\n            lock.lock();\n            System.out.println(\"begin await_B, time=\" + System.currentTimeMillis()\n                    + \", ThreadName=\" + Thread.currentThread().getName());\n            conditionB.await();\n            System.out.println(\"end await_B, time=\" + System.currentTimeMillis()\n                    + \", ThreadName=\" + Thread.currentThread().getName());\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    public void signalAll_B() {\n        try {\n            lock.lock();\n            System.out.println(\"signalAll_B, time=\" + System.currentTimeMillis()\n                    + \", ThreadName=\" + Thread.currentThread().getName());\n            conditionB.signalAll();\n        } finally {\n            lock.unlock();\n        }\n    }\n}\n\n文件 ThreadA.java 代码如下：\npublic class ThreadA extends Thread {\n    private MyService service;\n\n    public ThreadA(MyService service) {\n        super();\n        this.service = service;\n        this.setName(\"ThreadA\");\n    }\n\n    @Override\n    public void run() {\n        service.await_A();\n    }\n}\n\n文件 ThreadB.java 代码如下：\npublic class ThreadB extends Thread {\n    private MyService service;\n\n    public ThreadB(MyService service) {\n        super();\n        this.service = service;\n        this.setName(\"ThreadB\");\n    }\n\n    @Override\n    public void run() {\n        service.await_B();\n    }\n}\n\n文件 Run.java 代码如下：\npublic class Run {\n    public static void main(String[] args) throws InterruptedException {\n        MyService service = new MyService();\n        new ThreadA(service).start();\n        new ThreadB(service).start();\n        Thread.sleep(3000);\n        service.signalAll_A();\n    }\n}\n\n运行结果：\nbegin await_A, time=1533963611003, ThreadName=ThreadA\nbegin await_B, time=1533963611014, ThreadName=ThreadB\nsignalAll_A, time=1533963614014, ThreadName=main      // main线程发送A线程再次启动的通知\nend await_A, time=1533963614014, ThreadName=ThreadA   // A线程接到main线程发送通知再次启动\n// 没有线程通知B线程结束，所以程序不会停止，而是一直处于运行状态，因为B线程还在await中\n1.2.3. Condition实现生产者/消费者模式\n一对一交替打印：\n文件 MyService.java 代码如下：\npublic class MyService {\n    private Lock lock = new ReentrantLock();\n    private Condition condition = lock.newCondition();\n    private boolean hasValue = false;\n\n    public void set() {\n        try {\n            lock.lock();\n            while (hasValue) { // Note1: if --> while\n                condition.await();\n            }\n            System.out.println(\"set\");\n            hasValue = true;\n            condition.signalAll(); // Note2: signal --> signAll\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    public void get() {\n        try {\n            lock.lock();\n            while (!hasValue) { // Note3: if --> while\n                condition.await();\n            }\n            System.out.println(\"get\");\n            hasValue = false;\n            condition.signalAll(); // Note4: signal --> signAll\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            lock.unlock();\n        }\n    }\n}\n\n文件 ThreadA.java 代码如下：\npublic class ThreadA extends Thread {\n    private MyService service;\n\n    public ThreadA(MyService service) {\n        super();\n        this.service = service;\n    }\n\n    @Override\n    public void run() {\n        while (true) {\n            service.set();\n        }\n    }\n}\n\n文件 ThreadB.java 代码如下：\npublic class ThreadB extends Thread {\n    private MyService service;\n\n    public ThreadB(MyService service) {\n        super();\n        this.service = service;\n    }\n\n    @Override\n    public void run() {\n        while (true) {\n            service.get();\n        }\n    }\n}\n\n文件 Run.java 代码如下：\npublic class Run {\n    public static void main(String[] args) {\n        MyService service = new MyService();\n        new ThreadA(service).start();\n        new ThreadB(service).start();\n    }\n}\n\n运行结构：\n...\nset\nget\nset\nget\nset\n... // 实现交替打印 set & get\n1.3. 公平锁与非公平锁\n公平锁：线程获取锁的顺序按照线程加锁的顺序分配，即先进先出(FIFO)。\n非公平锁：线程随机获得锁，是一种锁抢占机制，不过可能会造成某些线程一直拿不到锁。\n如何创建公平锁与非公平锁：\nReentrantLock 有带 boolean 型参数 isFair 的构造器：\npublic ReentrantLock(boolean fair) {}\n\n可以选择创建公平锁 (true)，还是非公平锁 (false)。\n1.4. Lock的方法们\n这些对象都是Lock lock = new ReentrantLock()中 lock 对象的方法。\n1.4.1. 计数类\n\ngetHoldCount()：查询当前线程线程保持此锁定的个数，就是调用 lock() 的次数。\ngetQueueLength()：返回正在争夺此锁的估计数。\ngetWaitQueueLength(Condition condition)：返回等待与此锁有关的的给定 condition 的线程的估计数。\n\n1.4.2. has类\n\nhasQueuedThread(Thread thread)：查询 thread 线程是否在等待获取此锁。\nhasQueuedThreads()：查询是否有线程在等待获取此锁。\nhasWaiters(Condition condition)：查询是否有线程在等待与此锁有关的 condition 条件。\n\n1.4.3. 有关lock的属性类\n\nisFair()：判断此锁是不是公平锁。\nisHeldByCurrentThread()：查询当前线程是否保持此锁。\nisLocked()：查询此锁是否由任意线程保持。\n\n1.4.4. lock()方法的各种增强版方法（重要）\n\nlockInterruptibly()：如果当前线程未被中断，获取锁定，如果当前线程已有中断标记，则抛出异常。\nboolean tryLock()：调用时如果锁并没有被其他线程保持，才获取该锁。\nboolean tryLock(long timeout, TimeUnit unit)：在给定的时间中，锁也没有被其他线程保持，才获取该锁。就是说我想拿这个锁，这个锁现在也没人拿，不过我也不拿，我要等一会，如果等够了时间锁还没人拿，我在把锁拿走。\n\nlockInterruptibly()：\n使用 lockInterruptibly()，如果拿到这个锁的线程已经被打上了中断标记，就会直接抛出 InterruptedException 异常，否则就算是打上了标记，不自己在程序中用 interrupted() 来判断并抛异常，线程也是不会停的，只是有个标记而已，而 lockInterruptibly() 方法可以帮我们省去判断中断标记抛异常这些步骤。\n通过代码演示如下：\n文件 MyService.java 代码如下：\npublic class MyService {\n    public ReentrantLock lock = new ReentrantLock();\n\n    public void waitMethod() {\n        try {\n            lock.lock(); // Note\n            System.out.println(\"lock begin \" + Thread.currentThread().getName());\n            for (int i = 0; i \n文件 Run.java 代码如下：\npublic class Run {\n    public static void main(String[] args) throws InterruptedException {\n        MyService service = new MyService();\n        Runnable runnable = new Runnable() {\n            @Override\n            public void run() {\n                service.waitMethod();\n            }\n        };\n\n        Thread threadA = new Thread(runnable);\n        threadA.setName(\"A\");\n        threadA.start();\n        Thread.sleep(500);\n        Thread threadB = new Thread(runnable);\n        threadB.setName(\"B\");\n        threadB.start();\n        threadB.interrupt();\n        System.out.println(\"main end\");\n    }\n}\n\n运行结果：\nlock begin A\nmain end\nlock end A\nlock begin B  // 可以发现，B仍然好好运行着呢\nlock end B\n可以发现，B 仍然好好运行着呢，接下来我们把 MyService.java 中 Note 处的lock.lock();替换成lock.lockInterruptibly();，可以得到如下运行结果：\nlock begin A\nmain end\njava.lang.InterruptedException\n    at java.util.concurrent.locks.AbstractQueuedSynchronizer.\n        acquireInterruptibly(AbstractQueuedSynchronizer.java:1220)\n    at java.util.concurrent.locks.ReentrantLock.lockInterruptibly(ReentrantLock.java:335)\n    at ch4.lockinterrupt.MyService.waitMethod(MyService.java:10)\n    at ch4.lockinterrupt.Run$1.run(Run.java:9)\n    at java.lang.Thread.run(Thread.java:748)\nlock end A\n可以发现 B 被中断了。\nboolean tryLock()：\n文件 MyService.java 代码如下：\npublic class MyService {\n    private ReentrantLock lock = new ReentrantLock();\n\n    public void waitMethod() {\n        if (lock.tryLock()) {\n            System.out.println(Thread.currentThread().getName() + \"获得锁\");\n        } else {\n            System.out.println(Thread.currentThread().getName() + \"没获得锁\");\n        }\n    }\n}\n\n文件 Run.java 代码如下：\npublic class Run {\n    public static void main(String[] args) {\n        MyService service = new MyService();\n        Runnable runnable = new Runnable() {\n            @Override\n            public void run() {\n                service.waitMethod();\n            }\n        };\n\n        Thread threadA = new Thread(runnable);\n        threadA.setName(\"A\");\n        threadA.start();\n        Thread threadB = new Thread(runnable);\n        threadB.setName(\"B\");\n        threadB.start();\n    }\n}\n\n运行结果：\nA获得锁\nB没获得锁 // B tryLock()时，lock被A持有，B就无法获得锁了\n1.4.5. await()方法的增强版\n\nawaitUninterruptibly()：不能被中断的 await() 方法，正常在 await() 中的线程被中断了就立即会抛异常，然后线程就真的断了，用 awaitUninterruptibly() 等待的线程是无视中断操作的，就是说不能通过中断然这个等待中的线程抛异常停止。\nawaitUntil(Date deadline)：等待到 deadline 的时间，如果没人唤醒它就自己唤醒，如果有线程在 deadline 前唤醒它，就提前唤醒。\n\nawaitUninterruptibly()：\n文件 MyService.java 代码如下：\npublic class MyService {\n    private ReentrantLock lock = new ReentrantLock();\n    private Condition condition = lock.newCondition();\n\n    public void testMethod() {\n        try {\n            lock.lock();\n            System.out.println(\"wait begin\");\n            condition.await();  // Note\n            System.out.println(\"wait end\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            lock.unlock();\n        }\n    }\n}\n\n文件 Run.java 代码如下：\npublic class Run {\n    public static void main(String[] args) throws InterruptedException {\n        MyService service = new MyService();\n        Thread thread = new Thread() {\n            @Override\n            public void run() {\n                service.testMethod();\n            }\n        };\n        thread.start();\n        Thread.sleep(3000);\n        thread.interrupt();\n    }\n}\n\n运行结果：\nwait begin\njava.lang.InterruptedException // await中interrupt线程，抛异常！\n    ...\n把 MyService.java 中 Note 处的condition.await();替换成condition.awaitUninterruptibly();，得到如下结果：\nwait begin\n// 只输出一行就永远卡住了，即使在await中，线程也不会被interrupt中断掉\n1.5. 使用Condition实现线程的顺序执行\n假设有 Condition： conditionA，conditionB，conditionC 和 Thread：threadA，threadB，threadC，使三个线程按照 A - B - C 的顺序执行：(注意代码中的 Note 处，是方法的关键)\n文件 Run.java 代码如下：\npublic class Run {\n    volatile private static int nextPrint = 1;      // Note0\n    private static Lock lock = new ReentrantLock();\n    private static Condition conditionA = lock.newCondition();\n    private static Condition conditionB = lock.newCondition();\n    private static Condition conditionC = lock.newCondition();\n\n    public static void main(String[] args) {\n        Thread threadA = new Thread() {\n            @Override\n            public void run() {\n                try {\n                    lock.lock();\n                    while (nextPrint != 1) {\n                        conditionA.await();         // NoteA1\n                    }\n                    System.out.println(\"threadA\");\n                    nextPrint = 2;                  // NoteA2\n                    conditionB.signalAll();         // NoteA3\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                } finally {\n                    lock.unlock();\n                }\n            }\n        };\n\n        Thread threadB = new Thread() {\n            @Override\n            public void run() {\n                try {\n                    lock.lock();\n                    while (nextPrint != 2) {\n                        conditionB.await();         // NoteB1\n                    }\n                    System.out.println(\"threadB\");\n                    nextPrint = 3;                  // NoteB2\n                    conditionC.signalAll();         // NoteB3\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                } finally {\n                    lock.unlock();\n                }\n            }\n        };\n\n        Thread threadC = new Thread() {\n            @Override\n            public void run() {\n                try {\n                    lock.lock();\n                    while (nextPrint != 3) {\n                        conditionC.await();         // NoteC1\n                    }\n                    System.out.println(\"threadC\");\n                    nextPrint = 1;                  // NoteC2\n                    conditionA.signalAll();         // NoteC3\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                } finally {\n                    lock.unlock();\n                }\n            }\n        };\n\n        Thread[] threadAs = new Thread[5];\n        Thread[] threadBs = new Thread[5];\n        Thread[] threadCs = new Thread[5];\n        for (int i = 0; i \n2. ReentrantReadWriteLock类\n2.1. ReentrantReadWriteLock的操作特点\n\n共享操作：读读\n互斥操作：写写，读写，写读\n\n2.2. ReentrantReadWriteLock操作方法\nprivate ReentrantReadWriteLock lock = new ReentrantReadWriteLock();\n\nlock.readLock().lock();    // 获得读锁\nlock.readLock().unlock();  // 释放读锁\n\nlock.writeLock().lock();   // 获得写锁\nlock.writeLock().unlock(); // 释放写锁\n\n"},"Ch5-定时器Timer/":{"url":"Ch5-定时器Timer/","title":"5. 定时器Timer","keywords":"","body":""},"Ch5-定时器Timer/01-定时器Timer.html":{"url":"Ch5-定时器Timer/01-定时器Timer.html","title":"5.1. 定时器Timer","keywords":"","body":"1. 定时器Timer1.1. 需要用到的类和一些方法技术1.2. 一个标准的Timer使用方法实例1.3. 用Date firstTime设置任务开始执行的时间1.4. 用long delay设置任务开始执行的时间1.5. 注意事项1.6. 取消任务执行1.7. scheduleAtFixedRate()和schedule()的区别1. 定时器Timer\nTimer 类的作用就是设置计划任务，不过它是不能单独使用的，它只负责按照要求启动任务，我们需要把要执行的任务提供给它，负责提供任务的就是 TimerTask 类，TimerTask 是一个实现了 Runnable 接口的抽象类，我们要新建 TimerTask 的子类并在 run() 方法中编写我们要计划执行的任务，然后新建 Timer 对象，通过 Timer 对象启动它。\n1.1. 需要用到的类和一些方法技术\n我们先实现一个 TimerTask 类的子类：\npublic class MyTask extends TimerTask {\n    @Override\n    public void run() {\n        System.out.println(\"执行任务\");\n    }\n}\n\n根据当前时间获取Date类的方法：\nCalendar calendarRef = Calendar.getInstance();\ncalendarRef.set(Calendar.SECOND, calendarRef.get(Calendar.SECOND) + 10);\nDate runDate = calendarRef.getTime();\n\n1.2. 一个标准的Timer使用方法实例\nMyTask task = new MyTask(num);\nTimer timer = new Timer(true); // 设置创建守护线程\ntimer.schedule(task, runDate);\n\nTimer 有如下两类执行任务的方式。\n1.3. 用Date firstTime设置任务开始执行的时间\n在 firstTime 时执行任务。\n\n普通执行：schedule(TimerTask task, Date firstTime)\n周期执行：schedule(TimerTask task, Date firstTime, long period)\n\n1.4. 用long delay设置任务开始执行的时间\n即从当前时间开始，等待 delay 时间，然后执行任务。\n\n普通执行：schedule(TimerTask task, long delay)\n周期执行：schedule(TimerTask task, long delay, long period)\n\n1.5. 注意事项\n\nTimer 要创建成守护线程：Timer timer = new Timer(true)。\n如果 Timer 执行任务时发现给定的时间已经过期了，会立即执行相和歌任务。\n可以用一个 Timer 设置多个 TimerTask 的执行，这些 TimerTask 会被按照调用 schedule 的顺序执行，如果中间有一个 task 特别耗时导致在它后面执行的任务过期了，那么到它后面的任务执行时，这个 timer 会发现这个任务过期了，并立刻执行它，不过这会导致这个任务执行的时间和设定的不一样。\n\n1.6. 取消任务执行\n\nTimerTask 类的 cancel() 方法：将自身从任务队列中清除。\nTimer 类的 cancel() 方法：将任务队列中的全部任务清空。\n\n不过 Timer 的 cancel() 有时会因为 Timer 类中的 cancel() 方法没有争抢到 queue 锁而取消不成功。(见ch5.cancel.TimerCancelTest.java)\n1.7. scheduleAtFixedRate()和schedule()的区别\n区别：\n\n有追赶执行性：scheduleAtFixedRate()\n无追赶执行性：schedule()\n\n什么是追赶执行性：\n追赶执行性体现在任务给定的时间过期了的时候，有追赶执行性的任务会把从给定的时间到当前时间中漏执行的任务的全都补执行完成，再开始按周期执行，而无追赶执行性的任务只补执行一次的，就开始按周期执行。\n(见ch5.fixrate.ScheduleTest.java)*\n"},"Ch6-单例模式与多线程/":{"url":"Ch6-单例模式与多线程/","title":"6. 单例模式与多线程","keywords":"","body":""},"Ch6-单例模式与多线程/01-单例模式与多线程.html":{"url":"Ch6-单例模式与多线程/01-单例模式与多线程.html","title":"6.1. 单例模式与多线程","keywords":"","body":"1. 单例模式与多线程1.1. 单线程单例模式的实现1.1.1. 立即加载：饿汉模式1.1.2. 延迟加载：懒汉模式1.2. 懒汉模式与线程安全问题1.3. 多线程单例模式的实现1.3.1. DCL双检查锁机制1.3.2. static内部类（不适用于序列化）1.3.3. static代码块1.3.4. enum数据类型1.4. 单例模式的序列化和反序列化1. 单例模式与多线程\n单例模式：就是一个类，它只可以创建出来一个对象，它不允许我们自己创建对象，所以我们首先要把它的构造函数私有化：\nprivate Singleton() {\n}\n\n然后添加一个存储这个对象本身的 static 成员变量：\nprivate static Singleton singleton = new Singleton();\n\n之后通过一个 getInstance() 方法来获取这个唯一的实例化对象。\n1.1. 单线程单例模式的实现\n1.1.1. 立即加载：饿汉模式\npublic class Singleton {\n    private static Singleton singleton = new Singleton(); // 直接在调用getInstance方法前就把这个对象创建出来\n\n    private Singleton() {\n    }\n\n    public static Singleton getInstance() {\n        return singleton;\n    }\n}\n\n1.1.2. 延迟加载：懒汉模式\npublic class Singleton {\n    private static Singleton singleton; // 在调用getInstance方法前先不创建对象\n\n    private Singleton() {\n    }\n\n    public static Singleton getInstance() {\n        try {\n            if (singleton == null) {\n                singleton = new Singleton(); // 第一次调用getInstance时，singleton为空，这时new新对象\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return singleton; // 之后在调用getInstance就直接返回singleton就可以了\n    }\n}\n\n1.2. 懒汉模式与线程安全问题\n使用饿汉模式，倒是没有线程安全问题，不够要是我们从头到尾都用不到 getInstance 方法，我们创建的单例对象的资源就浪费掉了，所以为了节省资源我们还是想要使用懒汉模式的，不过在多线程的情况下，懒汉模式是不能保证单例的。\n懒汉模式不能保证单例的主要原因在这里：\npublic static Singleton getInstance() {\n    if (singleton == null) {\n        Thread.sleep(10000); // 如果我们在这里加一个延时，那么线程一进入到if代码块时，\n                            // 这时singleton依旧为null，这个时候线程二也可以进入if代码块，\n                            // 这样就会有多个线程进入if代码块\n        singleton = new Singleton(); // 多个进入if代码块的线程都会运行这一行，就产生了多个Singleton对象\n    }\n    return singleton;\n}\n\n1.3. 多线程单例模式的实现\n1.3.1. DCL双检查锁机制\n想要解决多线程不能保证单例的问题，使用同步技术肯定时第一个想到的，可是如果先这样给整个 getInstance 方法都加上锁：\nsynchronized public static Singleton getInstance() {...}\n\n这样程序的运行效率会大打折扣，因为我们只有在 new 单例对象的时候有线程安全问题，当我们 new 完了单例对象之后就不涉及线程安全问题了，这时候多个线程来取对象是不会发生问题的，可是这个时候 getInstance 方法依旧是同步方法，同一时刻到来的线程仍需要排队执行，所以我们通过 DCL 机制，只给一个很小的部分设计成同步的，来解决这个问题：\npublic static Singleton getInstance() {\n    try {\n        if (singleton == null) {\n            Thread.sleep(1000);\n            synchronized (Singleton.class) {\n                if (singleton == null) { // 不过可能有多个线程都进入了上一个if块，作用这里要再加一层判断\n                    singleton = new Singleton(); // 真正需要同步执行就是这句！\n                }\n            }\n        }\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    return singleton;\n}\n\n1.3.2. static内部类（不适用于序列化）\npublic class Singleton {\n    private static class SingletonHandle { // 把单例对象放在静态内部类中\n        private static Singleton singleton = new Singleton();\n    }\n\n    private Singleton() {\n    }\n\n    public static Singleton getInstance() {\n        return SingletonHandle.singleton;\n    }\n}\n\n1.3.3. static代码块\npublic class Singleton {\n    private static Singleton singleton;\n\n    static {\n        singleton = new Singleton(); // 在静态代码块中实例化对象，感觉和饿汉模式没啥区别\n    }\n\n    private Singleton() {\n    }\n\n    public static Singleton getInstance() {\n        return singleton;\n    }\n}\n\n1.3.4. enum数据类型\n/**\n * 通过只有一个类型的枚举类实现单例\n * 不过为了保证“职责单一原则”，我们要把这个enum用class包装一下\n */\npublic class EnumSingleton {\n    public enum MyEnumSingleton {\n        singletonFactory; // 枚举中只有一个类型\n\n        private EnumSingleton singleton; // 把真正的单例对象放在枚举类中\n\n        private MyEnumSingleton() {\n            singleton = new EnumSingleton();\n        }\n\n        public EnumSingleton getInstance() {\n            return singleton;\n        }\n    }\n\n    public static EnumSingleton getInstance() {\n        return MyEnumSingleton.singletonFactory.getInstance();\n    }\n}\n\n1.4. 单例模式的序列化和反序列化\n不过当我们在一个程序中对单例对象进行了序列化和反序列化操（必须是一个程序中，如果一个程序进行序列化，另一个程序进行反序列化是肯定不一样的），序列化前后的单例对象并不是同一个对象一个。\n对于通过 static 内部类实现的单例对象，我们进行如下操作：\npublic class SaveAndRead {\n    public static void main(String[] args) {\n        try {\n            Singleton singleton = Singleton.getInstance();\n            FileOutputStream fos = new FileOutputStream(\n                new File(\"MultiThread/src/ch6/staticclass/singletonFile.txt\"));\n            ObjectOutputStream oos = new ObjectOutputStream(fos);\n            oos.writeObject(singleton);\n            oos.close();\n            fos.close();\n            System.out.println(singleton.hashCode());\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        try {\n            FileInputStream fis = new FileInputStream(\n                new File(\"MultiThread/src/ch6/staticclass/singletonFile.txt\"));\n            ObjectInputStream ois = new ObjectInputStream(fis);\n            Singleton singleton = (Singleton) ois.readObject();\n            ois.close();\n            fis.close();\n            System.out.println(singleton.hashCode());\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n得到运行结果如下：\n312714112\n668386784 // 序列化前后对象的hashCode改变了\n要想保证是一个对象，我们要在 Singleton 类中加入这样一个方法：\n/**\n * 当JVM从内存中反序列化地组装一个新对象时，会自动调用这个方法返回我们的指定对象\n */\nprotected Object readResolve() throws ObjectStreamException {\n    System.out.println(\"调用了readResolve方法\");\n    return SingletonHandle.singleton;\n}\n\n运行结果：\n312714112\n调用了readResolve方法\n312714112 // 序列化前后对象的hashCode不变\n"},"Ch7-拾遗增补/":{"url":"Ch7-拾遗增补/","title":"7. 拾遗增补","keywords":"","body":""},"Ch7-拾遗增补/01-线程的状态.html":{"url":"Ch7-拾遗增补/01-线程的状态.html","title":"7.1. 线程的状态","keywords":"","body":"1. 线程的状态1. 线程的状态\n线程的状态的表示方法放在 Thread 类中的一个内部枚举类 State 中（Thread.State）：\npublic enum State {\n    NEW,           // 线程实例化后还未执行start()方法\n    RUNNABLE,      // 线程进入运行状态，可能真的在执行，也可能在抢CPU的时间片\n    BLOCKED,       // 正在等待某个监视器锁\n    WAITING,       // 无限期的等待另一个线程的操作，如调用了wait(),join()后\n    TIMED_WAITING, // 有限期的等待另一个线程的操作，如sleep(time),wait(time),join(time)后\n    TERMINATED;    // 线程被销毁时的状态\n}\n\n一个线程的状态可以通过 Thread#getState() 来获得。\n下面是线程状态在一些线程相关的方法调用后的状态示意图：\n\n"},"Ch7-拾遗增补/02-线程组.html":{"url":"Ch7-拾遗增补/02-线程组.html","title":"7.2. 线程组","keywords":"","body":"1. 线程组1.1. 操作线程组的常用方法1.2. 批量停止组内线程1.3. 递归与非递归取得组内对象1. 线程组\n线程组的作用：批量管理线程或者线程组，线程组中既可以有线程对象也可以有线程组对象。\n注意：实例化一个线程组时，如果不指定所属的线程组，就自动归到当前线程对象所属的线程组。\n1.1. 操作线程组的常用方法\n下面通过一个实例来说明 ThreadGroup 中的方法：\npackage ch7.threadgroup;\n\n/**\n * 演示线程组的各种操作方法\n */\npublic class Run {\n    public static void main(String[] args) {\n        // 准备工作\n        Runnable runnable = new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    System.out.println(Thread.currentThread().getName());\n                    Thread.sleep(3000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        };\n\n        // 获取线组名称\n        System.out.print(\"线程组的名称：\");\n        System.out.println(Thread.currentThread().getThreadGroup().getName());\n\n        // 获取线程组中活动线程的数量\n        System.out.print(\"线程组中活动线程的数量：\");\n        System.out.println(Thread.currentThread().getThreadGroup().activeCount());\n\n        // 新建线程组newGroup并把它加入main线程组，新建线程并加入newGroup\n        Thread runnableA = new Thread(runnable, \"runnableA\");\n        Thread runnableB = new Thread(runnable, \"runnableB\");\n        // 要点方法：添加线程组或线程到线程组中\n        // 即使我们这么写：\n        // ThreadGroup group = new ThreadGroup(\"newGroup\");\n        // 效果和下一句也是一样的，\n        // 因为实例化一个线程组时，如果不指定所属的线程组，就自动归到当前线程对象所属的线程组\n        ThreadGroup group = new ThreadGroup(Thread.currentThread().getThreadGroup(), \"newGroup\");\n        Thread threadA = new Thread(group, runnableA, \"threadA\");\n        Thread threadB = new Thread(group, runnableB, \"threadB\");\n\n        threadA.start();\n        threadB.start();\n\n        // 获取线程组中线程组的数量\n        System.out.print(\"线程组中活动线程的数量：\");\n        System.out.println(Thread.currentThread().getThreadGroup().activeCount());\n\n        // 获取线程组的父线程组的名称\n        System.out.print(\"main的父线程组名称：\");\n        System.out.println(Thread.currentThread().getThreadGroup().getParent().getName());\n        System.out.print(\"newGroup的父线程组名称：\");\n        System.out.println(group.getParent().getName());\n    }\n}\n\n运行结果：\n线程组的名称：main\n线程组中活动线程的数量：2\n线程组中活动线程的数量：4\nmain的父线程组名称：system\nnewGroup的父线程组名称：main\nthreadA\nthreadB\n1.2. 批量停止组内线程\n(见 ch7.interrupt.Run.java)\n将线程归属到线程组中，调用 ThreadGroup#interrupt() 方法，可将组内正在运行的线程批量停止。\n1.3. 递归与非递归取得组内对象\n(见 ch7.enumerate.Run.java)\n递归的获取组内对象：\nThreadGroup[] listGroupTrue = new ThreadGroup[mainGroup.activeGroupCount()];\nmainGroup.enumerate(listGroupTrue, true);\n\n非递归的获取组内对象（即只取一层的）：\nThreadGroup[] listGroupFalse = new ThreadGroup[mainGroup.activeGroupCount()];\nmainGroup.enumerate(listGroupFalse, false);\n\n"},"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html":{"url":"Ch7-拾遗增补/03-SimpleDataFormat类的非线程安全处理.html","title":"7.3. SimpleDataFormat类的非线程安全处理","keywords":"","body":"1. SimpleDataFormat类的非线程安全处理1. SimpleDataFormat类的非线程安全处理\nSimpleDateFormat 类主要负责日期转换与格式化，但是它是非线程安全的，如果只用一个 SimpleDateFormat 供给多个线程使用的话，极易出现日期转换错误的情况。\n如下面这段代码，我们启动了 10 个线程用来转换日期，不过，这 10 个线程用的是一个 SimpleDateFormat 对象：\npackage ch7.simpledateformat.formaterror;\n\npublic class MyThread extends Thread {\n    private SimpleDateFormat simpleDateFormat;\n    private String dateString;\n\n    public MyThread(SimpleDateFormat simpleDateFormat, String dateString) {\n        super();\n        this.simpleDateFormat = simpleDateFormat;\n        this.dateString = dateString;\n    }\n\n    @Override\n    public void run() {\n        try {\n            // 先把字符串日期转换成Date\n            Date dateRef = simpleDateFormat.parse(dateString);\n            // 再把Date日期转换成字符串\n            String newDateString = simpleDateFormat.format(dateRef).toString();\n            // 检查转换回来的字符串和原字符串是否相等，如果有转换错的就打印出来\n            if (!newDateString.equals(dateString)) {\n                System.out.println(\"ThreadName=\" + Thread.currentThread().getName() +\n                        \" 转换错误，把 \" + dateString + \" 转换成了 \" + newDateString);\n            }\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\npackage ch7.simpledateformat.formaterror;\n\npublic class Run {\n    public static void main(String[] args) {\n        // 10个线程用的都是这个SimpleDateFormat对象\n        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n        String[] dateStrings = {\"2000-01-01\", \"2000-01-02\", \"2000-01-03\", \"2000-01-04\", \"2000-01-05\",\n                \"2000-01-06\", \"2000-01-07\", \"2000-01-08\", \"2000-01-09\", \"2000-01-10\"};\n\n        MyThread[] myThreads = new MyThread[10];\n        for (int i = 0; i \n这个错误出现的主要是因为 SimpleDateFormat 是线程不安全的，想要保证线程安全，我们必须给每一个线程准备一个 SimpleDateFormat 类，这就用到了 ThreadLocal，我们通过一个 DateTools 类来解决这个问题：\npackage ch7.simpledateformat.resolveerror;\n\npublic class DateTools {\n    private static ThreadLocal tl = new ThreadLocal<>();\n\n    public static SimpleDateFormat getSimpleDateFormat(String datePattern) {\n        SimpleDateFormat simpleDateFormat = tl.get();\n        if (simpleDateFormat == null) {\n            simpleDateFormat = new SimpleDateFormat(datePattern);\n            tl.set(simpleDateFormat);\n        }\n        return simpleDateFormat;\n    }\n}\n\n然后在 MyThread#run() 中通过 DateTools 获取 SimpleDateFormat：\npackage ch7.simpledateformat.resolveerror;\n\npublic class MyThread extends Thread {\n    private String dateString;\n\n    public MyThread(String dateString) {\n        super();\n        this.dateString = dateString;\n    }\n\n    @Override\n    public void run() {\n        try {\n            // 通过DateTools获取SimpleDateFormat\n            Date dateRef = DateTools.getSimpleDateFormat(\"yyyy-MM-dd\").parse(dateString);\n            String newDateString = DateTools.getSimpleDateFormat(\"yyyy-MM-dd\").\n                format(dateRef).toString();\n\n            if (!newDateString.equals(dateString)) {\n                System.out.println(\"ThreadName=\" + Thread.currentThread().getName() +\n                        \" 转换错误，把 \" + dateString + \" 转换成了 \" + newDateString);\n            }\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n"},"Ch7-拾遗增补/04-线程中的异常处理.html":{"url":"Ch7-拾遗增补/04-线程中的异常处理.html","title":"7.4. 线程中的异常处理","keywords":"","body":"1. 线程中的异常处理1.1. 处理线程中的异常1.2. 处理线程组中的异常1. 线程中的异常处理\n1.1. 处理线程中的异常\n\nsetUncaughtExceptionHandle()：给指定线程对象设置异常处理器。\nsetDefaultUncaughtExceptionHandle()：对一个线程类的所有对象设置异常处理器。\n\n测试 setUncaughtExceptionHandle：\npackage ch7.simpledateformat.controller;\n\npublic class UncaughtExceptionHandleTest {\n    public static void main(String[] args) {\n        ErrorThread thread1 = new ErrorThread();\n        // 因为是给指定线程对象设置异常处理器，所以是线程对象在调用\n        thread1.setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n            @Override\n            public void uncaughtException(Thread t, Throwable e) {\n                System.out.println(\"线程 \" + t.getName() + \" 出现了异常\");\n                e.printStackTrace();\n            }\n        });\n        thread1.start();\n\n        ErrorThread thread2 = new ErrorThread();\n        thread2.start();\n    }\n}\n\n测试 setDefaultUncaughtExceptionHandle：\npackage ch7.simpledateformat.controller;\n\npublic class DefaultUncaughtExceptionHandleTest {\n    public static void main(String[] args) {\n        // 因为是对一个线程类的所有对象设置异常处理器，所以是线程类在调用\n        ErrorThread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n            @Override\n            public void uncaughtException(Thread t, Throwable e) {\n                System.out.println(\"线程 \" + t.getName() + \" 出现了异常\");\n                e.printStackTrace();\n            }\n        });\n\n        ErrorThread thread1 = new ErrorThread();\n        thread1.start();\n        ErrorThread thread2 = new ErrorThread();\n        thread2.start();\n    }\n}\n\n一个会抛出异常的线程类：\npackage ch7.simpledateformat.controller;\n\npublic class ErrorThread extends Thread {\n    @Override\n    public void run() {\n        String username = null;\n        System.out.println(username.hashCode());\n    }\n}\n\n1.2. 处理线程组中的异常\n应用：实现一个线程组中的一个线程出现了异常后组内线程全部停止\n方法：新写一个 ThreadGroup 的子类，覆盖 ThreadGroup 中的 public void uncaughtException(Thread t, Throwable e) 方法：\npackage ch7.simpledateformat.stopgroup;\n\npublic class MyThreadGroup extends ThreadGroup {\n    public MyThreadGroup(String name) {\n        super(name);\n    }\n\n    // 在重写的uncaughtException方法中处理组内线程的中断操作，这样组内有一个线程跑出来异常，\n    // 该线程组会调用this.interrupt()，就中断了自己组内的所有线程\n    @Override\n    public void uncaughtException(Thread t, Throwable e) {\n        super.uncaughtException(t, e);\n        this.interrupt();\n    }\n}\n\n注意：使用这种方法，组内的每个线程对象中的 run() 方法中不能有 catch 语句，如果有则不会执行 public void uncaughtException(Thread t, Throwable e) 方法。\n"}}}